/* Xholon Runtime Framework - executes event-driven & dynamic applications
 * Copyright (C) 2006, 2007, 2008 Ken Webb
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 */

package org.primordion.xholon.base;

//import static org.junit.Assert.assertEquals;
//import org.junit.After;
//import org.junit.Before;
//import org.junit.Test;
import com.google.gwt.junit.client.GWTTestCase;

import org.primordion.xholon.app.Application;

/**
 * JUnit test case.
 * @author <a href="mailto:ken@primordion.com">Ken Webb</a>
 * @see <a href="http://www.primordion.com/Xholon">Xholon Project website</a>
 * @since 0.3
 */
public class Xholon_Test extends GWTTestCase {

	private IXholon node[] = null;
	private static final int NUM_NODES = 20; //must be >= 10
	private Application testApp = null;
	
	public String getModuleName() {
    return "org.Xholon";
  }
  
	public void gwtSetUp() throws Exception {
		node = new Xholon_Concrete[NUM_NODES];
		for (int i = 0; i < NUM_NODES; i++) {
			node[i] = new Xholon_Concrete();
		}
		String[] args = new String[0];
		Application.appMain(args, "org.primordion.xholon.tutorials.AppHelloWorld",
		"./config/HelloWorld/HelloWorld_xhn.xml");
		testApp = (Application)Application.getApplication();
	}

	public void gwtTearDown() throws Exception {
		node = null;
		testApp.resetNextId();
		testApp = null;
	}
	
	public void testInitialize() {
		// not sure what to test here
		for (int i = 0; i < NUM_NODES; i++) {
			node[i].initialize();
		}
	}
	
	public void testGetNextId() {
		int initialId = testApp.getNextId(); // some IDs have already been used in setUp()
		for (int i = initialId+1; i < 1000000; i++) {
			assertEquals("[getNextId]", i, testApp.getNextId());
		}
	}
	
	public void testSizeMessageQueue() {
		testApp.setSizeMessageQueue(1000);
		assertEquals("[sizeMessageQueue]", 1000, testApp.getSizeMessageQueue());
	}
	
	public void testGetName() {
		for (int i = 0; i < NUM_NODES; i++) {
			assertEquals("[getName 1]", "UnknownClassName_0", node[i].getName());
		}
		for (int i = 0; i < NUM_NODES; i++) {
			node[i].setRoleName("testRole");
			assertEquals("[getName 2]", "testRole:UnknownClassName_0", node[i].getName());
		}
		for (int i = 0; i < NUM_NODES; i++) {
			IXholonClass xhcNode = makeXholonClass();
			node[i].setXhc(xhcNode);
			assertEquals("[getName 3]", "testRole:testXholonClass_0", node[i].getName());
		}
	}
	
	private IXholonClass makeXholonClass() {
		IXholonClass xc = new XholonClass();
		xc.setId(testApp.getNextXholonClassId());
		xc.setName("TestXholonClass");
		return xc;
	}
}
