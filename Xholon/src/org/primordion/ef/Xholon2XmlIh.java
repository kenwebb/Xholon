/* Xholon Runtime Framework - executes event-driven & dynamic applications
 * Copyright (C) 2012 Ken Webb
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 */

package org.primordion.ef;

//import java.io.File;
//import java.io.IOException;
//import java.io.Writer;
//import java.security.AccessControlException;
import java.util.Date;

import org.primordion.xholon.base.IXholon;
import org.primordion.xholon.base.Xholon;
import org.primordion.xholon.io.xml.IXholon2Xml;
import org.primordion.xholon.io.xml.XmlPrettyPrinter;
import org.primordion.xholon.service.ef.IXholon2ExternalFormat;
//import org.primordion.xholon.util.MiscIo;

/**
 * Export the inheritance heirarchy of a Xholon model in XML format.
 * @author <a href="mailto:ken@primordion.com">Ken Webb</a>
 * @see <a href="http://www.primordion.com/Xholon">Xholon Project website</a>
 * @since 0.8.1 (Created on October 30, 2012)
 */
@SuppressWarnings("serial")
public class Xholon2XmlIh extends AbstractXholon2ExternalFormat implements IXholon2ExternalFormat {

	private String outFileName;
	private String outPath = "./ef/xmlih/";
	private String modelName;
	private IXholon root;
	//private Writer out;
	private StringBuilder sb;
	
	/** Current date and time. */
	private Date timeNow;
	private long timeStamp;
	
	private boolean shouldPrettyPrint = true;
	
	/**
	 * Constructor
	 */
	public Xholon2XmlIh() {}
	
	/*
	 * @see org.primordion.ef.IXholon2ExternalFormat#initialize(java.lang.String, java.lang.String, org.primordion.xholon.base.IXholon)
	 */
	public boolean initialize(String outFileName, String modelName, IXholon root) {
		timeNow = new Date();
		timeStamp = timeNow.getTime();
		if (outFileName == null) {
			this.outFileName = outPath + root.getXhcName() + "_" + root.getId() + "_" + timeStamp + ".xml";
		}
		else {
			this.outFileName = outFileName;
		}
		this.modelName = modelName;
		if (root.hasAncestor("XholonClass")) {
			this.root = root;
		}
		else {
			this.root = root.getApp().getXhcRoot();
		}
		return true;
	}

	/*
	 * @see org.primordion.ef.IXholon2ExternalFormat#writeAll()
	 */
	public void writeAll() {
		/*boolean shouldClose = true;
		if (root.getApp().isUseAppOut()) {
			out = root.getApp().getOut();
			shouldClose = false;
		}
		else {
			try {
				// create any missing output directories
				File dirOut = new File(outPath);
				dirOut.mkdirs(); // will create a new directory only if there is no existing one
				out = MiscIo.openOutputFile(outFileName);
			} catch(AccessControlException e) {
				//out = new PrintWriter(System.out);
				out = root.getApp().getOut();
				shouldClose = false;
			}
		}*/
		sb = new StringBuilder();
		//try {
			sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
			sb.append("<!-- To view this file, open it in a text or XML editor -->\n");
			sb.append(
				"<!--\nAutomatically generated by Xholon version 0.8.1, using Xholon2XmlIh.java\n"
				+ new Date() + " " + timeStamp + "\n"
				+ "model: " + modelName + "\n"
				+ "www.primordion.com/Xholon\n-->\n");
			IXholon2Xml xholon2Xml = root.getXholon2Xml();
			xholon2Xml.setXhAttrStyle(IXholon2Xml.XHATTR_TO_XMLELEMENT);
			xholon2Xml.setWriteStartDocument(false);
			String xmlString = xholon2Xml.xholon2XmlString(root);
			if (shouldPrettyPrint) {
				XmlPrettyPrinter p = new XmlPrettyPrinter();
				p.setOmitXmlDeclaration("yes");
				xmlString = p.format(xmlString);
			}
			//out.write(sb.toString());
			//out.write(xmlString);
			//out.flush();
			writeToTarget(sb.toString() + xmlString, outFileName, outPath, root);
		//} catch (IOException e) {
		//	Xholon.getLogger().error("", e);
		//}
		//if (shouldClose) {
		//	MiscIo.closeOutputFile(out);
		//}
	}

	public boolean isShouldPrettyPrint() {
		return shouldPrettyPrint;
	}

	public void setShouldPrettyPrint(boolean shouldPrettyPrint) {
		this.shouldPrettyPrint = shouldPrettyPrint;
	}
	
}
