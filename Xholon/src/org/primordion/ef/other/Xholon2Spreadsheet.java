/* Xholon Runtime Framework - executes event-driven & dynamic applications
 * Copyright (C) 2016 Ken Webb
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 */

package org.primordion.ef.other;

import java.util.Date;

import org.primordion.ef.AbstractXholon2ExternalFormat;
import org.primordion.xholon.base.IXholon;
import org.primordion.xholon.base.Xholon;
import org.primordion.xholon.service.ef.IXholon2ExternalFormat;
import org.primordion.xholon.service.XholonHelperService;

/**
 * Export a Xholon model in Spreadsheet format.
 * @author <a href="mailto:ken@primordion.com">Ken Webb</a>
 * @see <a href="http://www.primordion.com/Xholon">Xholon Project website</a>
 * @since 0.9.1 (Created on November 6, 2016)
 */
@SuppressWarnings("serial")
public class Xholon2Spreadsheet extends AbstractXholon2ExternalFormat implements IXholon2ExternalFormat {

  private String outFileName;
  private String outPath = "./ef/sprdsht/";
  private String modelName;
  private IXholon root;
  private StringBuilder sb;
  
  /** Current date and time. */
  private Date timeNow;
  private long timeStamp;
    
  /**
   * Whether data should be written to a String and System.out
   * (and thence maybe to a web browser), or to a file.
   */
  private boolean shouldWriteToString = true; //false; // GWT
  
  /**
   * Constructor.
   */
  public Xholon2Spreadsheet() {}
  
  @Override
  public String getVal_String() {
    return sb.toString();
  }
  
  @Override
  public boolean initialize(String fileName, String modelName, IXholon root) {
    timeNow = new Date();
    timeStamp = timeNow.getTime();
    if (fileName == null) {
      this.outFileName = outPath + root.getXhcName() + "_" + root.getId() + "_" + timeStamp + ".xml";
    }
    else {
      this.outFileName = fileName;
    }
    this.modelName = modelName;
    this.root = root;
    return true;
  }

  /*
   * @see org.primordion.ef.IXholon2ExternalFormat#writeAll()
   */
  public void writeAll() {
    sb = new StringBuilder();
    // remove any blanks from modelName
    sb.append("<Spreadsheet rolename=\"").append(modelName.replaceAll(" ", "_")).append("\">\n");
    sb.append(
      "<!--\nAutomatically generated by Xholon version 0.9.1, using Xholon2Spreadsheet.java\n"
      + new Date() + " " + timeStamp + "\n"
      + "model: " + modelName + "\n"
      + "www.primordion.com/Xholon\n-->\n");
    writeRow(root);
    sb.append("</Spreadsheet>\n");
    if (shouldWriteToString) {
      writeToTarget(sb.toString(), outFileName, outPath, root);
    }
    else {}
    IXholon xholonHelperService = root.getService("XholonHelperService");
    ((XholonHelperService)xholonHelperService).pasteLastChild(root.getRootNode(), sb.toString());
  }

  /**
   * Write one spreadsheet row, and its child or descendant nodes.
   * @param node The current node in the Xholon hierarchy.
   */
  protected void writeRow(IXholon node) {
    sb
    .append("<Srw roleName=\"")
    .append(node.getName("R^^^^^"))
    .append("\">\n");
    switch (getWhichNodes()) {
    case "all_children":
      writeCells_all_children(node);
      break;
    case "all_passive_descendants":
      writeCells_all_passive_descendants(node);
      break;
    default:
      break;
    }
    sb.append("</Srw>\n");
  }
  
  /**
   * Write spreadsheet cells and formulas.
   * Write only the immediate children of ef root.
   * @param node The current node in the Xholon hierarchy.
   */
  protected void writeCells_all_children(IXholon node) {
    IXholon childNode = node.getFirstChild();
    while (childNode != null) {
      writeCell(childNode);
      childNode = childNode.getNextSibling();
    }
  }
  
  /**
   * Write spreadsheet cells and formulas.
   * Write all passive descendants of ef root.
   * Write end nodes only. These are passive node that have no children.
   * @param node The current node in the Xholon hierarchy.
   */
  protected void writeCells_all_passive_descendants(IXholon node) {
    IXholon childNode = node.getFirstChild();
    while (childNode != null) {
      if (childNode.hasChildNodes()) {
        writeCells_all_passive_descendants(childNode);
      }
      else {
        if (childNode.isPassiveObject()) {
          writeCell(childNode);
        }
      }
      childNode = childNode.getNextSibling();
    }
  }
  
  /**
   * Write one spreadsheet cell and formula.
   * @param node The current node in the Xholon hierarchy.
   */
  protected void writeCell(IXholon node) {
    String[] excelFormula = (getExcelFormulaTemplate() == null) ? null : getExcelFormulaTemplate().split("\\^");
    String excelFormulaStart = "INT(";
    String excelFormulaEnd   = ")";
    if ((excelFormula != null) && (excelFormula.length == 2)) {
      excelFormulaStart = excelFormula[0];
      excelFormulaEnd   = excelFormula[1];
    }
    
    IXholon ancestor = node.getRootNode();
    IXholon descendant = node;
    String xpathExpr = ((Xholon)ancestor).getXPath().getExpression(descendant, ancestor, false);
    if (xpathExpr != null) {
      // remove the first location in the XPath expression; assume that the XPath expression will subsequently be evaluated by the Xholon root node
      xpathExpr = xpathExpr.substring(xpathExpr.indexOf("/"));
    }
    
    sb
    .append("  <Scl roleName=\"")
    .append(node.getName("R^^^^^"))
    .append("\">\n")
    .append("    <Sfr>")
    .append("=") // start of Excel formula
    .append(excelFormulaStart) //"INT(")
    .append("XPATH")
    .append(xpathExpr)
    .append("/attribute::")
    .append(this.getAttributeType()) // end of XPath expression
    .append(excelFormulaEnd) //")") // end of Excel formula
    .append("</Sfr>\n")
    .append("  </Scl>\n");
  }
  
  /**
   * Make a JavaScript object with all the parameters for this external format.
   * {"nameTemplate":"r_C^^^","attributeType":"double","excelFormulaTemplate":"INT(^)","whichNodes":"all_passive_descendants"}
   * {"nameTemplate":"r_C^^^","attributeType":"String","excelFormulaTemplate":"CONCATENATE(^)","whichNodes":"all_children"}
   */
  protected native void makeEfParams() /*-{
    var p = {};
    p.nameTemplate = "r_C^^^";
    p.attributeType = "double"; // double int String Object
    p.excelFormulaTemplate = "INT(^)"; // INT TRUNC SUM CONCATENATE
    p.whichNodes = "all_children"; // all_children all_passive_descendants
    this.efParams = p;
  }-*/;
  
  public native String getNameTemplate() /*-{return this.efParams.nameTemplate;}-*/;
  //public native void setNameTemplate(String nameTemplate) /*-{this.efParams.nameTemplate = nameTemplate;}-*/;
  
  public native String getAttributeType() /*-{return this.efParams.attributeType;}-*/;
  //public native void setAttributeType(String attributeType) /*-{this.efParams.attributeType = attributeType;}-*/;
  
  public native String getExcelFormulaTemplate() /*-{return this.efParams.excelFormulaTemplate;}-*/;
  //public native void setExcelFormulaTemplate(String excelFormulaTemplate) /*-{this.efParams.excelFormulaTemplate = excelFormulaTemplate;}-*/;
  
  public native String getWhichNodes() /*-{return this.efParams.whichNodes;}-*/;
  //public native void setWhichNodes(String whichNodes) /*-{this.efParams.whichNodes = whichNodes;}-*/;
  
}
