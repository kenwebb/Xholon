/* Xholon Runtime Framework - executes event-driven & dynamic applications
 * Copyright (C) 2007, 2008 Ken Webb
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 */

package org.primordion.ef.fsm;

import java.util.Date;

import org.primordion.ef.AbstractXholon2ExternalFormat;
import org.primordion.xholon.base.IStateMachineEntity;
import org.primordion.xholon.base.IXholon;
import org.primordion.xholon.base.StateMachineEntity;
import org.primordion.xholon.base.Xholon;
import org.primordion.xholon.base.XPath;
import org.primordion.xholon.common.mechanism.CeStateMachineEntity;
import org.primordion.xholon.service.ef.IXholon2ExternalFormat;

/**
 * Export an executing Xholon application as an XML file in SCXML format.
 * @author <a href="mailto:ken@primordion.com">Ken Webb</a>
 * @see <a href="http://www.primordion.com/Xholon">Xholon Project website</a>
 * @since 0.5 (Created on February 17, 2007)
 * @see http://www.w3.org/TR/scxml/
 */
public class Xholon2Scxml extends AbstractXholon2ExternalFormat implements IXholon2ExternalFormat, CeStateMachineEntity {

  private String scxmlFileName;
  private String outPath = "./ef/scxml/";
  private StringBuilder sb;
  private String modelName;
  private IXholon root;
  private XPath xpath = null;
  
  /**
   * Current date and time.
   */
  private Date timeNow;
  private long timeStamp;
  
  /**
   * Constructor.
   */
  public Xholon2Scxml() {}
  
  /**
   * Constructor.
   * @param scxmlFileName Name of the output SCXML XML file.
   * @param modelName Name of the model.
   * @param root Root of the tree that will be written out.
   */
  public Xholon2Scxml(String scxmlFileName, String modelName, IXholon root) {
    initialize(scxmlFileName, modelName, root);
  }
  
  /*
   * @see org.primordion.ef.IXholon2ExternalFormat#initialize(java.lang.String, java.lang.String, org.primordion.xholon.base.IXholon)
   */
  public boolean initialize(String scxmlFileName, String modelName, IXholon root) {
    timeNow = new Date();
    timeStamp = timeNow.getTime();
    if (scxmlFileName == null) {
      this.scxmlFileName = outPath + root.getXhcName() + "_" + root.getId() + "_" + timeStamp + ".scxml";
    }
    else {
      this.scxmlFileName = scxmlFileName;
    }
    this.modelName = modelName;
    this.root = root;
    xpath = new XPath();
    return true;
  }

  /*
   * @see org.primordion.ef.IXholon2ExternalFormat#writeAll()
   */
  public void writeAll() {
    sb = new StringBuilder();
    sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
    sb.append(
      "<!--\nAutomatically generated by Xholon version 0.5, using Xholon2Scxml.java\n"
      + new Date() + "\nwww.primordion.com/Xholon\n-->\n");
    writeScxml();
    writeToTarget(sb.toString(), scxmlFileName, outPath, root);
  }

  /**
   * Write the scxml tag, and the entire structure contained within that element.
   */
  protected void writeScxml() {
    IXholon topState = xpath.evaluate("descendant::StateMachine/Region/State", root);
    if (topState == null) {return;}
    sb.append("<scxml xmlns=\"http://www.w3.org/2005/07/scxml\" version=\"1.0\""
      + " initialstate=\"" + topState.getRoleName() + "\"" + ">\n");
    writeNotes();
    writeStates();
    sb.append("</scxml>\n");
  }
  
  /**
   * Write notes, in XHTML format.
   */
  protected void writeNotes() {
    sb.append("<notes>\n");
    sb.append("<body xmlns=\"http://www.w3.org/1999/xhtml\">\n");
    sb.append("<p>");
    sb.append(timeNow.toString());
    sb.append("\nThis SCXML file has been generated by an early version of the Xholon SCXML exporter.\n");
    sb.append("</p>\n");
    sb.append("</body>\n");
    sb.append("</notes>\n");
  }
  
  /**
   * Write the state machine hierarchy.
   */
  protected void writeStates() {
    sb.append("\n<!-- States -->\n");
    if (root.getFirstChild() != null) {
      writeState(root.getFirstChild());
    }
  }
  
  /**
   * Write one state, its transitions, and its child states.
   * @param node The current node in the Xholon composite structure hierarchy.
   */
  protected void writeState(IXholon node) {
    switch(node.getXhcId()) {
    case StateCE:
      sb.append("<state id=\"" + node.getRoleName() + "\">\n");
      writePseudostateInitial(node);
      writeTransitions(node); // transitions
      break;
    case FinalStateCE:
      sb.append("<state id=\"" + node.getName() + "\" final=\"true\"/>\n");
      break;
    case RegionCE:
      break;
    default:
      break;
    }
    
    // children
    if (node.getFirstChild() != null) {
      writeState(node.getFirstChild());
    }
    
    switch(node.getXhcId()) {
    case StateCE:
      sb.append("</state>\n");
      break;
    case RegionCE:
      break;
    default:
      break;
    }
    
    // siblings
    if (node.getNextSibling() != null) {
      writeState(node.getNextSibling());
    }
  }
  
  /**
   * Write an initial pseudostate element, if the current state has one.
   * @param stateNode The current state node.
   */
  protected void writePseudostateInitial(IXholon stateNode) {
    IXholon initial = xpath.evaluate("Region/PseudostateInitial", stateNode);
    if (initial != null) {
      sb.append("<initial>\n");
      writeTransitions(initial);
      sb.append("</initial>\n");
    }
  }
  
  /**
   * Write all transitions that eminate from this state.
   * @param stateNode The current state node.
   */
  protected void writeTransitions(IXholon stateNode) {
    // TODO get actual number of ports to use in for loop
    for (int i = 0; i < StateMachineEntity.getMaxPorts(); i++) {
      IXholon transition = stateNode.getPort(i);
      if (transition != null) {
        writeTransition(transition);
      }
    }
  }
  
  /**
   * Write one transition.
   * @param transition The current transition node.
   */
  protected void writeTransition(IXholon transition) {
    sb.append("<transition");
    int event = ((IStateMachineEntity)transition).getTrigger(0);
    // TODO should use constants
    if ((event != -1000) && (event != 0)) {
      sb.append(" event=\"");
      sb.append(Integer.toString(event));
      sb.append("\"" );
    }
    sb.append(" target=\"" );
    IXholon target = transition.getPort(0);
    if (target != null) {
      switch (target.getXhcId()) {
      case StateCE:
        sb.append(target.getRoleName());
        break;
      case FinalStateCE:
      case PseudostateChoiceCE:
      case PseudostateTerminateCE:
        sb.append(target.getName());
        break;
      case PseudostateEntryPointCE:
      case PseudostateExitPointCE:
        target = target.getPort(0).getPort(0);
        if (target != null) {
          sb.append(target.getRoleName());
        }
        break;
      default:
        break;
      }
    }
    sb.append("\"/>\n");
  }
}
