/* Xholon Runtime Framework - executes event-driven & dynamic applications
 * Copyright (C) 2012 Ken Webb
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 */

package org.primordion.ef.petrinet;

//import java.io.File;
//import java.io.IOException;
//import java.io.Writer;
//import java.security.AccessControlException;
import java.util.Date;

import org.primordion.xholon.base.IXholon;
//import org.primordion.xholon.base.Xholon;
import org.primordion.ef.AbstractXholon2ExternalFormat;
import org.primordion.xholon.mech.petrinet.Arc;
import org.primordion.xholon.mech.petrinet.IKinetics;
import org.primordion.xholon.mech.petrinet.PetriNet;
import org.primordion.xholon.mech.petrinet.Transition;
import org.primordion.xholon.service.ef.IXholon2ExternalFormat;
//import org.primordion.xholon.util.MiscIo;

/**
 * Export a Xholon Petri net model in Systems Biology Markup Language (SBML)
 * Level 2 XML format.
 * The resulting file can be viewed and edited by tools that support SBML.
 * Tested with COPASI: biochemical network simulator.
 * @author <a href="mailto:ken@primordion.com">Ken Webb</a>
 * @see <a href="http://www.primordion.com/Xholon">Xholon Project website</a>
 * @since 0.8.1 (Created on September 4, 2012)
 * @see <a href="http://www.sbml.org/">SBML website</a>
 * @see <a href="http://www.copasi.org/">COPASI website</a>
 */
@SuppressWarnings("serial")
public class Xholon2Sbml4PetriNets extends AbstractXholon2ExternalFormat implements IXholon2ExternalFormat {
	
	// suffixes to add to SBML id's to ensure no duplicates across the various SBML types
	protected static final String CMPT = "c"; // compartment
	protected static final String SPEC = "s"; // species
	protected static final String REAC = "r"; // reaction
	
	// dummy species to output if a Xholon active object doesn't act on anything
	protected static final String DUMMY_SPECIES = "DUMMY_000s"; // make it easy to recognize
	
	private String outFileName;
	private String outPath = "./ef/sbml/";
	private String modelName;
	private IXholon root;
	//private Writer out;
	private StringBuilder sb;
	private StringBuilder compartmentSb;
	private StringBuilder placeSb;
	private StringBuilder transitionSb;
	private StringBuilder functionDefSb;
	
	/** Current date and time. */
	private Date timeNow;
	private long timeStamp;
	
	/** Template to use when writing out node names. */
	protected String nameTemplate = "r_c_i^";

	/**
	 * Constructor.
	 */
	public Xholon2Sbml4PetriNets() {}
	
	@Override
	public String getVal_String() {
	  return sb.toString();
	}
	
	/*
	 * @see org.primordion.xholon.io.IXholon2ExternalFormat#initialize(java.lang.String, java.lang.String, org.primordion.xholon.base.IXholon)
	 */
	public boolean initialize(String fileName, String modelName, IXholon root) {
		timeNow = new Date();
		timeStamp = timeNow.getTime();
		if (fileName == null) {
			this.outFileName = outPath + root.getXhcName() + "_" + root.getId()
			+ "_" + timeStamp + ".sbml.xml";
		}
		else {
			this.outFileName = fileName;
		}
		this.modelName = modelName;
		this.root = root;
		
		return true;
	}
	
	/*
	 * @see org.primordion.xholon.io.IXholon2ExternalFormat#writeAll()
	 */
	public void writeAll() {
	  /* GWT
		boolean shouldClose = true;
		if (root.getApp().isUseAppOut()) {
			out = root.getApp().getOut();
			shouldClose = false;
		}
		else {
			try {
				// create any missing output directories
				File dirOut = new File(outPath);
				dirOut.mkdirs(); // will create a new directory only if there is no existing one
				out = MiscIo.openOutputFile(outFileName);
			} catch(AccessControlException e) {
				//out = new PrintWriter(System.out);
				out = root.getApp().getOut();
				shouldClose = false;
			}
		}*/
		sb = new StringBuilder();
		compartmentSb = new StringBuilder();
		placeSb = new StringBuilder();
		transitionSb = new StringBuilder();
		functionDefSb = new StringBuilder();
		//try {
			sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
			sb.append(
				"<!--\nAutomatically generated by Xholon version 0.8.1, using Xholon2Sbml4PetriNets.java\n"
				+ new Date() + "\nwww.primordion.com/Xholon\n-->\n");
			sb.append("<sbml xmlns=\"http://www.sbml.org/sbml/level2\" level=\"2\" version=\"1\">\n");
			sb.append("<model id=\"" + "_" + timeNow.getTime()
					+ "\" name=\"" + modelName + "\">\n");
			
			writeNotes();
			
			// collect information in StringBuilders
			writeNode(root, 0); // root is level 0
			
			writeFunctionDefinitions();
			writeUnits();
			writeCompartments();
			writeSpecies();
			writeReactions();
			
			sb.append("</model>\n");
			sb.append("</sbml>\n");
			//out.write(sb.toString());
			//out.flush();
			writeToTarget(sb.toString(), outFileName, outPath, root);
		//} catch (IOException e) {
		//	Xholon.getLogger().error("", e);
		//}
		//if (shouldClose) {
		//	MiscIo.closeOutputFile(out);
		//}
	}
	
	/**
	 * Write notes, in XHTML format.
	 */
	protected void writeNotes() {
		//try {
		sb.append("<notes>\n");
		sb.append("<body xmlns=\"http://www.w3.org/1999/xhtml\">\n");
		sb.append("<p>");
		sb.append("Xholon generated this SBML file from a Petri net model.\n");
		sb.append("</p>");
		sb.append("</body>\n");
		sb.append("</notes>\n");
		//} catch (IOException e) {
		//	Xholon.getLogger().error("", e);
		//	//e.printStackTrace();
		//}
	}
	
	/**
     * Make function definitions.
     * @param kineticsType
	 */
	protected void makeFunctionDefinition(int kineticsType) {
		switch (kineticsType) {
		case IKinetics.KINETICS_BASIC_PTNET:
			break;
		case IKinetics.KINETICS_MASS_ACTION:
			break;
		case IKinetics.KINETICS_MICHAELIS_MENTEN:
			functionDefSb
			.append("  <functionDefinition id=\"function_mm\">\n")
		    .append("    <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n")
		    .append("      <lambda>\n")
		    .append("        <bvar>\n")
		    .append("          <ci> substrate </ci>\n")
		    .append("        </bvar>\n")
		    .append("        <bvar>\n")
		    .append("          <ci> Km </ci>\n")
		    .append("        </bvar>\n")
		    .append("        <bvar>\n")
		    .append("          <ci> V </ci>\n")
		    .append("        </bvar>\n")
		    .append("        <apply>\n")
		    .append("          <divide/>\n")
		    .append("          <apply>\n")
		    .append("            <times/>\n")
		    .append("            <ci> V </ci>\n")
		    .append("            <ci> substrate </ci>\n")
		    .append("          </apply>\n")
		    .append("          <apply>\n")
		    .append("            <plus/>\n")
		    .append("            <ci> Km </ci>\n")
		    .append("            <ci> substrate </ci>\n")
		    .append("          </apply>\n")
		    .append("        </apply>\n")
		    .append("      </lambda>\n")
		    .append("    </math>\n")
		    .append("  </functionDefinition>\n");
			break;
		default:
			break;
		}
	}
	
	/**
	 * Write function definitions.
	 */
	protected void writeFunctionDefinitions() {
		if (functionDefSb.length() == 0) {
			return;
		}
		//try {
			sb.append("\n<!-- List of Function Definitions -->\n");
			sb.append("<listOfFunctionDefinitions>\n");
			sb.append(functionDefSb.toString());
			sb.append("</listOfFunctionDefinitions>\n");
		//} catch (IOException e) {
		//	Xholon.getLogger().error("", e);
		//	//e.printStackTrace();
		//}
	}
	
	/**
	 * Write default units.
	 * In Cellontro, all species units are amounts of individual molecules.
	 */
	protected void writeUnits() {
		//try {
			sb.append("\n<!-- Unit Definitions -->\n");
			sb.append("<listOfUnitDefinitions>\n");
			// volume
			sb.append(" <unitDefinition id=\"volume\">\n");
			sb.append("  <listOfUnits>\n");
			sb.append("   <unit kind=\"litre\" scale=\"-3\" multiplier=\"1\" offset=\"0\"/>\n");
			sb.append("  </listOfUnits>\n");
			sb.append(" </unitDefinition>\n");
			// substance
			sb.append(" <unitDefinition id=\"substance\">\n");
			sb.append("  <listOfUnits>\n");
			sb.append("   <unit kind=\"item\" exponent=\"1\"/>\n");
			sb.append("  </listOfUnits>\n");
			sb.append(" </unitDefinition>\n");
			// items per second (ips)
			sb.append(" <unitDefinition id=\"ips\">\n");
			sb.append("  <listOfUnits>\n");
			sb.append("   <unit kind=\"item\" exponent=\"1\"/>\n");
			sb.append("   <unit kind=\"second\" exponent=\"-1\"/>\n");
			sb.append("  </listOfUnits>\n");
			sb.append(" </unitDefinition>\n");
			sb.append("</listOfUnitDefinitions>\n");
		//} catch (IOException e) {
		//	Xholon.getLogger().error("", e);
		//	//e.printStackTrace();
		//}
	}
	
	/**
	 * Write one node, and its child nodes.
	 * Content is only written to various StringBuilders.
	 * @param node The current node in the Xholon hierarchy.
	 * @param level Current level in the hierarchy.
	 */
	protected void writeNode(IXholon node, int level) {
		if (node.getXhc().hasAncestor("PlacePN")) {
			String xhcOrRoleName = makeXhcOrRoleName(node);
			IXholon compartment = node.getParentNode();
			if (compartment.getXhc().hasAncestor("Places")) {
				compartment = compartment.getParentNode();
			}
			placeSb.append("  <species id=\"")
			.append(node.getName(nameTemplate))
			.append(SPEC)
			.append("\" name=\"")
			.append(xhcOrRoleName)
			.append("\"");
			if (!node.isRootNode()) {
				placeSb.append(" compartment=\"")
				.append(compartment.getName(nameTemplate))
				.append(CMPT)
				.append("\"");
			}
			placeSb.append(" initialAmount=\"")
			.append(node.getVal())
			.append("\"/>\n");
		}
		
		else if (node.getXhc().hasAncestor("TransitionPN")) {
			String xhcOrRoleName = makeXhcOrRoleName(node);
			transitionSb.append("  <reaction id=\"")
			.append(node.getName(nameTemplate))
			.append(REAC)
			.append("\" name=\"")
			.append(xhcOrRoleName)
			.append("\"");
			transitionSb.append(" reversible=\"false\">\n");
			
			Transition transition = (Transition)node;
			if (transition.getInputArcs() != null) {
				transitionSb.append("    <listOfReactants>\n");
				IXholon arc = transition.getInputArcs().getFirstChild();
				while (arc != null) {
					transitionSb.append("      <speciesReference species=\"")
					.append(((Arc)arc).getPlace().getName(nameTemplate))
					.append(SPEC);
					// arc weight = stoichiometry; ex: stoichiometry="2"
					if (arc.getVal() > 1.0) {
						transitionSb.append("\" stoichiometry=\"")
						.append(arc.getVal());
					}
					transitionSb.append("\"/>\n");
					arc = arc.getNextSibling();
				}
				transitionSb.append("    </listOfReactants>\n");
			}
			if (transition.getOutputArcs() != null) {
				transitionSb.append("    <listOfProducts>\n");
				IXholon arc = transition.getOutputArcs().getFirstChild();
				while (arc != null) {
					transitionSb.append("      <speciesReference species=\"")
					.append(((Arc)arc).getPlace().getName(nameTemplate))
					.append(SPEC);
					// arc weight = stoichiometry; ex: stoichiometry="2"
					if (arc.getVal() > 1.0) {
						transitionSb.append("\" stoichiometry=\"")
						.append(arc.getVal());
					}
					transitionSb.append("\"/>\n");
					arc = arc.getNextSibling();
				}
				transitionSb.append("    </listOfProducts>\n");
			}
			writeKinetics(node);
			transitionSb.append("  </reaction>\n");
		}
		else {
			if (node.getXhc().hasAncestor("QueueTransitions")) {}
			else if (node.getXhc().hasAncestor("Places")) {}
			else if (node.getXhc().hasAncestor("Transitions")) {}
			else if (node.isContainer()
					|| (node == root)
					|| (node.getXhc().hasAncestor("PetriNet"))) {
				String xhcOrRoleName = makeXhcOrRoleName(node);
				compartmentSb.append("  <compartment id=\"")
				.append(node.getName(nameTemplate))
				.append(CMPT)
				.append("\" name=\"")
				.append(xhcOrRoleName)
				.append("\"");
				if (node != root) {
					compartmentSb.append(" outside=\"")
					.append(node.getParentNode().getName(nameTemplate))
					.append(CMPT)
					.append("\"");
				}
				compartmentSb.append(" size=\"1\"/>\n");
			}
			
			// children
			IXholon childNode = node.getFirstChild();
			while (childNode != null) {
				writeNode(childNode, level+1);
				childNode = childNode.getNextSibling();
			}
		}
		if (node.getXhc().hasAncestor("PetriNet")) {
			makeFunctionDefinition(((PetriNet)node).getKineticsType());
		}
	}
	
	/**
	 * Write out all SBML compartments.
	 * An SBML compartment corresponds to a Xholon container.
	 */
	protected void writeCompartments() {
		//try {
			sb.append("\n<!-- List of Compartments -->\n");
			sb.append("<listOfCompartments>\n");
			sb.append(compartmentSb.toString());
			sb.append("</listOfCompartments>\n");
		//} catch (IOException e) {
		//	Xholon.getLogger().error("", e);
		//	//e.printStackTrace();
		//}
	}
	
	/**
	 * Write out all SBML species.
	 * An SBML species corresponds to a Xholon passive object.
	 */
	protected void writeSpecies() {
		//try {
			sb.append("\n<!-- List of Species -->\n");
			sb.append("<listOfSpecies>\n");
			sb.append(placeSb.toString());
			sb.append("</listOfSpecies>\n");
		//} catch (IOException e) {
		//	Xholon.getLogger().error("", e);
		//	//e.printStackTrace();
		//}
	}
	
	/**
	 * Write out all SBML reactions.
	 * An SBML reaction corresponds to a Xholon active object.
	 */
	protected void writeReactions() {
		//try {
			sb.append("\n<!-- List of Reactions -->\n");
			sb.append("<listOfReactions>\n");
			sb.append(transitionSb.toString());
			sb.append("</listOfReactions>\n");
		//} catch (IOException e) {
		//	Xholon.getLogger().error("", e);
		//	//e.printStackTrace();
		//}
	}
	
	/**
	 * Write kinetics.
	 * @param The current node in the tree.
	 */
	protected void writeKinetics(IXholon node) {
		Transition transition = (Transition)node;
		IXholon compartment = node.getParentNode();
		if (compartment.getXhc().hasAncestor("Transitions")) {
			compartment = compartment.getParentNode();
		}
		transitionSb.append("    <kineticLaw>\n")
		.append("     <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\n")
		.append("      <apply>\n");
		
		switch (transition.getKineticsType()) {
		
		case IKinetics.KINETICS_BASIC_PTNET:
		{
			transitionSb.append("\n");
			break;
		}
		
		case IKinetics.KINETICS_MASS_ACTION:
		{
			transitionSb.append("       <times/>\n");
			transitionSb.append("       <ci> ")
			.append(compartment.getName(nameTemplate))
			.append(CMPT)
			.append(" </ci>\n");
			transitionSb.append("       <ci> K </ci>\n");
			IXholon arc = transition.getInputArcs().getFirstChild();
			while (arc != null) {
				if (arc.getVal() > 1.0) {
					transitionSb.append("       <apply>\n")
					.append("        <power/>\n")
					.append("        <ci> ")
					.append(((Arc)arc).getPlace().getName(nameTemplate))
					.append(SPEC)
					.append(" </ci>\n")
					.append("        <cn> ")
					.append(arc.getVal())
					.append(" </cn>\n")
					.append("       </apply>\n");
				}
				else {
					transitionSb.append("       <ci> ")
					.append(((Arc)arc).getPlace().getName(nameTemplate))
					.append(SPEC)
					.append(" </ci>\n");
				}
				arc = arc.getNextSibling();
			}
			break;
		}
		
		case IKinetics.KINETICS_MICHAELIS_MENTEN:
		{
			transitionSb.append("       <times/>\n");
			transitionSb.append("       <ci> ")
			.append(compartment.getName(nameTemplate))
			.append(CMPT)
			.append(" </ci>\n");
			transitionSb.append("       <apply>\n");
			transitionSb.append("         <ci> function_mm </ci>\n");
			IXholon arc = transition.getInputArcs().getFirstChild();
			while (arc != null) {
				transitionSb.append("         <ci> ")
				.append(((Arc)arc).getPlace().getName(nameTemplate))
				.append(SPEC)
				.append(" </ci>\n");
				arc = arc.getNextSibling();
			}
			transitionSb.append("         <ci> Km </ci>\n");
			transitionSb.append("         <ci> Vmax </ci>\n");
			transitionSb.append("       </apply>\n");
			break;
		}
		
		default:
			// dummy plus as a placeholder
			transitionSb.append("    <plus/>\n")
			.append("    <cn> 0 </cn>\n")
			.append("    <cn> 0 </cn>\n");
			break;
		}
		
		transitionSb.append("      </apply>\n")
		.append("     </math>\n");
		
		// SBML parameters
		switch (transition.getKineticsType()) {
		case IKinetics.KINETICS_BASIC_PTNET:
			transitionSb.append("     <listOfParameters>\n");
			transitionSb.append("      <parameter id=\"P\" value=\"")
			.append(transition.getP())
			.append("\"/>\n");
			transitionSb.append("     </listOfParameters>\n");
			break;
		case IKinetics.KINETICS_MASS_ACTION:
			transitionSb.append("     <listOfParameters>\n");
			transitionSb.append("      <parameter id=\"K\" value=\"")
			.append(transition.getK())
			.append("\" units=\"ips\"/>\n");
			transitionSb.append("     </listOfParameters>\n");
			break;
		case IKinetics.KINETICS_MICHAELIS_MENTEN:
			transitionSb.append("     <listOfParameters>\n");
			transitionSb.append("      <parameter id=\"Km\" value=\"")
			.append(transition.getKm())
			.append("\"/>\n");
			transitionSb.append("      <parameter id=\"Vmax\" value=\"")
			.append(transition.getVmax())
			.append("\"/>\n");
			transitionSb.append("     </listOfParameters>\n");
			break;
		default:
			break;
		}
		transitionSb.append("    </kineticLaw>\n");
	}
	
	/**
	 * Make a name prefix, to distinguish multiple instances with the same name.
	 * @param node
	 * @return
	 */
	protected String makeNamePrefix(IXholon node) {
		IXholon p = node.getParentNode().getParentNode();
		if (p != null && !"PetriNet".equals(p.getXhcName())) {
			return node.getParentNode().getXhcName() + "__";
		}
		return "";
	}
	
	/**
	 * Make a name, either an xhcName or a roleName.
	 * @param node
	 * @return
	 */
	protected String makeXhcOrRoleName(IXholon node) {
		if (node.getRoleName() == null) {
			return node.getXhcName();
		}
		else {
			return node.getRoleName();
		}
	}
	
	public String getOutFileName() {
		return outFileName;
	}

	public void setOutFileName(String outFileName) {
		this.outFileName = outFileName;
	}

	public String getModelName() {
		return modelName;
	}

	public void setModelName(String modelName) {
		this.modelName = modelName;
	}

	public IXholon getRoot() {
		return root;
	}

	public void setRoot(IXholon root) {
		this.root = root;
	}

	public String getNameTemplate() {
		return nameTemplate;
	}

	public void setNameTemplate(String nameTemplate) {
		this.nameTemplate = nameTemplate;
	}

	public String getOutPath() {
		return outPath;
	}

	public void setOutPath(String outPath) {
		this.outPath = outPath;
	}

}
