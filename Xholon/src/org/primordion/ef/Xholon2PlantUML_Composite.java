/* Xholon Runtime Framework - executes event-driven & dynamic applications
 * Copyright (C) 2010 Ken Webb
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 */

package org.primordion.ef;

//import java.io.File;
//import java.io.IOException;
//import java.io.Writer;
//import java.security.AccessControlException;
import java.util.Date;
import java.util.List;

import org.primordion.xholon.base.IXholon;
import org.primordion.xholon.base.PortInformation;
//import org.primordion.xholon.base.Xholon;
import org.primordion.xholon.common.mechanism.CeStateMachineEntity;
import org.primordion.xholon.service.ef.IXholon2ExternalFormat;
//import org.primordion.xholon.util.MiscIo;

/**
 * Export a Xholon model in PlantUML format.
 * Create a composite structure diagram.
 * This diagram is not currently supported by PlantUML,
 * and the format for state diagrams is used instead.
 * @author <a href="mailto:ken@primordion.com">Ken Webb</a>
 * @see <a href="http://www.primordion.com/Xholon">Xholon Project website</a>
 * @since 0.8.1 (Created on March 10, 2010)
 * @see <a href="http://plantuml.sourceforge.net">PlantUML web site</a>
 */
@SuppressWarnings("serial")
public class Xholon2PlantUML_Composite extends AbstractXholon2ExternalFormat implements IXholon2ExternalFormat {
	
	/**
	 * Use what's available in PlantUML for now.
	 * The text should be "composite".
	 */
	private static final String COMPOSITE_STR = "state";
	
	private String outFileName;
	private String outPath = "./ef/plantuml/composite/";
	private String modelName;
	private IXholon root;
	//private Writer out;
	private StringBuilder sb;
	
	/** Current date and time. */
	private Date timeNow;
	private long timeStamp;
	
	/** Whether or not to show state machine nodes. */
	//private boolean shouldShowStateMachineEntities = false;
	
	/** Template to use when writing out node names. */
	//protected String nameTemplate = "r:C^^^";
	//protected String nameTemplate = "^^C^^^"; // don't include role name
	//protected String nameTemplate = "^^c_i^";
	
	/**
	 * Should connections between nodes be shown with their port labels.
	 */
	//private boolean shouldShowPortLabels = false;

	/**
	 * Constructor.
	 */
	public Xholon2PlantUML_Composite() {}
	
	/*
	 * @see org.primordion.xholon.io.IXholon2ExternalFormat#initialize(java.lang.String, java.lang.String, org.primordion.xholon.base.IXholon)
	 */
	public boolean initialize(String mmFileName, String modelName, IXholon root) {
		timeNow = new Date();
		timeStamp = timeNow.getTime();
		if (mmFileName == null) {
			this.outFileName = outPath + root.getXhcName() + "_" + root.getId() + "_Composite_" + timeStamp + ".txt";
		}
		else {
			this.outFileName = mmFileName;
		}
		this.modelName = modelName;
		this.root = root;
		//rootXholonClass = root.getApp().getClassNode("XholonClass");
		return true;
	}
	
	/*
	 * @see org.primordion.xholon.io.IXholon2ExternalFormat#writeAll()
	 */
	public void writeAll() {
		/*boolean shouldClose = true;
		if (root.getApp().isUseAppOut()) {
			out = root.getApp().getOut();
			shouldClose = false;
		}
		else {
			try {
				// create any missing output directories
				File dirOut = new File(outPath);
				dirOut.mkdirs(); // will create a new directory only if there is no existing one
				out = MiscIo.openOutputFile(outFileName);
			} catch(AccessControlException e) {
				//out = new PrintWriter(System.out);
				out = root.getApp().getOut();
				shouldClose = false;
			}
		}*/
		sb = new StringBuilder();
		//try {
			sb.append(
				  "' Automatically generated by Xholon version 0.8.1, using Xholon2PlantUML_Composite.java\n"
				+ "' " + new Date() + " " + timeStamp + "\n"
				+ "' model: " + modelName + "\n"
				+ "' www.primordion.com/Xholon\n\n"
				+ "' To view this file, use PlantUML from plantuml.sourceforge.net\n"
				+ "' See also: www.plantuml.com/plantuml\n"
				+ "' See also: www.planttext.com\n"
				+ "' See also: seeduml.com\n"
				+ "\n");
			sb.append("@startuml ./" + root.getXhcName() + "_" + root.getId() + "_Composite_" + timeStamp + ".png" + "\n");
			writeNode(root);
			sb.append("@enduml\n");
			//out.write(sb.toString());
			//out.flush();
			writeToTarget(sb.toString(), outFileName, outPath, root);
		//} catch (IOException e) {
		//	Xholon.getLogger().error("", e);
		//}
		//if (shouldClose) {
		//	MiscIo.closeOutputFile(out);
		//}
	}
	
	/**
	 * Composite Structure Diagram.
	 * example: hello_1 --> world_2
	 * @param node
	 */
	@SuppressWarnings("unchecked")
	protected void writeNode(IXholon node) {
		//try {
			while (node != null) {
				if (!isShouldShowStateMachineEntities()
						&& (node.getXhcId() == CeStateMachineEntity.StateMachineCE)) {
					// ignore state machine entities
				}
				else {
					List<PortInformation> allPorts = node.getAllPorts();
					for (int j = 0; j < allPorts.size(); j++) {
						PortInformation portInfo = (PortInformation)allPorts.get(j);
						IXholon reffedNode = portInfo.getReffedNode();
						String targetStateStr = getNodeLabel(reffedNode);
						StringBuilder sb = new StringBuilder()
						  .append(getNodeLabel(node))
						  .append(" --> ")
						  .append(targetStateStr);
						if (isShouldShowPortLabels()) {
							sb.append(" : ")
							  .append(portInfo.getFieldName());
						}
						sb.append("\n");
						sb.append(sb.toString());
					}
					if (node.hasChildNodes()) {
						sb.append(COMPOSITE_STR + " " + getNodeLabel(node) + " {\n");
						writeNode(node.getFirstChild());
						sb.append("}\n");
					}
				}
				if (node == root) {
					// a root node doesn't have any siblings; it only has children
					node = null;
				}
				else {
					node = node.getNextSibling();
				}
			}
		//} catch (IOException e) {
		//	Xholon.getLogger().error("", e);
		//}
	}
	
	/**
	 * Get a label for a node.
	 * @param node
	 * @return
	 */
	protected String getNodeLabel(IXholon node) {
		if (node == null) {
			return "null";
		}
		String label = node.getName(getNameTemplate());
		return label;
	}
	
	public String getOutFileName() {
		return outFileName;
	}

	public void setOutFileName(String outFileName) {
		this.outFileName = outFileName;
	}

	public String getModelName() {
		return modelName;
	}

	public void setModelName(String modelName) {
		this.modelName = modelName;
	}

	public IXholon getRoot() {
		return root;
	}

	public void setRoot(IXholon root) {
		this.root = root;
	}

	public String getOutPath() {
		return outPath;
	}

	public void setOutPath(String outPath) {
		this.outPath = outPath;
	}

	/**
   * Make a JavaScript object with all the parameters for this external format.
   */
  protected native void makeEfParams() /*-{
    var p = {};
    p.shouldShowStateMachineEntities = false;
    p.nameTemplate = "^^c_i^";
    p.shouldShowPortLabels = false;
    this.efParams = p;
  }-*/;

  /** Whether or not to show state machine nodes. */
  public native boolean isShouldShowStateMachineEntities() /*-{return this.efParams.shouldShowStateMachineEntities;}-*/;
  //public native void setShouldShowStateMachineEntities(boolean shouldShowStateMachineEntities) /*-{this.efParams.shouldShowStateMachineEntities = shouldShowStateMachineEntities;}-*/;

  /** Template to use when writing out node names. */
  public native String getNameTemplate() /*-{return this.efParams.nameTemplate;}-*/;
  //public native void setNameTemplate(String nameTemplate) /*-{this.efParams.nameTemplate = nameTemplate;}-*/;

  /** Should connections between nodes be shown with their port labels. */
  public native boolean isShouldShowPortLabels() /*-{return this.efParams.shouldShowPortLabels;}-*/;
  //public native void setShouldShowPortLabels(boolean shouldShowPortLabels) /*-{this.efParams.shouldShowPortLabels = shouldShowPortLabels;}-*/;

}
