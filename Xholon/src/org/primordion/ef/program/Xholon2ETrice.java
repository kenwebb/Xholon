/* Xholon Runtime Framework - executes event-driven & dynamic applications
 * Copyright (C) 2015 Ken Webb
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 */

package org.primordion.ef.program;

import java.util.Date;
import java.util.List;

import org.primordion.ef.AbstractXholon2ExternalFormat;
import org.primordion.xholon.base.IXholon;
import org.primordion.xholon.base.PortInformation;
import org.primordion.xholon.common.mechanism.CeStateMachineEntity;
import org.primordion.xholon.service.ef.IXholon2ExternalFormat;

/**
 * Export a Xholon model in eTrice format.
 * 
 * @author <a href="mailto:ken@primordion.com">Ken Webb</a>
 * @see <a href="http://www.primordion.com/Xholon">Xholon Project website</a>
 * @since 0.9.1 (Created on December 2, 2015)
 * @see <a href="http://www.eclipse.org/etrice/">eTrice web site</a>
 */
@SuppressWarnings("serial")
public class Xholon2ETrice extends AbstractXholon2ExternalFormat implements IXholon2ExternalFormat {
	
	private String outFileName;
	private String outPath = "./ef/etrice/";
	private String modelName;
	private IXholon root;
	private StringBuilder sb;
	
	/** Current date and time. */
	private Date timeNow;
	private long timeStamp;
	
	/** Whether or not to show state machine nodes. */
	private boolean shouldShowStateMachineEntities = false;
	
	/** Template to use when writing out node names. */
	protected String nameTemplateCSH = "^^c_i^";
	protected String nameTemplateIH  = "^^C^^^"; // don't include role name
	
	/**
	 * Should connections between nodes be shown with their port labels.
	 */
	//private boolean shouldShowPortLabels = false;

	/**
	 * Constructor.
	 */
	public Xholon2ETrice() {}
	
	@Override
	public String getVal_String() {
	  return sb.toString();
	}
	
	/*
	 * @see org.primordion.xholon.io.IXholon2ExternalFormat#initialize(java.lang.String, java.lang.String, org.primordion.xholon.base.IXholon)
	 */
	public boolean initialize(String fileName, String modelName, IXholon root) {
		timeNow = new Date();
		timeStamp = timeNow.getTime();
		if (fileName == null) {
			this.outFileName = outPath + root.getXhcName() + "_" + root.getId() + "_" + timeStamp + ".room";
		}
		else {
			this.outFileName = fileName;
		}
		this.modelName = modelName;
		this.root = root;
		return true;
	}
	
	/*
	 * @see org.primordion.xholon.io.IXholon2ExternalFormat#writeAll()
	 */
	public void writeAll() {
		sb = new StringBuilder();
		sb.append(
		    "/*\n"
			+ " * Automatically generated by Xholon version 0.9.1, using Xholon2ETrice.java\n"
			+ " * " + new Date() + " " + timeStamp + "\n"
			+ " * model: " + modelName + "\n"
			+ " * www.primordion.com/Xholon\n"
		  + " * \n"
			+ " * To view this file, use eTrice from eclipse.org/etrice\n"
			+ " */\n");
		// TODO modelName should not contain spaces
		sb
		.append("RoomModel " + modelName + " {\n\n")
		.append("  import room.basic.types.* from \"../../org.eclipse.etrice.modellib.java/model/Types.room\"\n")
		.append("  import room.basic.service.timing.* from \"../../org.eclipse.etrice.modellib.java/model/TimingService.room\"\n\n")
		.append("  LogicalSystem LogSys {\n")
		.append("    SubSystemRef subSystemRef: SubSysClass\n")
	  .append("  }\n\n")
		.append("  SubSystemClass SubSysClass {\n")
		.append("    ActorRef topActor: ").append(root.getXhcName()).append("\n")
		.append("    LogicalThread defaultThread\n")
		.append("  }\n\n")
		;
		writeNode(root);
		sb.append("}\n");
		writeToTarget(sb.toString(), outFileName, outPath, root);
	}
	
	/**
	 * Composite Structure
	 * TODO
	 * @param node
	 */
	@SuppressWarnings("unchecked")
	protected void writeNode(IXholon node) {
		// only show state machine nodes if should show them, or if root is a StateMachineCE
		if ((node.getXhcId() == CeStateMachineEntity.StateMachineCE)
				&& (shouldShowStateMachineEntities == false)) {
			return;
		}
		sb
		.append("  ActorClass ")
		.append(node.getName(nameTemplateIH))
		.append(" {\n");
		if (node.hasChildNodes()) {
		  sb.append("    Structure {\n");
			IXholon childNode = node.getFirstChild();
			while (childNode != null) {
				sb
				.append("      ActorRef ")
				.append(childNode.getName(nameTemplateCSH))
				.append(": ")
				.append(childNode.getName(nameTemplateIH))
				.append("\n");
				childNode = childNode.getNextSibling();
			}
		  sb.append("    }\n");
		}
		// TODO if has behavior
		sb.append("  }\n\n");
		
		// children
		if (node.hasChildNodes()) {
			IXholon childNode = node.getFirstChild();
			while (childNode != null) {
				writeNode(childNode);
				childNode = childNode.getNextSibling();
			}
		}
	}
	
	/**
	 * Get a label for a node.
	 * @param node
	 * @return
	 */
	protected String getNodeLabel(IXholon node) {
		if (node == null) {
			return "null";
		}
		String label = node.getName(getNameTemplate());
		return label;
	}
	
	public String getOutFileName() {
		return outFileName;
	}

	public void setOutFileName(String outFileName) {
		this.outFileName = outFileName;
	}

	public String getModelName() {
		return modelName;
	}

	public void setModelName(String modelName) {
		this.modelName = modelName;
	}

	public IXholon getRoot() {
		return root;
	}

	public void setRoot(IXholon root) {
		this.root = root;
	}

	public String getOutPath() {
		return outPath;
	}

	public void setOutPath(String outPath) {
		this.outPath = outPath;
	}

	/**
   * Make a JavaScript object with all the parameters for this external format.
   */
  protected native void makeEfParams() /*-{
    var p = {};
    p.shouldShowStateMachineEntities = false;
    p.nameTemplate = "^^c_i^";
    p.shouldShowPortLabels = false;
    this.efParams = p;
  }-*/;

  /** Whether or not to show state machine nodes. */
  public native boolean isShouldShowStateMachineEntities() /*-{return this.efParams.shouldShowStateMachineEntities;}-*/;
  //public native void setShouldShowStateMachineEntities(boolean shouldShowStateMachineEntities) /*-{this.efParams.shouldShowStateMachineEntities = shouldShowStateMachineEntities;}-*/;

  /** Template to use when writing out node names. */
  public native String getNameTemplate() /*-{return this.efParams.nameTemplate;}-*/;
  //public native void setNameTemplate(String nameTemplate) /*-{this.efParams.nameTemplate = nameTemplate;}-*/;

  /** Should connections between nodes be shown with their port labels. */
  public native boolean isShouldShowPortLabels() /*-{return this.efParams.shouldShowPortLabels;}-*/;
  //public native void setShouldShowPortLabels(boolean shouldShowPortLabels) /*-{this.efParams.shouldShowPortLabels = shouldShowPortLabels;}-*/;

}
