/* Xholon Runtime Framework - executes event-driven & dynamic applications
 * Copyright (C) 2015 Ken Webb
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 */

package org.primordion.ef.program;

import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.primordion.ef.AbstractXholon2ExternalFormat;
import org.primordion.xholon.base.IXholon;
import org.primordion.xholon.base.IXholonClass;
import org.primordion.xholon.base.PortInformation;
import org.primordion.xholon.common.mechanism.CeStateMachineEntity;
import org.primordion.xholon.service.ef.IXholon2ExternalFormat;

/**
 * Export a Xholon model in eTrice .room format.
 * To run the Java Standalone Generator on the resulting .room content (Linux):
 *   Save it to a file by copy and pasting from the Xholon tab.
 *   cd ~/etrice/generator-java
 *   java -jar org.eclipse.etrice.generator.java.jar HelloWorld.room
 * 
 * @author <a href="mailto:ken@primordion.com">Ken Webb</a>
 * @see <a href="http://www.primordion.com/Xholon">Xholon Project website</a>
 * @since 0.9.1 (Created on December 2, 2015)
 * @see <a href="http://www.eclipse.org/etrice/">eTrice web site</a>
 */
@SuppressWarnings("serial")
public class Xholon2ETrice extends AbstractXholon2ExternalFormat implements IXholon2ExternalFormat {
  
  private String outFileName;
  private String outPath = "./ef/etrice/";
  private String modelName;
  private String modelNameNoSpecials; // modelName with no special characters - space dash
  private IXholon root;
  private StringBuilder sb;
  
  /** Current date and time. */
  private Date timeNow;
  private long timeStamp;
  
  /** Whether or not to show state machine nodes. */
  private boolean shouldShowStateMachineEntities = false;
  
  /** Template to use when writing out node names. */
  protected String nameTemplateCSH = "^^c_i^"; // TODO don't include the id ? maybe do include the role? "R^^^^^"
  protected String nameTemplateIH  = "^^C^^^"; // don't include role name
  
  protected Set<String> xhClassNameSet;
  
  /**
   * Should connections between nodes be shown with their port labels.
   */
  //private boolean shouldShowPortLabels = false;

  /**
   * Constructor.
   */
  public Xholon2ETrice() {}
  
  @Override
  public String getVal_String() {
    return sb.toString();
  }
  
  /*
   * @see org.primordion.xholon.io.IXholon2ExternalFormat#initialize(java.lang.String, java.lang.String, org.primordion.xholon.base.IXholon)
   */
  public boolean initialize(String fileName, String modelName, IXholon root) {
    timeNow = new Date();
    timeStamp = timeNow.getTime();
    if (fileName == null) {
      this.outFileName = outPath + root.getXhcName() + "_" + root.getId() + "_" + timeStamp + ".room";
    }
    else {
      this.outFileName = fileName;
    }
    this.modelName = modelName;
    this.modelNameNoSpecials = replaceSpecials(modelName);
    this.root = root;
    xhClassNameSet = new HashSet<String>();
    return true;
  }
  
  /**
   * Replace special characters in model name and role name.
   * @param str
   * @return 
   */
  protected String replaceSpecials(String str) {
    return str.replace(" ", "_").replace("-", "_");
  }
  
  /*
   * @see org.primordion.xholon.io.IXholon2ExternalFormat#writeAll()
   */
  public void writeAll() {
    sb = new StringBuilder();
    sb.append(
        "/*\n"
      + " * Automatically generated by Xholon version 0.9.1, using Xholon2ETrice.java\n"
      + " * " + new Date() + " " + timeStamp + "\n"
      + " * model: " + modelName + "\n"
      + " * www.primordion.com/Xholon\n"
      + " * \n"
      + " * To view this file, use eTrice from eclipse.org/etrice\n"
      + " */\n");
    sb
    .append("RoomModel " + modelNameNoSpecials + " {\n\n")
    .append("  //import room.basic.types.* from \"../../org.eclipse.etrice.modellib.java/model/Types.room\"\n")
    .append("  //import room.basic.service.timing.* from \"../../org.eclipse.etrice.modellib.java/model/TimingService.room\"\n\n")
    .append("  LogicalSystem LogSys {\n")
    .append("    SubSystemRef subSystemRef: SubSysClass\n")
    .append("  }\n\n")
    .append("  SubSystemClass SubSysClass {\n")
    .append("    ActorRef topActor: ").append(root.getXhcName()).append("\n")
    .append("    LogicalThread defaultThread\n")
    .append("  }\n\n")
    ;
    writeNode(root);
    writeSuperClasses();
    writeProtocols();
    sb.append("}\n");
    writeToTarget(sb.toString(), outFileName, outPath, root);
  }
  
  /**
   * Composite Structure
   * @param node
   */
  @SuppressWarnings("unchecked")
  protected void writeNode(IXholon node) {
    // only show state machine nodes if should show them, or if root is a StateMachineCE
    if ((node.getXhcId() == CeStateMachineEntity.StateMachineCE)
        && (shouldShowStateMachineEntities == false)) {
      return;
    }
    String nameIH = node.getName(nameTemplateIH);
    
    if (!xhClassNameSet.contains(nameIH)) {
      writeActorClassStartLine(node.getXhc(), nameIH);
      List<PortInformation> portList = getXhPorts(node);
      writeInterface(node, portList);
      writeStructure(node, portList);
      // TODO if has behavior
      sb.append("  }\n\n");
      xhClassNameSet.add(nameIH);
    }
    
    // children
    if (node.hasChildNodes()) {
      IXholon childNode = node.getFirstChild();
      while (childNode != null) {
        writeNode(childNode);
        childNode = childNode.getNextSibling();
      }
    }
  }
  
  /**
   * Get all outgoing ports associated with the current Xholon node.
   */
  protected List<PortInformation> getXhPorts(IXholon node) {
    return node.getAllPorts();
  }
  
  /**
   * Write an optional eTrice ActorClass Interface.
   * Do this only if there are ports.
   * @param node
   */
  protected void writeInterface(IXholon node, List<PortInformation> portList) {
    if (portList.size() > 0) {
      sb.append("    Interface {\n");
      for (int i = 0; i < portList.size(); i++) {
        PortInformation pi = (PortInformation)portList.get(i);
        if (pi != null) {
          String fnIndex = pi.getFieldNameIndexStr();
          if (fnIndex == null) {
            fnIndex = "";
          }
          sb.append("      Port ").append(pi.getFieldName()).append(fnIndex).append(": ").append("TodoProtocol").append("\n");
        }
      }
      sb.append("    }\n");
    }
  }
  
  /**
   * Write an optional eTrice ActorClass Structure.
   * @param node
   */
  protected void writeStructure(IXholon node, List<PortInformation> portList) {
    String ports = writeStructurePorts(node, portList, new StringBuilder());
    String actorRefs = writeStructureActorRefs(node, new StringBuilder());
    String bindings = writeStructureBindings(node, new StringBuilder());
    if ((ports + actorRefs + bindings).length() > 0) {
      sb
      .append("    Structure {\n")
      .append(ports)
      .append(actorRefs)
      .append(bindings)
      .append("    }\n");
    }
  }
  
  /**
   * 
   */
  protected String writeStructurePorts(IXholon node, List<PortInformation> portList, StringBuilder sbPorts) {
    for (int i = 0; i < portList.size(); i++) {
      PortInformation pi = (PortInformation)portList.get(i);
      if (pi != null) {
        String fnIndex = pi.getFieldNameIndexStr();
        if (fnIndex == null) {
          fnIndex = "";
        }
        sbPorts.append("      external Port ").append(pi.getFieldName()).append(fnIndex).append("\n");
      }
    }
    return sbPorts.toString();
  }
  
  /**
   * 
   */
  protected String writeStructureActorRefs(IXholon node, StringBuilder sbActorRefs) {
    if (node.hasChildNodes()) {
      IXholon childNode = node.getFirstChild();
      while (childNode != null) {
        sbActorRefs
        .append("      ActorRef ")
        .append(makeNameCSH(childNode))
        .append(": ")
        .append(childNode.getName(nameTemplateIH))
        .append("\n");
        childNode = childNode.getNextSibling();
      }
    }
    return sbActorRefs.toString();
  }
  
  /**
   * 
   */
  protected String writeStructureBindings(IXholon node, StringBuilder sbBindings) {
    //sbBindings.append("      // TODO bindings\n");
    return sbBindings.toString();
  }
  
  /**
   * Make a CSH name for a node.
   */
  protected String makeNameCSH(IXholon node) {
    String rn = node.getRoleName();
    if (rn == null) {
      //String cName = node.getXhcName();
      //return cName.substring(0,1).toLowerCase() + cName.substring(1);
      return node.getName(nameTemplateCSH);
    }
    else {
      return replaceSpecials(rn);
    }
  }
  
  /**
   * Write the start line of an ActorClass.
   */
  protected void writeActorClassStartLine(IXholonClass xhcNode, String nameIH) {
    sb
    .append("  ActorClass ")
    .append(nameIH);
    String nameSuperclassIH = xhcNode.getParentNode().getName();
    if (!"XholonClass".equals(nameIH)) {
      sb.append(" extends ").append(nameSuperclassIH);
    }
    sb.append(" {\n");
  }
  
  /**
   * Write all superclasses for each concrete class in xhClassNameSet.
   */
  protected void writeSuperClasses() {
    Set<String> tempSet = new HashSet<String>();
    Iterator<String> it = xhClassNameSet.iterator();
    while (it.hasNext()) {
      String nameIH = it.next();
      IXholonClass xhcIH = root.getClassNode(nameIH);
      if (xhcIH != null) {
        IXholonClass xhcParentIH = (IXholonClass)xhcIH.getParentNode();
        while ((xhcParentIH != null) && (!"XholonClass".equals(xhcParentIH.getName()))) {
          String nameParentIH = xhcParentIH.getName();
          if (!xhClassNameSet.contains(nameParentIH) && !tempSet.contains(nameParentIH)) {
            // write an ActorClass
            writeActorClassStartLine(xhcParentIH, nameParentIH);
            sb.append("  }\n\n");
            tempSet.add(nameParentIH);
          }
          xhcParentIH = (IXholonClass)xhcParentIH.getParentNode();
        }
      }
    }
    // write XholonClass at the end
    IXholonClass xc = root.getClassNode("XholonClass");
    if (xc != null) {
      writeActorClassStartLine(xc, "XholonClass");
      sb.append("  }\n\n");
    }
  }
  
  /**
   * Write potocol classes.
   * For now, it writes a dummyy protocol.
   */
  protected void writeProtocols() {
    sb
    .append("  ProtocolClass ").append("TodoProtocol" ).append(" {\n")
    .append("    incoming {\n")
    .append("      Message sigA()\n")
    .append("    }\n")
    .append("    outgoing {\n")
    .append("      Message sigB()\n")
    .append("    }\n")
    .append("  }\n\n")
    ;
  }
  
  public String getOutFileName() {
    return outFileName;
  }

  public void setOutFileName(String outFileName) {
    this.outFileName = outFileName;
  }

  public String getModelName() {
    return modelName;
  }

  public void setModelName(String modelName) {
    this.modelName = modelName;
  }

  public IXholon getRoot() {
    return root;
  }

  public void setRoot(IXholon root) {
    this.root = root;
  }

  public String getOutPath() {
    return outPath;
  }

  public void setOutPath(String outPath) {
    this.outPath = outPath;
  }

  /**
   * Make a JavaScript object with all the parameters for this external format.
   */
  protected native void makeEfParams() /*-{
    var p = {};
    p.shouldShowStateMachineEntities = false;
    p.shouldShowPortLabels = false;
    this.efParams = p;
  }-*/;

  /** Whether or not to show state machine nodes. */
  public native boolean isShouldShowStateMachineEntities() /*-{return this.efParams.shouldShowStateMachineEntities;}-*/;
  //public native void setShouldShowStateMachineEntities(boolean shouldShowStateMachineEntities) /*-{this.efParams.shouldShowStateMachineEntities = shouldShowStateMachineEntities;}-*/;

  /** Should connections between nodes be shown with their port labels. */
  public native boolean isShouldShowPortLabels() /*-{return this.efParams.shouldShowPortLabels;}-*/;
  //public native void setShouldShowPortLabels(boolean shouldShowPortLabels) /*-{this.efParams.shouldShowPortLabels = shouldShowPortLabels;}-*/;

}
