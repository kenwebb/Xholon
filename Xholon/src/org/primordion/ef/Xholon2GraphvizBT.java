/* Xholon Runtime Framework - executes event-driven & dynamic applications
 * Copyright (C) 2019 Ken Webb
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 */

package org.primordion.ef;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.primordion.xholon.base.IDecoration;
import org.primordion.xholon.base.IXholon;
import org.primordion.xholon.base.IXholonClass;
import org.primordion.xholon.base.IXPath;
import org.primordion.xholon.base.PortInformation;
import org.primordion.xholon.common.mechanism.CeStateMachineEntity;
import org.primordion.ef.AbstractXholon2ExternalFormat;
import org.primordion.xholon.service.AbstractXholonService;
import org.primordion.xholon.service.ef.IXholon2ExternalFormat;

/**
 * Export a Xholon model in Graphviz Binary Tree format.
 * @author <a href="mailto:ken@primordion.com">Ken Webb</a>
 * @see <a href="http://www.primordion.com/Xholon"> Xholon Project website</a>
 * @since 0.9.1 (Created on May 15, 2019)
 */
public class Xholon2GraphvizBT extends Xholon2Graphviz { // implements IXholon2ExternalFormat {
  
  protected String outPath = "./ef/graphvizbt/";
  
  protected int nullcount = 0;

  /**
   * Constructor.
   */
  public Xholon2GraphvizBT() {}
  
  /*
   * @see org.primordion.xholon.io.IXholon2ExternalFormat#writeAll()
   */
  public void writeAll() {
    sb = new StringBuilder();
    String fn = root.getXhcName() + "_" + root.getId() + "_" + timeStamp;
    sb.append(
      "/*\nAutomatically generated by Xholon version 0.9.1, using "
        + this.getClass().getName() + ".java\n"
        + new Date() + " " + timeStamp + "\n"
        + "model: " + modelName + "\n"
        + "www.primordion.com/Xholon\n\n");
    sb.append("To view this file, use Graphviz dot|fdp|neato|twopi|circo|sfdp from http://www.graphviz.org/\n");
    sb.append("For example, to generate an SVG file:\n");
    sb.append("  " + getLayout().split(",")[0] + " -Tsvg -O " + fn + getGvFileExt() + "\n");
    sb.append("Alternatively try one of these:\n");
    sb.append("  " + "dot" + " -Tsvg -O " + fn + getGvFileExt() + "\n");
    sb.append("  " + "dot" + " -Tsvg -O -Grankdir=LR " + fn + getGvFileExt() + "\n");
    sb.append("  " + "fdp" + " -Tsvg -O " + fn + getGvFileExt() + "\n");
    sb.append("  " + "neato" + " -Tsvg -O " + fn + getGvFileExt() + "\n");
    sb.append("  " + "circo" + " -Tsvg -O " + fn + getGvFileExt() + "\n");
    sb.append("Or use one of: -Tgif -Tjpg -Tpdf -Tpng -Txdot -Txlib\n");
    sb.append("See also: http://www.webgraphviz.com/\n");
    sb.append("See also: http://rise4fun.com/agl/\n");
    sb
    .append("\nTo repeat this Xholon export:\n")
    .append(" $wnd.xh.xport(\"Graphviz\", ");
    if (root.isRootNode()) {
      sb.append("$wnd.xh.root()");
    }
    else {
      sb
      .append("$wnd.xh.root().parent().xpath(\"")
      .append(getXPathLocal().getExpression(root, root.getRootNode(), false))
      .append("\")");
    }
    sb
    .append(", '")
    .append(getEfParamsAsJsonString())
    .append("');\n");
    sb.append("*/\n");
    
    makeShapeMap();
    
    writeNodes(root, 0);
    sb.append("}\n");
    
    writeToTarget(sb.toString(), outFileName, outPath, root);
    
    if (isShouldDisplayGraph()) {
      if (!isDefinedViz()) {
        loadVizjs();
      }
      else {
        displayVizjs();
      }
    }
  }
  
  /**
   * Write information about each node.
   * @param node
   * @param level
   */
  protected void writeNodes(IXholon node, int level)
  {
    writeNode(node, level);
  }
  
  /**
   * Write one node, and its child nodes.
   * @param node The current node in the Xholon hierarchy.
   * @param level Current level in the hierarchy.
   */
  protected void writeNode(IXholon node, int level) {
    // only show state machine nodes if should show them, or if root is a StateMachineCE
    if ((node.getXhcId() == CeStateMachineEntity.StateMachineCE)
        && (isShouldShowStateMachineEntities() == false)
        && (level > 0)) {
      return;
    }
    String nodeId = makeNodeId(node);
    String nodeLabel = makeNodeLabel(node);
    if (isShouldQuoteLabels()) {
      if (nodeLabel != null) {
        nodeLabel = "\"" + nodeLabel + "\"";
      }
    }
    String tab = ""; //blanks.substring(0, level);
    
    if (node == root) {
      sb.append(getGvGraph() + " ");
      sb.append(nodeId);
      sb.append(" {\n");
      
      // graph attributes
      sb.append(" graph [");
      String graphSep = "";
      if (nodeLabel != null) {
        sb.append("label=" + nodeLabel);
        graphSep = ",";
      }
      if (isShouldDisplayGraph() && "svg".equals(getOutputFormat())) {
        sb.append(graphSep).append("id=\"" + getGraphvizNodeId(node) + "\"");
        graphSep = ",";
      }
      if (isShouldSpecifyLayout()) {
        String[] lout = getLayout().split(",");
        sb.append(graphSep).append("layout=" + lout[0]);
        if ("neato".equals(lout[0]) && lout.length == 2) {
          sb.append(graphSep).append("mode=" + lout[1]);
        }
        graphSep = ",";
      }
      if (isShouldSpecifyStylesheet()) {
        sb.append(graphSep).append("stylesheet=\"" + getStylesheet() + "\"");
        graphSep = ",";
      }
      if (isShouldSpecifyRankdir()) {
        sb.append(graphSep).append("rankdir=" + getRankdir());
        graphSep = ",";
      }
      if (isShouldSpecifySize()) {
        sb.append(graphSep).append("size=" + getSize());
        graphSep = ",";
      }
      if (isShouldSpecifyFontname()) {
        sb.append(graphSep).append("fontname=" + getFontname());
        graphSep = ",";
      }
      if (!"".equals(getGvCluster())) {
        sb.append(graphSep).append("compound=true");
        graphSep = ",";
      }
      if (!"".equals(getBgGraphColor())) {
        sb.append(graphSep).append("bgcolor=").append(getBgGraphColor());
        graphSep = ",";
      }
      sb.append("]\n");
      
      // node attributes
      if (isShouldColor() || isShouldSpecifyShape() || isShouldSpecifyFontname()) {
        String colorShapeSep = "";
        sb.append(" node [");
        if (isShouldColor()) {
          sb
          .append("style=filled,fillcolor=\"")
          .append(getDefaultNodeColor())
          .append("\"");
          colorShapeSep = ",";
        }
        if (isShouldSpecifyShape()) {
          sb
          .append(colorShapeSep)
          .append("shape=")
          .append(getShape());
          colorShapeSep = ",";
        }
        if (isShouldSpecifyFontname()) {
          sb.append(colorShapeSep).append("fontname=" + getFontname());
        }
        sb.append("]\n");
      }
      
      // edge attributes
      if (isShouldSpecifyArrowhead()) {
        sb
        .append(" edge [")
        .append("arrowhead=")
        .append(getArrowhead())
        .append("]\n");
      }
      
    } // end (node == root)
    
    this.writeNonClusterNode(node, level, nodeId, nodeLabel, tab);
    
    if (node.getFirstChild() != null) {
      sb
      .append(nodeId) //node.getName(this.getNameTemplateNodeLabel()))
      .append(" ")
      .append(getEdgeOp())
      .append(" ")
      .append(makeNodeId(node.getFirstChild())) //node.getFirstChild().getName(this.getNameTemplateNodeLabel()))
      .append(";\n");
      writeNode(node.getFirstChild(), level+1);
    }
    else {
      writeDotNull(node, nodeId, nullcount++, "#000000");
    }
    
    // ignore any sibling of the root node (level-0 node)
    if ((node.getNextSibling() != null) && (level > 0)) {
      sb
      .append(nodeId) //node.getName(this.getNameTemplateNodeLabel()))
      .append(" ")
      .append(getEdgeOp())
      .append(" ")
      .append(makeNodeId(node.getNextSibling())) //node.getNextSibling().getName(this.getNameTemplateNodeLabel()))
      .append(";\n");
      writeNode(node.getNextSibling(), level+1);
    }
    else {
      writeDotNull(node, nodeId, nullcount++, "#ffffff");
    }
  }
  
  protected void writeDotNull(IXholon node, String nodeId, int nullcount, String color) {
    sb
    .append("null")
    .append(nullcount)
    .append(" [shape=point")
    .append(" fillcolor=\"" + color + "\"")
    .append("];\n")
    .append("")
    .append(nodeId) //node.getName(this.getNameTemplateNodeLabel()))
    .append(" ")
    .append(getEdgeOp())
    .append(" null")
    .append(nullcount)
    .append(";\n");
  }
  
  /**
   * Write links from this node to any others, where Xholon has connected ports.
   * @param node The current node.
   */
  @SuppressWarnings("unchecked")
  protected void writeLinks(IXholon node)
  {
    // there are no links/ports in a binary tree
  }
  
  /**
   * Write one link.
   * @param node The node where the link originates.
   * @param portInfo Information about the port that represents the link.
   */
  protected void writeLink(IXholon node, PortInformation portInfo)
  {
    // there are no links/ports in a binary tree
  }

  @Override
  protected native void makeEfParams() /*-{
    var p = {};
    p.gvFileExt = ".gv";
    p.gvGraph = "graph";
    p.layout = "dot"; // neato[,major(default)|KK|hier]
    p.edgeOp = "--";
    p.gvCluster = "";
    p.shouldShowStateMachineEntities = false;
    p.filter = "--Behavior,Script"; //,StateMachineEntity";
    p.nameTemplateNodeId = "^^^^i^";
    p.nameTemplateNodeLabel = "R^^^^^";
    p.shouldQuoteLabels = true;
    p.shouldShowLinks = false;
    p.shouldShowLinkLabels = false;
    p.shouldSpecifyLayout = false;
    p.maxLabelLen = -1;
    p.shouldColor = true;
    p.defaultNodeColor = "#f0f8ff"; // default Node color
    p.bgGraphColor = "white"; // background color of the entire graph; white is the Graphviz default
    p.shouldSpecifyShape = false;
    p.shape = "ellipse"; // "circle,Cable:point"
    
    p.shouldSpecifySize = false;
    p.size = "6";
    p.shouldSpecifyFontname = false;
    p.fontname = "\"Courier New\"";
    p.shouldSpecifyArrowhead = false;
    p.arrowhead = "vee";
    
    p.shouldSpecifyStylesheet = true;
    p.stylesheet = "Xholon.css";
    p.shouldSpecifyRankdir = false;
    p.rankdir = "LR";
    p.shouldDisplayGraph = false;
    p.outputFormat = "svg";
    this.efParams = p;
  }-*/;

}
