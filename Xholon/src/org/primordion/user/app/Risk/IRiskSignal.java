/* Xholon Runtime Framework - executes event-driven & dynamic applications
 * Copyright (C) 2010 Ken Webb
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 */

package org.primordion.user.app.Risk;

/**
 * Risk signals/events.
 * @author <a href="mailto:ken@primordion.com">Ken Webb</a>
 * @see <a href="http://www.primordion.com/Xholon">Xholon Project website</a>
 * @since 0.8.1 (Created on January 15, 2010)
 */
public interface IRiskSignal {
	
	// These events are generated by a Player (human, computer, or remote).
	// msg.sender for each of these events is a Player
	
	/**
	 * A null signal that can be used temporarily as an internal placeholder.
	 */
	public static final int SIG_NULL         = 0;
	
	/**
	 * Attack from one territory, against another territory, using a quantity of dice (One Two or Three).
	 * <p>SIG_ATTACK fromTerritory againstTerritory (One | Two | Three)</p>
	 */
	public static final int SIG_ATTACK       = 1;
	
	/**
	 * Move a quantity of armies, from one territory, to another territory.
	 * <p>SIG_MOVE_ARMIES fromTerritory toTerritory (One | Two | Three | Five | Ten | Twenty | Thirty | Fifty | Hundred | All)+</p>
	 */
	public static final int SIG_MOVE_ARMIES  = 2;
	
	/**
	 * Place a quantity of armies on one territory.
	 * <p>SIG_PLACE_ARMIES territory (One | Two | Three | Five | Ten | Twenty | Thirty | Fifty | Hundred | All)+</p>
	 */
	public static final int SIG_PLACE_ARMIES = 3;
	
	/**
	 * Use three cards to acquire new armies.
	 * <p>SIG_USE_CARDS card1 card2 card3</p>
	 */
	public static final int SIG_USE_CARDS    = 4;
	
	/**
	 * End the current player's turn.
	 * <p>SIG_END_TURN</p>
	 */
	public static final int SIG_END_TURN     = 5;
	
	/**
	 * Start the current player's turn.
	 * <p>SIG_START_TURN</p>
	 */
	public static final int SIG_START_TURN   = 6;
	
	/**
	 * Do the entire current player's turn automatically.
	 * Note: This signal is probably unused.
	 * <p>SIG_DO_TURN</p>
	 */
	public static final int SIG_DO_TURN       = 7;
	
	/**
	 * Show the current player's cards.
	 * <p>SIG_SHOW_CARDS</p>
	 */
	public static final int SIG_SHOW_CARDS       = 8;
	
	/**
	 * Show the current player's territories.
	 * <p>SIG_SHOW_TERRITORIES</p>
	 */
	public static final int SIG_SHOW_TERRITORIES = 9;
	
	/**
	 * Show the current player's continents.
	 * <p>SIG_SHOW_CONTINENTS</p>
	 */
	public static final int SIG_SHOW_CONTINENTS  = 10;
	
	/**
	 * Move no armies
	 */
	public static final int SIG_MOVE_ARMIES_NONE = 11;
	
	
	// These events are generated by a controller such as the GameController.
	
	/**
	 * The player's attack successfully conquered the territory.
	 * <p>SIG_CONQUERED_TERRITORY</p>
	 */
	public static final int SIG_CONQUERED_TERRITORY = 101;
	
	/**
	 * The player's attack has eliminated another player from the game.
	 * <p>SIG_ELIMINATED_PLAYER</p>
	 */
	public static final int SIG_ELIMINATED_PLAYER = 102;
	
	/**
	 * When one player's turn ends, the next player's turn is automatically started.
	 * <p>SIG_STARTED_TURN</p>
	 */
	public static final int SIG_STARTED_TURN = 103;
	
	/**
	 * Positive acknowledgement that a player's request was correctly actioned.
	 */
	public static final int SIG_ACK = 104;
	
	/**
	 * Negative acknowledgement. A player's request could not be correctly actioned.
	 */
	public static final int SIG_NAK = 105;
	
}
