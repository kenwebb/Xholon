// Generated from Cypher.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('xholon/lib/antlr4/index');
var CypherListener = require('./CypherListener').CypherListener;
var grammarFileName = "Cypher.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0081\u060e\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0003\u0002\u0005\u0002\u00ca\n\u0002\u0003\u0002\u0003",
    "\u0002\u0005\u0002\u00ce\n\u0002\u0003\u0002\u0005\u0002\u00d1\n\u0002",
    "\u0003\u0002\u0005\u0002\u00d4\n\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0005\u0004\u00dc\n\u0004",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u00e0\n\u0005\u0003\u0005\u0007",
    "\u0005\u00e3\n\u0005\f\u0005\u000e\u0005\u00e6\u000b\u0005\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u00ec\n\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u00f1\n\u0006\u0003\u0006",
    "\u0005\u0006\u00f4\n\u0006\u0003\u0007\u0003\u0007\u0005\u0007\u00f8",
    "\n\u0007\u0003\b\u0003\b\u0005\b\u00fc\n\b\u0007\b\u00fe\n\b\f\b\u000e",
    "\b\u0101\u000b\b\u0003\b\u0003\b\u0003\b\u0005\b\u0106\n\b\u0007\b\u0108",
    "\n\b\f\b\u000e\b\u010b\u000b\b\u0003\b\u0003\b\u0005\b\u010f\n\b\u0003",
    "\b\u0007\b\u0112\n\b\f\b\u000e\b\u0115\u000b\b\u0003\b\u0005\b\u0118",
    "\n\b\u0003\b\u0005\b\u011b\n\b\u0005\b\u011d\n\b\u0003\t\u0003\t\u0005",
    "\t\u0121\n\t\u0007\t\u0123\n\t\f\t\u000e\t\u0126\u000b\t\u0003\t\u0003",
    "\t\u0005\t\u012a\n\t\u0007\t\u012c\n\t\f\t\u000e\t\u012f\u000b\t\u0003",
    "\t\u0003\t\u0005\t\u0133\n\t\u0006\t\u0135\n\t\r\t\u000e\t\u0136\u0003",
    "\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u0140\n\n",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u0145\n\u000b\u0003",
    "\f\u0003\f\u0005\f\u0149\n\f\u0003\f\u0003\f\u0005\f\u014d\n\f\u0003",
    "\f\u0003\f\u0005\f\u0151\n\f\u0003\f\u0005\f\u0154\n\f\u0003\r\u0003",
    "\r\u0005\r\u0158\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0003\u000e\u0003\u000e\u0005\u000e\u0162\n\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0007\u000e\u0167\n\u000e\f\u000e\u000e\u000e\u016a",
    "\u000b\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f",
    "\u0176\n\u000f\u0003\u0010\u0003\u0010\u0005\u0010\u017a\n\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0005\u0011\u0180\n\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u0185\n\u0011\f\u0011",
    "\u000e\u0011\u0188\u000b\u0011\u0003\u0012\u0003\u0012\u0005\u0012\u018c",
    "\n\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0190\n\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0196\n\u0012\u0003",
    "\u0012\u0003\u0012\u0005\u0012\u019a\n\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0005\u0012\u01a0\n\u0012\u0003\u0012\u0003",
    "\u0012\u0005\u0012\u01a4\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0005\u0012\u01aa\n\u0012\u0003\u0012\u0003\u0012\u0005",
    "\u0012\u01ae\n\u0012\u0003\u0013\u0003\u0013\u0005\u0013\u01b2\n\u0013",
    "\u0003\u0013\u0003\u0013\u0005\u0013\u01b6\n\u0013\u0003\u0013\u0003",
    "\u0013\u0005\u0013\u01ba\n\u0013\u0003\u0013\u0003\u0013\u0005\u0013",
    "\u01be\n\u0013\u0003\u0013\u0007\u0013\u01c1\n\u0013\f\u0013\u000e\u0013",
    "\u01c4\u000b\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005",
    "\u0014\u01ca\n\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u01ce\n\u0014",
    "\u0003\u0014\u0007\u0014\u01d1\n\u0014\f\u0014\u000e\u0014\u01d4\u000b",
    "\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u01da",
    "\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016",
    "\u01e0\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u01e5",
    "\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017",
    "\u01eb\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005",
    "\u0017\u01f1\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018",
    "\u01f6\n\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u01fa\n\u0018\u0003",
    "\u0018\u0007\u0018\u01fd\n\u0018\f\u0018\u000e\u0018\u0200\u000b\u0018",
    "\u0005\u0018\u0202\n\u0018\u0003\u0018\u0005\u0018\u0205\n\u0018\u0003",
    "\u0018\u0005\u0018\u0208\n\u0018\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0005\u0019\u020f\n\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u001a\u0003\u001a\u0005\u001a\u0215\n\u001a\u0003\u001a",
    "\u0005\u001a\u0218\n\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005",
    "\u001a\u021d\n\u001a\u0003\u001a\u0005\u001a\u0220\n\u001a\u0003\u001b",
    "\u0003\u001b\u0005\u001b\u0224\n\u001b\u0003\u001b\u0005\u001b\u0227",
    "\n\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0005\u001c\u022f\n\u001c\u0003\u001c\u0003\u001c\u0005",
    "\u001c\u0233\n\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u0237\n\u001c",
    "\u0003\u001d\u0003\u001d\u0005\u001d\u023b\n\u001d\u0003\u001d\u0003",
    "\u001d\u0005\u001d\u023f\n\u001d\u0003\u001d\u0007\u001d\u0242\n\u001d",
    "\f\u001d\u000e\u001d\u0245\u000b\u001d\u0003\u001d\u0003\u001d\u0005",
    "\u001d\u0249\n\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u024d\n\u001d",
    "\u0003\u001d\u0007\u001d\u0250\n\u001d\f\u001d\u000e\u001d\u0253\u000b",
    "\u001d\u0005\u001d\u0255\n\u001d\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u025e\n",
    "\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0005\u001f\u0267\n\u001f\u0003\u001f\u0007\u001f",
    "\u026a\n\u001f\f\u001f\u000e\u001f\u026d\u000b\u001f\u0003 \u0003 \u0003",
    " \u0003 \u0003!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0005\"\u0279\n",
    "\"\u0003\"\u0005\"\u027c\n\"\u0003#\u0003#\u0003#\u0003#\u0003$\u0003",
    "$\u0005$\u0284\n$\u0003$\u0003$\u0005$\u0288\n$\u0003$\u0007$\u028b",
    "\n$\f$\u000e$\u028e\u000b$\u0003%\u0003%\u0005%\u0292\n%\u0003%\u0003",
    "%\u0005%\u0296\n%\u0003%\u0003%\u0003%\u0005%\u029b\n%\u0003&\u0003",
    "&\u0003\'\u0003\'\u0005\'\u02a1\n\'\u0003\'\u0007\'\u02a4\n\'\f\'\u000e",
    "\'\u02a7\u000b\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u02ad\n\'\u0003",
    "(\u0003(\u0005(\u02b1\n(\u0003(\u0003(\u0005(\u02b5\n(\u0005(\u02b7",
    "\n(\u0003(\u0003(\u0005(\u02bb\n(\u0005(\u02bd\n(\u0003(\u0003(\u0005",
    "(\u02c1\n(\u0005(\u02c3\n(\u0003(\u0003(\u0003)\u0003)\u0005)\u02c9",
    "\n)\u0003)\u0003)\u0003*\u0003*\u0005*\u02cf\n*\u0003*\u0003*\u0005",
    "*\u02d3\n*\u0003*\u0005*\u02d6\n*\u0003*\u0005*\u02d9\n*\u0003*\u0003",
    "*\u0005*\u02dd\n*\u0003*\u0003*\u0003*\u0003*\u0005*\u02e3\n*\u0003",
    "*\u0003*\u0005*\u02e7\n*\u0003*\u0005*\u02ea\n*\u0003*\u0005*\u02ed",
    "\n*\u0003*\u0003*\u0003*\u0003*\u0005*\u02f3\n*\u0003*\u0005*\u02f6",
    "\n*\u0003*\u0005*\u02f9\n*\u0003*\u0003*\u0005*\u02fd\n*\u0003*\u0003",
    "*\u0003*\u0003*\u0005*\u0303\n*\u0003*\u0005*\u0306\n*\u0003*\u0005",
    "*\u0309\n*\u0003*\u0003*\u0005*\u030d\n*\u0003+\u0003+\u0005+\u0311",
    "\n+\u0003+\u0003+\u0005+\u0315\n+\u0005+\u0317\n+\u0003+\u0003+\u0005",
    "+\u031b\n+\u0005+\u031d\n+\u0003+\u0005+\u0320\n+\u0003+\u0003+\u0005",
    "+\u0324\n+\u0005+\u0326\n+\u0003+\u0003+\u0003,\u0003,\u0005,\u032c",
    "\n,\u0003-\u0003-\u0005-\u0330\n-\u0003-\u0003-\u0005-\u0334\n-\u0003",
    "-\u0003-\u0005-\u0338\n-\u0003-\u0005-\u033b\n-\u0003-\u0007-\u033e",
    "\n-\f-\u000e-\u0341\u000b-\u0003.\u0003.\u0005.\u0345\n.\u0003.\u0007",
    ".\u0348\n.\f.\u000e.\u034b\u000b.\u0003/\u0003/\u0005/\u034f\n/\u0003",
    "/\u0003/\u00030\u00030\u00050\u0355\n0\u00030\u00030\u00050\u0359\n",
    "0\u00050\u035b\n0\u00030\u00030\u00050\u035f\n0\u00030\u00030\u0005",
    "0\u0363\n0\u00050\u0365\n0\u00050\u0367\n0\u00031\u00031\u00032\u0003",
    "2\u00033\u00033\u00034\u00034\u00034\u00034\u00034\u00074\u0374\n4\f",
    "4\u000e4\u0377\u000b4\u00035\u00035\u00035\u00035\u00035\u00075\u037e",
    "\n5\f5\u000e5\u0381\u000b5\u00036\u00036\u00036\u00036\u00036\u0007",
    "6\u0388\n6\f6\u000e6\u038b\u000b6\u00037\u00037\u00057\u038f\n7\u0007",
    "7\u0391\n7\f7\u000e7\u0394\u000b7\u00037\u00037\u00038\u00038\u0005",
    "8\u039a\n8\u00038\u00078\u039d\n8\f8\u000e8\u03a0\u000b8\u00039\u0003",
    "9\u00059\u03a4\n9\u00039\u00039\u00059\u03a8\n9\u00039\u00039\u0005",
    "9\u03ac\n9\u00039\u00039\u00059\u03b0\n9\u00039\u00079\u03b3\n9\f9\u000e",
    "9\u03b6\u000b9\u0003:\u0003:\u0005:\u03ba\n:\u0003:\u0003:\u0005:\u03be",
    "\n:\u0003:\u0003:\u0005:\u03c2\n:\u0003:\u0003:\u0005:\u03c6\n:\u0003",
    ":\u0003:\u0005:\u03ca\n:\u0003:\u0003:\u0005:\u03ce\n:\u0003:\u0007",
    ":\u03d1\n:\f:\u000e:\u03d4\u000b:\u0003;\u0003;\u0005;\u03d8\n;\u0003",
    ";\u0003;\u0005;\u03dc\n;\u0003;\u0007;\u03df\n;\f;\u000e;\u03e2\u000b",
    ";\u0003<\u0003<\u0005<\u03e6\n<\u0007<\u03e8\n<\f<\u000e<\u03eb\u000b",
    "<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0007=\u03f3\n=\f=\u000e",
    "=\u03f6\u000b=\u0003>\u0003>\u0003>\u0005>\u03fb\n>\u0003>\u0003>\u0005",
    ">\u03ff\n>\u0003>\u0003>\u0003>\u0003>\u0003>\u0005>\u0406\n>\u0003",
    ">\u0003>\u0005>\u040a\n>\u0003>\u0003>\u0005>\u040e\n>\u0003>\u0005",
    ">\u0411\n>\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0003?\u0005?\u041d\n?\u0003?\u0005?\u0420\n?\u0003?\u0003?\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005",
    "@\u042e\n@\u0003A\u0003A\u0005A\u0432\nA\u0003A\u0007A\u0435\nA\fA\u000e",
    "A\u0438\u000bA\u0003A\u0005A\u043b\nA\u0003A\u0005A\u043e\nA\u0003B",
    "\u0003B\u0003B\u0003B\u0003B\u0005B\u0445\nB\u0003B\u0003B\u0005B\u0449",
    "\nB\u0003B\u0003B\u0005B\u044d\nB\u0003B\u0003B\u0003B\u0003B\u0003",
    "B\u0005B\u0454\nB\u0003B\u0003B\u0005B\u0458\nB\u0003B\u0003B\u0005",
    "B\u045c\nB\u0003B\u0003B\u0003B\u0003B\u0005B\u0462\nB\u0003B\u0003",
    "B\u0005B\u0466\nB\u0003B\u0003B\u0005B\u046a\nB\u0003B\u0003B\u0003",
    "B\u0003B\u0005B\u0470\nB\u0003B\u0003B\u0005B\u0474\nB\u0003B\u0003",
    "B\u0005B\u0478\nB\u0003B\u0003B\u0003B\u0003B\u0005B\u047e\nB\u0003",
    "B\u0003B\u0005B\u0482\nB\u0003B\u0003B\u0005B\u0486\nB\u0003B\u0003",
    "B\u0003B\u0003B\u0003B\u0003B\u0005B\u048e\nB\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0005C\u0496\nC\u0003D\u0003D\u0003E\u0003E\u0005E\u049c",
    "\nE\u0003E\u0003E\u0005E\u04a0\nE\u0003E\u0003E\u0005E\u04a4\nE\u0003",
    "E\u0003E\u0005E\u04a8\nE\u0007E\u04aa\nE\fE\u000eE\u04ad\u000bE\u0005",
    "E\u04af\nE\u0003E\u0003E\u0003F\u0003F\u0005F\u04b5\nF\u0003F\u0003",
    "F\u0003F\u0005F\u04ba\nF\u0003F\u0003F\u0003F\u0005F\u04bf\nF\u0003",
    "F\u0003F\u0003F\u0005F\u04c4\nF\u0003F\u0003F\u0003F\u0005F\u04c9\n",
    "F\u0003F\u0003F\u0003F\u0005F\u04ce\nF\u0003F\u0005F\u04d1\nF\u0003",
    "G\u0003G\u0005G\u04d5\nG\u0003G\u0003G\u0005G\u04d9\nG\u0003G\u0003",
    "G\u0003H\u0003H\u0005H\u04df\nH\u0003H\u0006H\u04e2\nH\rH\u000eH\u04e3",
    "\u0003I\u0003I\u0005I\u04e8\nI\u0003I\u0005I\u04eb\nI\u0003J\u0003J",
    "\u0003J\u0003J\u0003J\u0003J\u0003K\u0003K\u0005K\u04f5\nK\u0003K\u0003",
    "K\u0005K\u04f9\nK\u0003K\u0003K\u0005K\u04fd\nK\u0005K\u04ff\nK\u0003",
    "K\u0003K\u0005K\u0503\nK\u0003K\u0003K\u0005K\u0507\nK\u0003K\u0003",
    "K\u0005K\u050b\nK\u0007K\u050d\nK\fK\u000eK\u0510\u000bK\u0005K\u0512",
    "\nK\u0003K\u0003K\u0003L\u0003L\u0003L\u0003L\u0005L\u051a\nL\u0003",
    "M\u0003M\u0005M\u051e\nM\u0003M\u0003M\u0005M\u0522\nM\u0003M\u0003",
    "M\u0005M\u0526\nM\u0003M\u0003M\u0005M\u052a\nM\u0003M\u0003M\u0005",
    "M\u052e\nM\u0007M\u0530\nM\fM\u000eM\u0533\u000bM\u0005M\u0535\nM\u0003",
    "M\u0003M\u0003N\u0003N\u0003O\u0003O\u0003P\u0003P\u0003P\u0003Q\u0003",
    "Q\u0003Q\u0007Q\u0543\nQ\fQ\u000eQ\u0546\u000bQ\u0003R\u0003R\u0005",
    "R\u054a\nR\u0003R\u0003R\u0005R\u054e\nR\u0003R\u0003R\u0005R\u0552",
    "\nR\u0003R\u0005R\u0555\nR\u0003R\u0005R\u0558\nR\u0003R\u0003R\u0003",
    "S\u0003S\u0005S\u055e\nS\u0003S\u0003S\u0005S\u0562\nS\u0003S\u0003",
    "S\u0005S\u0566\nS\u0005S\u0568\nS\u0003S\u0003S\u0005S\u056c\nS\u0003",
    "S\u0003S\u0005S\u0570\nS\u0003S\u0003S\u0005S\u0574\nS\u0005S\u0576",
    "\nS\u0003S\u0003S\u0005S\u057a\nS\u0003S\u0003S\u0005S\u057e\nS\u0003",
    "S\u0003S\u0003T\u0003T\u0005T\u0584\nT\u0003T\u0003T\u0003U\u0003U\u0005",
    "U\u058a\nU\u0003U\u0006U\u058d\nU\rU\u000eU\u058e\u0003U\u0003U\u0005",
    "U\u0593\nU\u0003U\u0003U\u0005U\u0597\nU\u0003U\u0006U\u059a\nU\rU\u000e",
    "U\u059b\u0005U\u059e\nU\u0003U\u0005U\u05a1\nU\u0003U\u0003U\u0005U",
    "\u05a5\nU\u0003U\u0005U\u05a8\nU\u0003U\u0005U\u05ab\nU\u0003U\u0003",
    "U\u0003V\u0003V\u0005V\u05b1\nV\u0003V\u0003V\u0005V\u05b5\nV\u0003",
    "V\u0003V\u0005V\u05b9\nV\u0003V\u0003V\u0003W\u0003W\u0003X\u0003X\u0005",
    "X\u05c1\nX\u0003Y\u0003Y\u0005Y\u05c5\nY\u0003Y\u0003Y\u0005Y\u05c9",
    "\nY\u0003Y\u0003Y\u0005Y\u05cd\nY\u0003Y\u0003Y\u0005Y\u05d1\nY\u0003",
    "Y\u0003Y\u0005Y\u05d5\nY\u0003Y\u0003Y\u0005Y\u05d9\nY\u0003Y\u0003",
    "Y\u0005Y\u05dd\nY\u0003Y\u0003Y\u0005Y\u05e1\nY\u0007Y\u05e3\nY\fY\u000e",
    "Y\u05e6\u000bY\u0005Y\u05e8\nY\u0003Y\u0003Y\u0003Z\u0003Z\u0003Z\u0005",
    "Z\u05ef\nZ\u0003[\u0003[\u0005[\u05f3\n[\u0003[\u0006[\u05f6\n[\r[\u000e",
    "[\u05f7\u0003\\\u0003\\\u0003]\u0003]\u0003^\u0003^\u0003_\u0003_\u0005",
    "_\u0602\n_\u0003`\u0003`\u0003a\u0003a\u0003b\u0003b\u0003c\u0003c\u0003",
    "d\u0003d\u0003d\u0002\u0002e\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ",
    "\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e",
    "\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6",
    "\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be",
    "\u00c0\u00c2\u00c4\u00c6\u0002\f\u0003\u0002FI\u0003\u0002\u000f\u0010",
    "\u0003\u0002YZ\u0003\u0002bd\u0003\u0002lm\u0006\u00020<?TY`nw\u0006",
    "\u0002UXeexz}}\u0004\u0002\u0015\u0015\u001d \u0004\u0002\u0016\u0016",
    "!$\u0004\u0002\u0010\u0010%/\u0002\u06e7\u0002\u00c9\u0003\u0002\u0002",
    "\u0002\u0004\u00d7\u0003\u0002\u0002\u0002\u0006\u00db\u0003\u0002\u0002",
    "\u0002\b\u00dd\u0003\u0002\u0002\u0002\n\u00f3\u0003\u0002\u0002\u0002",
    "\f\u00f7\u0003\u0002\u0002\u0002\u000e\u011c\u0003\u0002\u0002\u0002",
    "\u0010\u0134\u0003\u0002\u0002\u0002\u0012\u013f\u0003\u0002\u0002\u0002",
    "\u0014\u0144\u0003\u0002\u0002\u0002\u0016\u0148\u0003\u0002\u0002\u0002",
    "\u0018\u0155\u0003\u0002\u0002\u0002\u001a\u015f\u0003\u0002\u0002\u0002",
    "\u001c\u0175\u0003\u0002\u0002\u0002\u001e\u0177\u0003\u0002\u0002\u0002",
    " \u017d\u0003\u0002\u0002\u0002\"\u01ad\u0003\u0002\u0002\u0002$\u01b1",
    "\u0003\u0002\u0002\u0002&\u01c5\u0003\u0002\u0002\u0002(\u01d9\u0003",
    "\u0002\u0002\u0002*\u01db\u0003\u0002\u0002\u0002,\u01e6\u0003\u0002",
    "\u0002\u0002.\u0201\u0003\u0002\u0002\u00020\u020e\u0003\u0002\u0002",
    "\u00022\u0212\u0003\u0002\u0002\u00024\u0221\u0003\u0002\u0002\u0002",
    "6\u022b\u0003\u0002\u0002\u00028\u0254\u0003\u0002\u0002\u0002:\u025d",
    "\u0003\u0002\u0002\u0002<\u025f\u0003\u0002\u0002\u0002>\u026e\u0003",
    "\u0002\u0002\u0002@\u0272\u0003\u0002\u0002\u0002B\u0276\u0003\u0002",
    "\u0002\u0002D\u027d\u0003\u0002\u0002\u0002F\u0281\u0003\u0002\u0002",
    "\u0002H\u029a\u0003\u0002\u0002\u0002J\u029c\u0003\u0002\u0002\u0002",
    "L\u02ac\u0003\u0002\u0002\u0002N\u02ae\u0003\u0002\u0002\u0002P\u02c6",
    "\u0003\u0002\u0002\u0002R\u030c\u0003\u0002\u0002\u0002T\u030e\u0003",
    "\u0002\u0002\u0002V\u032b\u0003\u0002\u0002\u0002X\u032d\u0003\u0002",
    "\u0002\u0002Z\u0342\u0003\u0002\u0002\u0002\\\u034c\u0003\u0002\u0002",
    "\u0002^\u0352\u0003\u0002\u0002\u0002`\u0368\u0003\u0002\u0002\u0002",
    "b\u036a\u0003\u0002\u0002\u0002d\u036c\u0003\u0002\u0002\u0002f\u036e",
    "\u0003\u0002\u0002\u0002h\u0378\u0003\u0002\u0002\u0002j\u0382\u0003",
    "\u0002\u0002\u0002l\u0392\u0003\u0002\u0002\u0002n\u0397\u0003\u0002",
    "\u0002\u0002p\u03a1\u0003\u0002\u0002\u0002r\u03b7\u0003\u0002\u0002",
    "\u0002t\u03d5\u0003\u0002\u0002\u0002v\u03e9\u0003\u0002\u0002\u0002",
    "x\u03ee\u0003\u0002\u0002\u0002z\u0410\u0003\u0002\u0002\u0002|\u041c",
    "\u0003\u0002\u0002\u0002~\u042d\u0003\u0002\u0002\u0002\u0080\u042f",
    "\u0003\u0002\u0002\u0002\u0082\u048d\u0003\u0002\u0002\u0002\u0084\u0495",
    "\u0003\u0002\u0002\u0002\u0086\u0497\u0003\u0002\u0002\u0002\u0088\u0499",
    "\u0003\u0002\u0002\u0002\u008a\u04d0\u0003\u0002\u0002\u0002\u008c\u04d2",
    "\u0003\u0002\u0002\u0002\u008e\u04dc\u0003\u0002\u0002\u0002\u0090\u04e5",
    "\u0003\u0002\u0002\u0002\u0092\u04ec\u0003\u0002\u0002\u0002\u0094\u04f2",
    "\u0003\u0002\u0002\u0002\u0096\u0519\u0003\u0002\u0002\u0002\u0098\u051b",
    "\u0003\u0002\u0002\u0002\u009a\u0538\u0003\u0002\u0002\u0002\u009c\u053a",
    "\u0003\u0002\u0002\u0002\u009e\u053c\u0003\u0002\u0002\u0002\u00a0\u0544",
    "\u0003\u0002\u0002\u0002\u00a2\u0547\u0003\u0002\u0002\u0002\u00a4\u055b",
    "\u0003\u0002\u0002\u0002\u00a6\u0581\u0003\u0002\u0002\u0002\u00a8\u059d",
    "\u0003\u0002\u0002\u0002\u00aa\u05ae\u0003\u0002\u0002\u0002\u00ac\u05bc",
    "\u0003\u0002\u0002\u0002\u00ae\u05c0\u0003\u0002\u0002\u0002\u00b0\u05c2",
    "\u0003\u0002\u0002\u0002\u00b2\u05eb\u0003\u0002\u0002\u0002\u00b4\u05f0",
    "\u0003\u0002\u0002\u0002\u00b6\u05f9\u0003\u0002\u0002\u0002\u00b8\u05fb",
    "\u0003\u0002\u0002\u0002\u00ba\u05fd\u0003\u0002\u0002\u0002\u00bc\u0601",
    "\u0003\u0002\u0002\u0002\u00be\u0603\u0003\u0002\u0002\u0002\u00c0\u0605",
    "\u0003\u0002\u0002\u0002\u00c2\u0607\u0003\u0002\u0002\u0002\u00c4\u0609",
    "\u0003\u0002\u0002\u0002\u00c6\u060b\u0003\u0002\u0002\u0002\u00c8\u00ca",
    "\u0007~\u0002\u0002\u00c9\u00c8\u0003\u0002\u0002\u0002\u00c9\u00ca",
    "\u0003\u0002\u0002\u0002\u00ca\u00cb\u0003\u0002\u0002\u0002\u00cb\u00d0",
    "\u0005\u0004\u0003\u0002\u00cc\u00ce\u0007~\u0002\u0002\u00cd\u00cc",
    "\u0003\u0002\u0002\u0002\u00cd\u00ce\u0003\u0002\u0002\u0002\u00ce\u00cf",
    "\u0003\u0002\u0002\u0002\u00cf\u00d1\u0007\u0003\u0002\u0002\u00d0\u00cd",
    "\u0003\u0002\u0002\u0002\u00d0\u00d1\u0003\u0002\u0002\u0002\u00d1\u00d3",
    "\u0003\u0002\u0002\u0002\u00d2\u00d4\u0007~\u0002\u0002\u00d3\u00d2",
    "\u0003\u0002\u0002\u0002\u00d3\u00d4\u0003\u0002\u0002\u0002\u00d4\u00d5",
    "\u0003\u0002\u0002\u0002\u00d5\u00d6\u0007\u0002\u0002\u0003\u00d6\u0003",
    "\u0003\u0002\u0002\u0002\u00d7\u00d8\u0005\u0006\u0004\u0002\u00d8\u0005",
    "\u0003\u0002\u0002\u0002\u00d9\u00dc\u0005\b\u0005\u0002\u00da\u00dc",
    "\u0005,\u0017\u0002\u00db\u00d9\u0003\u0002\u0002\u0002\u00db\u00da",
    "\u0003\u0002\u0002\u0002\u00dc\u0007\u0003\u0002\u0002\u0002\u00dd\u00e4",
    "\u0005\f\u0007\u0002\u00de\u00e0\u0007~\u0002\u0002\u00df\u00de\u0003",
    "\u0002\u0002\u0002\u00df\u00e0\u0003\u0002\u0002\u0002\u00e0\u00e1\u0003",
    "\u0002\u0002\u0002\u00e1\u00e3\u0005\n\u0006\u0002\u00e2\u00df\u0003",
    "\u0002\u0002\u0002\u00e3\u00e6\u0003\u0002\u0002\u0002\u00e4\u00e2\u0003",
    "\u0002\u0002\u0002\u00e4\u00e5\u0003\u0002\u0002\u0002\u00e5\t\u0003",
    "\u0002\u0002\u0002\u00e6\u00e4\u0003\u0002\u0002\u0002\u00e7\u00e8\u0007",
    "0\u0002\u0002\u00e8\u00e9\u0007~\u0002\u0002\u00e9\u00eb\u00071\u0002",
    "\u0002\u00ea\u00ec\u0007~\u0002\u0002\u00eb\u00ea\u0003\u0002\u0002",
    "\u0002\u00eb\u00ec\u0003\u0002\u0002\u0002\u00ec\u00ed\u0003\u0002\u0002",
    "\u0002\u00ed\u00f4\u0005\f\u0007\u0002\u00ee\u00f0\u00070\u0002\u0002",
    "\u00ef\u00f1\u0007~\u0002\u0002\u00f0\u00ef\u0003\u0002\u0002\u0002",
    "\u00f0\u00f1\u0003\u0002\u0002\u0002\u00f1\u00f2\u0003\u0002\u0002\u0002",
    "\u00f2\u00f4\u0005\f\u0007\u0002\u00f3\u00e7\u0003\u0002\u0002\u0002",
    "\u00f3\u00ee\u0003\u0002\u0002\u0002\u00f4\u000b\u0003\u0002\u0002\u0002",
    "\u00f5\u00f8\u0005\u000e\b\u0002\u00f6\u00f8\u0005\u0010\t\u0002\u00f7",
    "\u00f5\u0003\u0002\u0002\u0002\u00f7\u00f6\u0003\u0002\u0002\u0002\u00f8",
    "\r\u0003\u0002\u0002\u0002\u00f9\u00fb\u0005\u0014\u000b\u0002\u00fa",
    "\u00fc\u0007~\u0002\u0002\u00fb\u00fa\u0003\u0002\u0002\u0002\u00fb",
    "\u00fc\u0003\u0002\u0002\u0002\u00fc\u00fe\u0003\u0002\u0002\u0002\u00fd",
    "\u00f9\u0003\u0002\u0002\u0002\u00fe\u0101\u0003\u0002\u0002\u0002\u00ff",
    "\u00fd\u0003\u0002\u0002\u0002\u00ff\u0100\u0003\u0002\u0002\u0002\u0100",
    "\u0102\u0003\u0002\u0002\u0002\u0101\u00ff\u0003\u0002\u0002\u0002\u0102",
    "\u011d\u00054\u001b\u0002\u0103\u0105\u0005\u0014\u000b\u0002\u0104",
    "\u0106\u0007~\u0002\u0002\u0105\u0104\u0003\u0002\u0002\u0002\u0105",
    "\u0106\u0003\u0002\u0002\u0002\u0106\u0108\u0003\u0002\u0002\u0002\u0107",
    "\u0103\u0003\u0002\u0002\u0002\u0108\u010b\u0003\u0002\u0002\u0002\u0109",
    "\u0107\u0003\u0002\u0002\u0002\u0109\u010a\u0003\u0002\u0002\u0002\u010a",
    "\u010c\u0003\u0002\u0002\u0002\u010b\u0109\u0003\u0002\u0002\u0002\u010c",
    "\u0113\u0005\u0012\n\u0002\u010d\u010f\u0007~\u0002\u0002\u010e\u010d",
    "\u0003\u0002\u0002\u0002\u010e\u010f\u0003\u0002\u0002\u0002\u010f\u0110",
    "\u0003\u0002\u0002\u0002\u0110\u0112\u0005\u0012\n\u0002\u0111\u010e",
    "\u0003\u0002\u0002\u0002\u0112\u0115\u0003\u0002\u0002\u0002\u0113\u0111",
    "\u0003\u0002\u0002\u0002\u0113\u0114\u0003\u0002\u0002\u0002\u0114\u011a",
    "\u0003\u0002\u0002\u0002\u0115\u0113\u0003\u0002\u0002\u0002\u0116\u0118",
    "\u0007~\u0002\u0002\u0117\u0116\u0003\u0002\u0002\u0002\u0117\u0118",
    "\u0003\u0002\u0002\u0002\u0118\u0119\u0003\u0002\u0002\u0002\u0119\u011b",
    "\u00054\u001b\u0002\u011a\u0117\u0003\u0002\u0002\u0002\u011a\u011b",
    "\u0003\u0002\u0002\u0002\u011b\u011d\u0003\u0002\u0002\u0002\u011c\u00ff",
    "\u0003\u0002\u0002\u0002\u011c\u0109\u0003\u0002\u0002\u0002\u011d\u000f",
    "\u0003\u0002\u0002\u0002\u011e\u0120\u0005\u0014\u000b\u0002\u011f\u0121",
    "\u0007~\u0002\u0002\u0120\u011f\u0003\u0002\u0002\u0002\u0120\u0121",
    "\u0003\u0002\u0002\u0002\u0121\u0123\u0003\u0002\u0002\u0002\u0122\u011e",
    "\u0003\u0002\u0002\u0002\u0123\u0126\u0003\u0002\u0002\u0002\u0124\u0122",
    "\u0003\u0002\u0002\u0002\u0124\u0125\u0003\u0002\u0002\u0002\u0125\u012d",
    "\u0003\u0002\u0002\u0002\u0126\u0124\u0003\u0002\u0002\u0002\u0127\u0129",
    "\u0005\u0012\n\u0002\u0128\u012a\u0007~\u0002\u0002\u0129\u0128\u0003",
    "\u0002\u0002\u0002\u0129\u012a\u0003\u0002\u0002\u0002\u012a\u012c\u0003",
    "\u0002\u0002\u0002\u012b\u0127\u0003\u0002\u0002\u0002\u012c\u012f\u0003",
    "\u0002\u0002\u0002\u012d\u012b\u0003\u0002\u0002\u0002\u012d\u012e\u0003",
    "\u0002\u0002\u0002\u012e\u0130\u0003\u0002\u0002\u0002\u012f\u012d\u0003",
    "\u0002\u0002\u0002\u0130\u0132\u00052\u001a\u0002\u0131\u0133\u0007",
    "~\u0002\u0002\u0132\u0131\u0003\u0002\u0002\u0002\u0132\u0133\u0003",
    "\u0002\u0002\u0002\u0133\u0135\u0003\u0002\u0002\u0002\u0134\u0124\u0003",
    "\u0002\u0002\u0002\u0135\u0136\u0003\u0002\u0002\u0002\u0136\u0134\u0003",
    "\u0002\u0002\u0002\u0136\u0137\u0003\u0002\u0002\u0002\u0137\u0138\u0003",
    "\u0002\u0002\u0002\u0138\u0139\u0005\u000e\b\u0002\u0139\u0011\u0003",
    "\u0002\u0002\u0002\u013a\u0140\u0005\u001e\u0010\u0002\u013b\u0140\u0005",
    "\u001a\u000e\u0002\u013c\u0140\u0005$\u0013\u0002\u013d\u0140\u0005",
    " \u0011\u0002\u013e\u0140\u0005&\u0014\u0002\u013f\u013a\u0003\u0002",
    "\u0002\u0002\u013f\u013b\u0003\u0002\u0002\u0002\u013f\u013c\u0003\u0002",
    "\u0002\u0002\u013f\u013d\u0003\u0002\u0002\u0002\u013f\u013e\u0003\u0002",
    "\u0002\u0002\u0140\u0013\u0003\u0002\u0002\u0002\u0141\u0145\u0005\u0016",
    "\f\u0002\u0142\u0145\u0005\u0018\r\u0002\u0143\u0145\u0005*\u0016\u0002",
    "\u0144\u0141\u0003\u0002\u0002\u0002\u0144\u0142\u0003\u0002\u0002\u0002",
    "\u0144\u0143\u0003\u0002\u0002\u0002\u0145\u0015\u0003\u0002\u0002\u0002",
    "\u0146\u0147\u00072\u0002\u0002\u0147\u0149\u0007~\u0002\u0002\u0148",
    "\u0146\u0003\u0002\u0002\u0002\u0148\u0149\u0003\u0002\u0002\u0002\u0149",
    "\u014a\u0003\u0002\u0002\u0002\u014a\u014c\u00073\u0002\u0002\u014b",
    "\u014d\u0007~\u0002\u0002\u014c\u014b\u0003\u0002\u0002\u0002\u014c",
    "\u014d\u0003\u0002\u0002\u0002\u014d\u014e\u0003\u0002\u0002\u0002\u014e",
    "\u0153\u0005F$\u0002\u014f\u0151\u0007~\u0002\u0002\u0150\u014f\u0003",
    "\u0002\u0002\u0002\u0150\u0151\u0003\u0002\u0002\u0002\u0151\u0152\u0003",
    "\u0002\u0002\u0002\u0152\u0154\u0005D#\u0002\u0153\u0150\u0003\u0002",
    "\u0002\u0002\u0153\u0154\u0003\u0002\u0002\u0002\u0154\u0017\u0003\u0002",
    "\u0002\u0002\u0155\u0157\u00074\u0002\u0002\u0156\u0158\u0007~\u0002",
    "\u0002\u0157\u0156\u0003\u0002\u0002\u0002\u0157\u0158\u0003\u0002\u0002",
    "\u0002\u0158\u0159\u0003\u0002\u0002\u0002\u0159\u015a\u0005d3\u0002",
    "\u015a\u015b\u0007~\u0002\u0002\u015b\u015c\u00075\u0002\u0002\u015c",
    "\u015d\u0007~\u0002\u0002\u015d\u015e\u0005\u00acW\u0002\u015e\u0019",
    "\u0003\u0002\u0002\u0002\u015f\u0161\u00076\u0002\u0002\u0160\u0162",
    "\u0007~\u0002\u0002\u0161\u0160\u0003\u0002\u0002\u0002\u0161\u0162",
    "\u0003\u0002\u0002\u0002\u0162\u0163\u0003\u0002\u0002\u0002\u0163\u0168",
    "\u0005H%\u0002\u0164\u0165\u0007~\u0002\u0002\u0165\u0167\u0005\u001c",
    "\u000f\u0002\u0166\u0164\u0003\u0002\u0002\u0002\u0167\u016a\u0003\u0002",
    "\u0002\u0002\u0168\u0166\u0003\u0002\u0002\u0002\u0168\u0169\u0003\u0002",
    "\u0002\u0002\u0169\u001b\u0003\u0002\u0002\u0002\u016a\u0168\u0003\u0002",
    "\u0002\u0002\u016b\u016c\u00077\u0002\u0002\u016c\u016d\u0007~\u0002",
    "\u0002\u016d\u016e\u00073\u0002\u0002\u016e\u016f\u0007~\u0002\u0002",
    "\u016f\u0176\u0005 \u0011\u0002\u0170\u0171\u00077\u0002\u0002\u0171",
    "\u0172\u0007~\u0002\u0002\u0172\u0173\u00078\u0002\u0002\u0173\u0174",
    "\u0007~\u0002\u0002\u0174\u0176\u0005 \u0011\u0002\u0175\u016b\u0003",
    "\u0002\u0002\u0002\u0175\u0170\u0003\u0002\u0002\u0002\u0176\u001d\u0003",
    "\u0002\u0002\u0002\u0177\u0179\u00078\u0002\u0002\u0178\u017a\u0007",
    "~\u0002\u0002\u0179\u0178\u0003\u0002\u0002\u0002\u0179\u017a\u0003",
    "\u0002\u0002\u0002\u017a\u017b\u0003\u0002\u0002\u0002\u017b\u017c\u0005",
    "F$\u0002\u017c\u001f\u0003\u0002\u0002\u0002\u017d\u017f\u00079\u0002",
    "\u0002\u017e\u0180\u0007~\u0002\u0002\u017f\u017e\u0003\u0002\u0002",
    "\u0002\u017f\u0180\u0003\u0002\u0002\u0002\u0180\u0181\u0003\u0002\u0002",
    "\u0002\u0181\u0186\u0005\"\u0012\u0002\u0182\u0183\u0007\u0004\u0002",
    "\u0002\u0183\u0185\u0005\"\u0012\u0002\u0184\u0182\u0003\u0002\u0002",
    "\u0002\u0185\u0188\u0003\u0002\u0002\u0002\u0186\u0184\u0003\u0002\u0002",
    "\u0002\u0186\u0187\u0003\u0002\u0002\u0002\u0187!\u0003\u0002\u0002",
    "\u0002\u0188\u0186\u0003\u0002\u0002\u0002\u0189\u018b\u0005\u00b4[",
    "\u0002\u018a\u018c\u0007~\u0002\u0002\u018b\u018a\u0003\u0002\u0002",
    "\u0002\u018b\u018c\u0003\u0002\u0002\u0002\u018c\u018d\u0003\u0002\u0002",
    "\u0002\u018d\u018f\u0007\u0005\u0002\u0002\u018e\u0190\u0007~\u0002",
    "\u0002\u018f\u018e\u0003\u0002\u0002\u0002\u018f\u0190\u0003\u0002\u0002",
    "\u0002\u0190\u0191\u0003\u0002\u0002\u0002\u0191\u0192\u0005d3\u0002",
    "\u0192\u01ae\u0003\u0002\u0002\u0002\u0193\u0195\u0005\u00acW\u0002",
    "\u0194\u0196\u0007~\u0002\u0002\u0195\u0194\u0003\u0002\u0002\u0002",
    "\u0195\u0196\u0003\u0002\u0002\u0002\u0196\u0197\u0003\u0002\u0002\u0002",
    "\u0197\u0199\u0007\u0005\u0002\u0002\u0198\u019a\u0007~\u0002\u0002",
    "\u0199\u0198\u0003\u0002\u0002\u0002\u0199\u019a\u0003\u0002\u0002\u0002",
    "\u019a\u019b\u0003\u0002\u0002\u0002\u019b\u019c\u0005d3\u0002\u019c",
    "\u01ae\u0003\u0002\u0002\u0002\u019d\u019f\u0005\u00acW\u0002\u019e",
    "\u01a0\u0007~\u0002\u0002\u019f\u019e\u0003\u0002\u0002\u0002\u019f",
    "\u01a0\u0003\u0002\u0002\u0002\u01a0\u01a1\u0003\u0002\u0002\u0002\u01a1",
    "\u01a3\u0007\u0006\u0002\u0002\u01a2\u01a4\u0007~\u0002\u0002\u01a3",
    "\u01a2\u0003\u0002\u0002\u0002\u01a3\u01a4\u0003\u0002\u0002\u0002\u01a4",
    "\u01a5\u0003\u0002\u0002\u0002\u01a5\u01a6\u0005d3\u0002\u01a6\u01ae",
    "\u0003\u0002\u0002\u0002\u01a7\u01a9\u0005\u00acW\u0002\u01a8\u01aa",
    "\u0007~\u0002\u0002\u01a9\u01a8\u0003\u0002\u0002\u0002\u01a9\u01aa",
    "\u0003\u0002\u0002\u0002\u01aa\u01ab\u0003\u0002\u0002\u0002\u01ab\u01ac",
    "\u0005Z.\u0002\u01ac\u01ae\u0003\u0002\u0002\u0002\u01ad\u0189\u0003",
    "\u0002\u0002\u0002\u01ad\u0193\u0003\u0002\u0002\u0002\u01ad\u019d\u0003",
    "\u0002\u0002\u0002\u01ad\u01a7\u0003\u0002\u0002\u0002\u01ae#\u0003",
    "\u0002\u0002\u0002\u01af\u01b0\u0007:\u0002\u0002\u01b0\u01b2\u0007",
    "~\u0002\u0002\u01b1\u01af\u0003\u0002\u0002\u0002\u01b1\u01b2\u0003",
    "\u0002\u0002\u0002\u01b2\u01b3\u0003\u0002\u0002\u0002\u01b3\u01b5\u0007",
    ";\u0002\u0002\u01b4\u01b6\u0007~\u0002\u0002\u01b5\u01b4\u0003\u0002",
    "\u0002\u0002\u01b5\u01b6\u0003\u0002\u0002\u0002\u01b6\u01b7\u0003\u0002",
    "\u0002\u0002\u01b7\u01c2\u0005d3\u0002\u01b8\u01ba\u0007~\u0002\u0002",
    "\u01b9\u01b8\u0003\u0002\u0002\u0002\u01b9\u01ba\u0003\u0002\u0002\u0002",
    "\u01ba\u01bb\u0003\u0002\u0002\u0002\u01bb\u01bd\u0007\u0004\u0002\u0002",
    "\u01bc\u01be\u0007~\u0002\u0002\u01bd\u01bc\u0003\u0002\u0002\u0002",
    "\u01bd\u01be\u0003\u0002\u0002\u0002\u01be\u01bf\u0003\u0002\u0002\u0002",
    "\u01bf\u01c1\u0005d3\u0002\u01c0\u01b9\u0003\u0002\u0002\u0002\u01c1",
    "\u01c4\u0003\u0002\u0002\u0002\u01c2\u01c0\u0003\u0002\u0002\u0002\u01c2",
    "\u01c3\u0003\u0002\u0002\u0002\u01c3%\u0003\u0002\u0002\u0002\u01c4",
    "\u01c2\u0003\u0002\u0002\u0002\u01c5\u01c6\u0007<\u0002\u0002\u01c6",
    "\u01c7\u0007~\u0002\u0002\u01c7\u01d2\u0005(\u0015\u0002\u01c8\u01ca",
    "\u0007~\u0002\u0002\u01c9\u01c8\u0003\u0002\u0002\u0002\u01c9\u01ca",
    "\u0003\u0002\u0002\u0002\u01ca\u01cb\u0003\u0002\u0002\u0002\u01cb\u01cd",
    "\u0007\u0004\u0002\u0002\u01cc\u01ce\u0007~\u0002\u0002\u01cd\u01cc",
    "\u0003\u0002\u0002\u0002\u01cd\u01ce\u0003\u0002\u0002\u0002\u01ce\u01cf",
    "\u0003\u0002\u0002\u0002\u01cf\u01d1\u0005(\u0015\u0002\u01d0\u01c9",
    "\u0003\u0002\u0002\u0002\u01d1\u01d4\u0003\u0002\u0002\u0002\u01d2\u01d0",
    "\u0003\u0002\u0002\u0002\u01d2\u01d3\u0003\u0002\u0002\u0002\u01d3\'",
    "\u0003\u0002\u0002\u0002\u01d4\u01d2\u0003\u0002\u0002\u0002\u01d5\u01d6",
    "\u0005\u00acW\u0002\u01d6\u01d7\u0005Z.\u0002\u01d7\u01da\u0003\u0002",
    "\u0002\u0002\u01d8\u01da\u0005\u00b4[\u0002\u01d9\u01d5\u0003\u0002",
    "\u0002\u0002\u01d9\u01d8\u0003\u0002\u0002\u0002\u01da)\u0003\u0002",
    "\u0002\u0002\u01db\u01dc\u0007=\u0002\u0002\u01dc\u01dd\u0007~\u0002",
    "\u0002\u01dd\u01e4\u0005\u0098M\u0002\u01de\u01e0\u0007~\u0002\u0002",
    "\u01df\u01de\u0003\u0002\u0002\u0002\u01df\u01e0\u0003\u0002\u0002\u0002",
    "\u01e0\u01e1\u0003\u0002\u0002\u0002\u01e1\u01e2\u0007>\u0002\u0002",
    "\u01e2\u01e3\u0007~\u0002\u0002\u01e3\u01e5\u0005.\u0018\u0002\u01e4",
    "\u01df\u0003\u0002\u0002\u0002\u01e4\u01e5\u0003\u0002\u0002\u0002\u01e5",
    "+\u0003\u0002\u0002\u0002\u01e6\u01e7\u0007=\u0002\u0002\u01e7\u01ea",
    "\u0007~\u0002\u0002\u01e8\u01eb\u0005\u0098M\u0002\u01e9\u01eb\u0005",
    "\u009aN\u0002\u01ea\u01e8\u0003\u0002\u0002\u0002\u01ea\u01e9\u0003",
    "\u0002\u0002\u0002\u01eb\u01f0\u0003\u0002\u0002\u0002\u01ec\u01ed\u0007",
    "~\u0002\u0002\u01ed\u01ee\u0007>\u0002\u0002\u01ee\u01ef\u0007~\u0002",
    "\u0002\u01ef\u01f1\u0005.\u0018\u0002\u01f0\u01ec\u0003\u0002\u0002",
    "\u0002\u01f0\u01f1\u0003\u0002\u0002\u0002\u01f1-\u0003\u0002\u0002",
    "\u0002\u01f2\u0202\u0007\u0007\u0002\u0002\u01f3\u01fe\u00050\u0019",
    "\u0002\u01f4\u01f6\u0007~\u0002\u0002\u01f5\u01f4\u0003\u0002\u0002",
    "\u0002\u01f5\u01f6\u0003\u0002\u0002\u0002\u01f6\u01f7\u0003\u0002\u0002",
    "\u0002\u01f7\u01f9\u0007\u0004\u0002\u0002\u01f8\u01fa\u0007~\u0002",
    "\u0002\u01f9\u01f8\u0003\u0002\u0002\u0002\u01f9\u01fa\u0003\u0002\u0002",
    "\u0002\u01fa\u01fb\u0003\u0002\u0002\u0002\u01fb\u01fd\u00050\u0019",
    "\u0002\u01fc\u01f5\u0003\u0002\u0002\u0002\u01fd\u0200\u0003\u0002\u0002",
    "\u0002\u01fe\u01fc\u0003\u0002\u0002\u0002\u01fe\u01ff\u0003\u0002\u0002",
    "\u0002\u01ff\u0202\u0003\u0002\u0002\u0002\u0200\u01fe\u0003\u0002\u0002",
    "\u0002\u0201\u01f2\u0003\u0002\u0002\u0002\u0201\u01f3\u0003\u0002\u0002",
    "\u0002\u0202\u0207\u0003\u0002\u0002\u0002\u0203\u0205\u0007~\u0002",
    "\u0002\u0204\u0203\u0003\u0002\u0002\u0002\u0204\u0205\u0003\u0002\u0002",
    "\u0002\u0205\u0206\u0003\u0002\u0002\u0002\u0206\u0208\u0005D#\u0002",
    "\u0207\u0204\u0003\u0002\u0002\u0002\u0207\u0208\u0003\u0002\u0002\u0002",
    "\u0208/\u0003\u0002\u0002\u0002\u0209\u020a\u0005\u009cO\u0002\u020a",
    "\u020b\u0007~\u0002\u0002\u020b\u020c\u00075\u0002\u0002\u020c\u020d",
    "\u0007~\u0002\u0002\u020d\u020f\u0003\u0002\u0002\u0002\u020e\u0209",
    "\u0003\u0002\u0002\u0002\u020e\u020f\u0003\u0002\u0002\u0002\u020f\u0210",
    "\u0003\u0002\u0002\u0002\u0210\u0211\u0005\u00acW\u0002\u02111\u0003",
    "\u0002\u0002\u0002\u0212\u0217\u0007?\u0002\u0002\u0213\u0215\u0007",
    "~\u0002\u0002\u0214\u0213\u0003\u0002\u0002\u0002\u0214\u0215\u0003",
    "\u0002\u0002\u0002\u0215\u0216\u0003\u0002\u0002\u0002\u0216\u0218\u0007",
    "@\u0002\u0002\u0217\u0214\u0003\u0002\u0002\u0002\u0217\u0218\u0003",
    "\u0002\u0002\u0002\u0218\u0219\u0003\u0002\u0002\u0002\u0219\u021a\u0007",
    "~\u0002\u0002\u021a\u021f\u00056\u001c\u0002\u021b\u021d\u0007~\u0002",
    "\u0002\u021c\u021b\u0003\u0002\u0002\u0002\u021c\u021d\u0003\u0002\u0002",
    "\u0002\u021d\u021e\u0003\u0002\u0002\u0002\u021e\u0220\u0005D#\u0002",
    "\u021f\u021c\u0003\u0002\u0002\u0002\u021f\u0220\u0003\u0002\u0002\u0002",
    "\u02203\u0003\u0002\u0002\u0002\u0221\u0226\u0007A\u0002\u0002\u0222",
    "\u0224\u0007~\u0002\u0002\u0223\u0222\u0003\u0002\u0002\u0002\u0223",
    "\u0224\u0003\u0002\u0002\u0002\u0224\u0225\u0003\u0002\u0002\u0002\u0225",
    "\u0227\u0007@\u0002\u0002\u0226\u0223\u0003\u0002\u0002\u0002\u0226",
    "\u0227\u0003\u0002\u0002\u0002\u0227\u0228\u0003\u0002\u0002\u0002\u0228",
    "\u0229\u0007~\u0002\u0002\u0229\u022a\u00056\u001c\u0002\u022a5\u0003",
    "\u0002\u0002\u0002\u022b\u022e\u00058\u001d\u0002\u022c\u022d\u0007",
    "~\u0002\u0002\u022d\u022f\u0005<\u001f\u0002\u022e\u022c\u0003\u0002",
    "\u0002\u0002\u022e\u022f\u0003\u0002\u0002\u0002\u022f\u0232\u0003\u0002",
    "\u0002\u0002\u0230\u0231\u0007~\u0002\u0002\u0231\u0233\u0005> \u0002",
    "\u0232\u0230\u0003\u0002\u0002\u0002\u0232\u0233\u0003\u0002\u0002\u0002",
    "\u0233\u0236\u0003\u0002\u0002\u0002\u0234\u0235\u0007~\u0002\u0002",
    "\u0235\u0237\u0005@!\u0002\u0236\u0234\u0003\u0002\u0002\u0002\u0236",
    "\u0237\u0003\u0002\u0002\u0002\u02377\u0003\u0002\u0002\u0002\u0238",
    "\u0243\u0007\u0007\u0002\u0002\u0239\u023b\u0007~\u0002\u0002\u023a",
    "\u0239\u0003\u0002\u0002\u0002\u023a\u023b\u0003\u0002\u0002\u0002\u023b",
    "\u023c\u0003\u0002\u0002\u0002\u023c\u023e\u0007\u0004\u0002\u0002\u023d",
    "\u023f\u0007~\u0002\u0002\u023e\u023d\u0003\u0002\u0002\u0002\u023e",
    "\u023f\u0003\u0002\u0002\u0002\u023f\u0240\u0003\u0002\u0002\u0002\u0240",
    "\u0242\u0005:\u001e\u0002\u0241\u023a\u0003\u0002\u0002\u0002\u0242",
    "\u0245\u0003\u0002\u0002\u0002\u0243\u0241\u0003\u0002\u0002\u0002\u0243",
    "\u0244\u0003\u0002\u0002\u0002\u0244\u0255\u0003\u0002\u0002\u0002\u0245",
    "\u0243\u0003\u0002\u0002\u0002\u0246\u0251\u0005:\u001e\u0002\u0247",
    "\u0249\u0007~\u0002\u0002\u0248\u0247\u0003\u0002\u0002\u0002\u0248",
    "\u0249\u0003\u0002\u0002\u0002\u0249\u024a\u0003\u0002\u0002\u0002\u024a",
    "\u024c\u0007\u0004\u0002\u0002\u024b\u024d\u0007~\u0002\u0002\u024c",
    "\u024b\u0003\u0002\u0002\u0002\u024c\u024d\u0003\u0002\u0002\u0002\u024d",
    "\u024e\u0003\u0002\u0002\u0002\u024e\u0250\u0005:\u001e\u0002\u024f",
    "\u0248\u0003\u0002\u0002\u0002\u0250\u0253\u0003\u0002\u0002\u0002\u0251",
    "\u024f\u0003\u0002\u0002\u0002\u0251\u0252\u0003\u0002\u0002\u0002\u0252",
    "\u0255\u0003\u0002\u0002\u0002\u0253\u0251\u0003\u0002\u0002\u0002\u0254",
    "\u0238\u0003\u0002\u0002\u0002\u0254\u0246\u0003\u0002\u0002\u0002\u0255",
    "9\u0003\u0002\u0002\u0002\u0256\u0257\u0005d3\u0002\u0257\u0258\u0007",
    "~\u0002\u0002\u0258\u0259\u00075\u0002\u0002\u0259\u025a\u0007~\u0002",
    "\u0002\u025a\u025b\u0005\u00acW\u0002\u025b\u025e\u0003\u0002\u0002",
    "\u0002\u025c\u025e\u0005d3\u0002\u025d\u0256\u0003\u0002\u0002\u0002",
    "\u025d\u025c\u0003\u0002\u0002\u0002\u025e;\u0003\u0002\u0002\u0002",
    "\u025f\u0260\u0007B\u0002\u0002\u0260\u0261\u0007~\u0002\u0002\u0261",
    "\u0262\u0007C\u0002\u0002\u0262\u0263\u0007~\u0002\u0002\u0263\u026b",
    "\u0005B\"\u0002\u0264\u0266\u0007\u0004\u0002\u0002\u0265\u0267\u0007",
    "~\u0002\u0002\u0266\u0265\u0003\u0002\u0002\u0002\u0266\u0267\u0003",
    "\u0002\u0002\u0002\u0267\u0268\u0003\u0002\u0002\u0002\u0268\u026a\u0005",
    "B\"\u0002\u0269\u0264\u0003\u0002\u0002\u0002\u026a\u026d\u0003\u0002",
    "\u0002\u0002\u026b\u0269\u0003\u0002\u0002\u0002\u026b\u026c\u0003\u0002",
    "\u0002\u0002\u026c=\u0003\u0002\u0002\u0002\u026d\u026b\u0003\u0002",
    "\u0002\u0002\u026e\u026f\u0007D\u0002\u0002\u026f\u0270\u0007~\u0002",
    "\u0002\u0270\u0271\u0005d3\u0002\u0271?\u0003\u0002\u0002\u0002\u0272",
    "\u0273\u0007E\u0002\u0002\u0273\u0274\u0007~\u0002\u0002\u0274\u0275",
    "\u0005d3\u0002\u0275A\u0003\u0002\u0002\u0002\u0276\u027b\u0005d3\u0002",
    "\u0277\u0279\u0007~\u0002\u0002\u0278\u0277\u0003\u0002\u0002\u0002",
    "\u0278\u0279\u0003\u0002\u0002\u0002\u0279\u027a\u0003\u0002\u0002\u0002",
    "\u027a\u027c\t\u0002\u0002\u0002\u027b\u0278\u0003\u0002\u0002\u0002",
    "\u027b\u027c\u0003\u0002\u0002\u0002\u027cC\u0003\u0002\u0002\u0002",
    "\u027d\u027e\u0007J\u0002\u0002\u027e\u027f\u0007~\u0002\u0002\u027f",
    "\u0280\u0005d3\u0002\u0280E\u0003\u0002\u0002\u0002\u0281\u028c\u0005",
    "H%\u0002\u0282\u0284\u0007~\u0002\u0002\u0283\u0282\u0003\u0002\u0002",
    "\u0002\u0283\u0284\u0003\u0002\u0002\u0002\u0284\u0285\u0003\u0002\u0002",
    "\u0002\u0285\u0287\u0007\u0004\u0002\u0002\u0286\u0288\u0007~\u0002",
    "\u0002\u0287\u0286\u0003\u0002\u0002\u0002\u0287\u0288\u0003\u0002\u0002",
    "\u0002\u0288\u0289\u0003\u0002\u0002\u0002\u0289\u028b\u0005H%\u0002",
    "\u028a\u0283\u0003\u0002\u0002\u0002\u028b\u028e\u0003\u0002\u0002\u0002",
    "\u028c\u028a\u0003\u0002\u0002\u0002\u028c\u028d\u0003\u0002\u0002\u0002",
    "\u028dG\u0003\u0002\u0002\u0002\u028e\u028c\u0003\u0002\u0002\u0002",
    "\u028f\u0291\u0005\u00acW\u0002\u0290\u0292\u0007~\u0002\u0002\u0291",
    "\u0290\u0003\u0002\u0002\u0002\u0291\u0292\u0003\u0002\u0002\u0002\u0292",
    "\u0293\u0003\u0002\u0002\u0002\u0293\u0295\u0007\u0005\u0002\u0002\u0294",
    "\u0296\u0007~\u0002\u0002\u0295\u0294\u0003\u0002\u0002\u0002\u0295",
    "\u0296\u0003\u0002\u0002\u0002\u0296\u0297\u0003\u0002\u0002\u0002\u0297",
    "\u0298\u0005J&\u0002\u0298\u029b\u0003\u0002\u0002\u0002\u0299\u029b",
    "\u0005J&\u0002\u029a\u028f\u0003\u0002\u0002\u0002\u029a\u0299\u0003",
    "\u0002\u0002\u0002\u029bI\u0003\u0002\u0002\u0002\u029c\u029d\u0005",
    "L\'\u0002\u029dK\u0003\u0002\u0002\u0002\u029e\u02a5\u0005N(\u0002\u029f",
    "\u02a1\u0007~\u0002\u0002\u02a0\u029f\u0003\u0002\u0002\u0002\u02a0",
    "\u02a1\u0003\u0002\u0002\u0002\u02a1\u02a2\u0003\u0002\u0002\u0002\u02a2",
    "\u02a4\u0005P)\u0002\u02a3\u02a0\u0003\u0002\u0002\u0002\u02a4\u02a7",
    "\u0003\u0002\u0002\u0002\u02a5\u02a3\u0003\u0002\u0002\u0002\u02a5\u02a6",
    "\u0003\u0002\u0002\u0002\u02a6\u02ad\u0003\u0002\u0002\u0002\u02a7\u02a5",
    "\u0003\u0002\u0002\u0002\u02a8\u02a9\u0007\b\u0002\u0002\u02a9\u02aa",
    "\u0005L\'\u0002\u02aa\u02ab\u0007\t\u0002\u0002\u02ab\u02ad\u0003\u0002",
    "\u0002\u0002\u02ac\u029e\u0003\u0002\u0002\u0002\u02ac\u02a8\u0003\u0002",
    "\u0002\u0002\u02adM\u0003\u0002\u0002\u0002\u02ae\u02b0\u0007\b\u0002",
    "\u0002\u02af\u02b1\u0007~\u0002\u0002\u02b0\u02af\u0003\u0002\u0002",
    "\u0002\u02b0\u02b1\u0003\u0002\u0002\u0002\u02b1\u02b6\u0003\u0002\u0002",
    "\u0002\u02b2\u02b4\u0005\u00acW\u0002\u02b3\u02b5\u0007~\u0002\u0002",
    "\u02b4\u02b3\u0003\u0002\u0002\u0002\u02b4\u02b5\u0003\u0002\u0002\u0002",
    "\u02b5\u02b7\u0003\u0002\u0002\u0002\u02b6\u02b2\u0003\u0002\u0002\u0002",
    "\u02b6\u02b7\u0003\u0002\u0002\u0002\u02b7\u02bc\u0003\u0002\u0002\u0002",
    "\u02b8\u02ba\u0005Z.\u0002\u02b9\u02bb\u0007~\u0002\u0002\u02ba\u02b9",
    "\u0003\u0002\u0002\u0002\u02ba\u02bb\u0003\u0002\u0002\u0002\u02bb\u02bd",
    "\u0003\u0002\u0002\u0002\u02bc\u02b8\u0003\u0002\u0002\u0002\u02bc\u02bd",
    "\u0003\u0002\u0002\u0002\u02bd\u02c2\u0003\u0002\u0002\u0002\u02be\u02c0",
    "\u0005V,\u0002\u02bf\u02c1\u0007~\u0002\u0002\u02c0\u02bf\u0003\u0002",
    "\u0002\u0002\u02c0\u02c1\u0003\u0002\u0002\u0002\u02c1\u02c3\u0003\u0002",
    "\u0002\u0002\u02c2\u02be\u0003\u0002\u0002\u0002\u02c2\u02c3\u0003\u0002",
    "\u0002\u0002\u02c3\u02c4\u0003\u0002\u0002\u0002\u02c4\u02c5\u0007\t",
    "\u0002\u0002\u02c5O\u0003\u0002\u0002\u0002\u02c6\u02c8\u0005R*\u0002",
    "\u02c7\u02c9\u0007~\u0002\u0002\u02c8\u02c7\u0003\u0002\u0002\u0002",
    "\u02c8\u02c9\u0003\u0002\u0002\u0002\u02c9\u02ca\u0003\u0002\u0002\u0002",
    "\u02ca\u02cb\u0005N(\u0002\u02cbQ\u0003\u0002\u0002\u0002\u02cc\u02ce",
    "\u0005\u00c2b\u0002\u02cd\u02cf\u0007~\u0002\u0002\u02ce\u02cd\u0003",
    "\u0002\u0002\u0002\u02ce\u02cf\u0003\u0002\u0002\u0002\u02cf\u02d0\u0003",
    "\u0002\u0002\u0002\u02d0\u02d2\u0005\u00c6d\u0002\u02d1\u02d3\u0007",
    "~\u0002\u0002\u02d2\u02d1\u0003\u0002\u0002\u0002\u02d2\u02d3\u0003",
    "\u0002\u0002\u0002\u02d3\u02d5\u0003\u0002\u0002\u0002\u02d4\u02d6\u0005",
    "T+\u0002\u02d5\u02d4\u0003\u0002\u0002\u0002\u02d5\u02d6\u0003\u0002",
    "\u0002\u0002\u02d6\u02d8\u0003\u0002\u0002\u0002\u02d7\u02d9\u0007~",
    "\u0002\u0002\u02d8\u02d7\u0003\u0002\u0002\u0002\u02d8\u02d9\u0003\u0002",
    "\u0002\u0002\u02d9\u02da\u0003\u0002\u0002\u0002\u02da\u02dc\u0005\u00c6",
    "d\u0002\u02db\u02dd\u0007~\u0002\u0002\u02dc\u02db\u0003\u0002\u0002",
    "\u0002\u02dc\u02dd\u0003\u0002\u0002\u0002\u02dd\u02de\u0003\u0002\u0002",
    "\u0002\u02de\u02df\u0005\u00c4c\u0002\u02df\u030d\u0003\u0002\u0002",
    "\u0002\u02e0\u02e2\u0005\u00c2b\u0002\u02e1\u02e3\u0007~\u0002\u0002",
    "\u02e2\u02e1\u0003\u0002\u0002\u0002\u02e2\u02e3\u0003\u0002\u0002\u0002",
    "\u02e3\u02e4\u0003\u0002\u0002\u0002\u02e4\u02e6\u0005\u00c6d\u0002",
    "\u02e5\u02e7\u0007~\u0002\u0002\u02e6\u02e5\u0003\u0002\u0002\u0002",
    "\u02e6\u02e7\u0003\u0002\u0002\u0002\u02e7\u02e9\u0003\u0002\u0002\u0002",
    "\u02e8\u02ea\u0005T+\u0002\u02e9\u02e8\u0003\u0002\u0002\u0002\u02e9",
    "\u02ea\u0003\u0002\u0002\u0002\u02ea\u02ec\u0003\u0002\u0002\u0002\u02eb",
    "\u02ed\u0007~\u0002\u0002\u02ec\u02eb\u0003\u0002\u0002\u0002\u02ec",
    "\u02ed\u0003\u0002\u0002\u0002\u02ed\u02ee\u0003\u0002\u0002\u0002\u02ee",
    "\u02ef\u0005\u00c6d\u0002\u02ef\u030d\u0003\u0002\u0002\u0002\u02f0",
    "\u02f2\u0005\u00c6d\u0002\u02f1\u02f3\u0007~\u0002\u0002\u02f2\u02f1",
    "\u0003\u0002\u0002\u0002\u02f2\u02f3\u0003\u0002\u0002\u0002\u02f3\u02f5",
    "\u0003\u0002\u0002\u0002\u02f4\u02f6\u0005T+\u0002\u02f5\u02f4\u0003",
    "\u0002\u0002\u0002\u02f5\u02f6\u0003\u0002\u0002\u0002\u02f6\u02f8\u0003",
    "\u0002\u0002\u0002\u02f7\u02f9\u0007~\u0002\u0002\u02f8\u02f7\u0003",
    "\u0002\u0002\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9\u02fa\u0003",
    "\u0002\u0002\u0002\u02fa\u02fc\u0005\u00c6d\u0002\u02fb\u02fd\u0007",
    "~\u0002\u0002\u02fc\u02fb\u0003\u0002\u0002\u0002\u02fc\u02fd\u0003",
    "\u0002\u0002\u0002\u02fd\u02fe\u0003\u0002\u0002\u0002\u02fe\u02ff\u0005",
    "\u00c4c\u0002\u02ff\u030d\u0003\u0002\u0002\u0002\u0300\u0302\u0005",
    "\u00c6d\u0002\u0301\u0303\u0007~\u0002\u0002\u0302\u0301\u0003\u0002",
    "\u0002\u0002\u0302\u0303\u0003\u0002\u0002\u0002\u0303\u0305\u0003\u0002",
    "\u0002\u0002\u0304\u0306\u0005T+\u0002\u0305\u0304\u0003\u0002\u0002",
    "\u0002\u0305\u0306\u0003\u0002\u0002\u0002\u0306\u0308\u0003\u0002\u0002",
    "\u0002\u0307\u0309\u0007~\u0002\u0002\u0308\u0307\u0003\u0002\u0002",
    "\u0002\u0308\u0309\u0003\u0002\u0002\u0002\u0309\u030a\u0003\u0002\u0002",
    "\u0002\u030a\u030b\u0005\u00c6d\u0002\u030b\u030d\u0003\u0002\u0002",
    "\u0002\u030c\u02cc\u0003\u0002\u0002\u0002\u030c\u02e0\u0003\u0002\u0002",
    "\u0002\u030c\u02f0\u0003\u0002\u0002\u0002\u030c\u0300\u0003\u0002\u0002",
    "\u0002\u030dS\u0003\u0002\u0002\u0002\u030e\u0310\u0007\n\u0002\u0002",
    "\u030f\u0311\u0007~\u0002\u0002\u0310\u030f\u0003\u0002\u0002\u0002",
    "\u0310\u0311\u0003\u0002\u0002\u0002\u0311\u0316\u0003\u0002\u0002\u0002",
    "\u0312\u0314\u0005\u00acW\u0002\u0313\u0315\u0007~\u0002\u0002\u0314",
    "\u0313\u0003\u0002\u0002\u0002\u0314\u0315\u0003\u0002\u0002\u0002\u0315",
    "\u0317\u0003\u0002\u0002\u0002\u0316\u0312\u0003\u0002\u0002\u0002\u0316",
    "\u0317\u0003\u0002\u0002\u0002\u0317\u031c\u0003\u0002\u0002\u0002\u0318",
    "\u031a\u0005X-\u0002\u0319\u031b\u0007~\u0002\u0002\u031a\u0319\u0003",
    "\u0002\u0002\u0002\u031a\u031b\u0003\u0002\u0002\u0002\u031b\u031d\u0003",
    "\u0002\u0002\u0002\u031c\u0318\u0003\u0002\u0002\u0002\u031c\u031d\u0003",
    "\u0002\u0002\u0002\u031d\u031f\u0003\u0002\u0002\u0002\u031e\u0320\u0005",
    "^0\u0002\u031f\u031e\u0003\u0002\u0002\u0002\u031f\u0320\u0003\u0002",
    "\u0002\u0002\u0320\u0325\u0003\u0002\u0002\u0002\u0321\u0323\u0005V",
    ",\u0002\u0322\u0324\u0007~\u0002\u0002\u0323\u0322\u0003\u0002\u0002",
    "\u0002\u0323\u0324\u0003\u0002\u0002\u0002\u0324\u0326\u0003\u0002\u0002",
    "\u0002\u0325\u0321\u0003\u0002\u0002\u0002\u0325\u0326\u0003\u0002\u0002",
    "\u0002\u0326\u0327\u0003\u0002\u0002\u0002\u0327\u0328\u0007\u000b\u0002",
    "\u0002\u0328U\u0003\u0002\u0002\u0002\u0329\u032c\u0005\u00b0Y\u0002",
    "\u032a\u032c\u0005\u00b2Z\u0002\u032b\u0329\u0003\u0002\u0002\u0002",
    "\u032b\u032a\u0003\u0002\u0002\u0002\u032cW\u0003\u0002\u0002\u0002",
    "\u032d\u032f\u0007\f\u0002\u0002\u032e\u0330\u0007~\u0002\u0002\u032f",
    "\u032e\u0003\u0002\u0002\u0002\u032f\u0330\u0003\u0002\u0002\u0002\u0330",
    "\u0331\u0003\u0002\u0002\u0002\u0331\u033f\u0005b2\u0002\u0332\u0334",
    "\u0007~\u0002\u0002\u0333\u0332\u0003\u0002\u0002\u0002\u0333\u0334",
    "\u0003\u0002\u0002\u0002\u0334\u0335\u0003\u0002\u0002\u0002\u0335\u0337",
    "\u0007\r\u0002\u0002\u0336\u0338\u0007\f\u0002\u0002\u0337\u0336\u0003",
    "\u0002\u0002\u0002\u0337\u0338\u0003\u0002\u0002\u0002\u0338\u033a\u0003",
    "\u0002\u0002\u0002\u0339\u033b\u0007~\u0002\u0002\u033a\u0339\u0003",
    "\u0002\u0002\u0002\u033a\u033b\u0003\u0002\u0002\u0002\u033b\u033c\u0003",
    "\u0002\u0002\u0002\u033c\u033e\u0005b2\u0002\u033d\u0333\u0003\u0002",
    "\u0002\u0002\u033e\u0341\u0003\u0002\u0002\u0002\u033f\u033d\u0003\u0002",
    "\u0002\u0002\u033f\u0340\u0003\u0002\u0002\u0002\u0340Y\u0003\u0002",
    "\u0002\u0002\u0341\u033f\u0003\u0002\u0002\u0002\u0342\u0349\u0005\\",
    "/\u0002\u0343\u0345\u0007~\u0002\u0002\u0344\u0343\u0003\u0002\u0002",
    "\u0002\u0344\u0345\u0003\u0002\u0002\u0002\u0345\u0346\u0003\u0002\u0002",
    "\u0002\u0346\u0348\u0005\\/\u0002\u0347\u0344\u0003\u0002\u0002\u0002",
    "\u0348\u034b\u0003\u0002\u0002\u0002\u0349\u0347\u0003\u0002\u0002\u0002",
    "\u0349\u034a\u0003\u0002\u0002\u0002\u034a[\u0003\u0002\u0002\u0002",
    "\u034b\u0349\u0003\u0002\u0002\u0002\u034c\u034e\u0007\f\u0002\u0002",
    "\u034d\u034f\u0007~\u0002\u0002\u034e\u034d\u0003\u0002\u0002\u0002",
    "\u034e\u034f\u0003\u0002\u0002\u0002\u034f\u0350\u0003\u0002\u0002\u0002",
    "\u0350\u0351\u0005`1\u0002\u0351]\u0003\u0002\u0002\u0002\u0352\u0354",
    "\u0007\u0007\u0002\u0002\u0353\u0355\u0007~\u0002\u0002\u0354\u0353",
    "\u0003\u0002\u0002\u0002\u0354\u0355\u0003\u0002\u0002\u0002\u0355\u035a",
    "\u0003\u0002\u0002\u0002\u0356\u0358\u0005\u00b8]\u0002\u0357\u0359",
    "\u0007~\u0002\u0002\u0358\u0357\u0003\u0002\u0002\u0002\u0358\u0359",
    "\u0003\u0002\u0002\u0002\u0359\u035b\u0003\u0002\u0002\u0002\u035a\u0356",
    "\u0003\u0002\u0002\u0002\u035a\u035b\u0003\u0002\u0002\u0002\u035b\u0366",
    "\u0003\u0002\u0002\u0002\u035c\u035e\u0007\u000e\u0002\u0002\u035d\u035f",
    "\u0007~\u0002\u0002\u035e\u035d\u0003\u0002\u0002\u0002\u035e\u035f",
    "\u0003\u0002\u0002\u0002\u035f\u0364\u0003\u0002\u0002\u0002\u0360\u0362",
    "\u0005\u00b8]\u0002\u0361\u0363\u0007~\u0002\u0002\u0362\u0361\u0003",
    "\u0002\u0002\u0002\u0362\u0363\u0003\u0002\u0002\u0002\u0363\u0365\u0003",
    "\u0002\u0002\u0002\u0364\u0360\u0003\u0002\u0002\u0002\u0364\u0365\u0003",
    "\u0002\u0002\u0002\u0365\u0367\u0003\u0002\u0002\u0002\u0366\u035c\u0003",
    "\u0002\u0002\u0002\u0366\u0367\u0003\u0002\u0002\u0002\u0367_\u0003",
    "\u0002\u0002\u0002\u0368\u0369\u0005\u00bc_\u0002\u0369a\u0003\u0002",
    "\u0002\u0002\u036a\u036b\u0005\u00bc_\u0002\u036bc\u0003\u0002\u0002",
    "\u0002\u036c\u036d\u0005f4\u0002\u036de\u0003\u0002\u0002\u0002\u036e",
    "\u0375\u0005h5\u0002\u036f\u0370\u0007~\u0002\u0002\u0370\u0371\u0007",
    "K\u0002\u0002\u0371\u0372\u0007~\u0002\u0002\u0372\u0374\u0005h5\u0002",
    "\u0373\u036f\u0003\u0002\u0002\u0002\u0374\u0377\u0003\u0002\u0002\u0002",
    "\u0375\u0373\u0003\u0002\u0002\u0002\u0375\u0376\u0003\u0002\u0002\u0002",
    "\u0376g\u0003\u0002\u0002\u0002\u0377\u0375\u0003\u0002\u0002\u0002",
    "\u0378\u037f\u0005j6\u0002\u0379\u037a\u0007~\u0002\u0002\u037a\u037b",
    "\u0007L\u0002\u0002\u037b\u037c\u0007~\u0002\u0002\u037c\u037e\u0005",
    "j6\u0002\u037d\u0379\u0003\u0002\u0002\u0002\u037e\u0381\u0003\u0002",
    "\u0002\u0002\u037f\u037d\u0003\u0002\u0002\u0002\u037f\u0380\u0003\u0002",
    "\u0002\u0002\u0380i\u0003\u0002\u0002\u0002\u0381\u037f\u0003\u0002",
    "\u0002\u0002\u0382\u0389\u0005l7\u0002\u0383\u0384\u0007~\u0002\u0002",
    "\u0384\u0385\u0007M\u0002\u0002\u0385\u0386\u0007~\u0002\u0002\u0386",
    "\u0388\u0005l7\u0002\u0387\u0383\u0003\u0002\u0002\u0002\u0388\u038b",
    "\u0003\u0002\u0002\u0002\u0389\u0387\u0003\u0002\u0002\u0002\u0389\u038a",
    "\u0003\u0002\u0002\u0002\u038ak\u0003\u0002\u0002\u0002\u038b\u0389",
    "\u0003\u0002\u0002\u0002\u038c\u038e\u0007N\u0002\u0002\u038d\u038f",
    "\u0007~\u0002\u0002\u038e\u038d\u0003\u0002\u0002\u0002\u038e\u038f",
    "\u0003\u0002\u0002\u0002\u038f\u0391\u0003\u0002\u0002\u0002\u0390\u038c",
    "\u0003\u0002\u0002\u0002\u0391\u0394\u0003\u0002\u0002\u0002\u0392\u0390",
    "\u0003\u0002\u0002\u0002\u0392\u0393\u0003\u0002\u0002\u0002\u0393\u0395",
    "\u0003\u0002\u0002\u0002\u0394\u0392\u0003\u0002\u0002\u0002\u0395\u0396",
    "\u0005n8\u0002\u0396m\u0003\u0002\u0002\u0002\u0397\u039e\u0005p9\u0002",
    "\u0398\u039a\u0007~\u0002\u0002\u0399\u0398\u0003\u0002\u0002\u0002",
    "\u0399\u039a\u0003\u0002\u0002\u0002\u039a\u039b\u0003\u0002\u0002\u0002",
    "\u039b\u039d\u0005\u008aF\u0002\u039c\u0399\u0003\u0002\u0002\u0002",
    "\u039d\u03a0\u0003\u0002\u0002\u0002\u039e\u039c\u0003\u0002\u0002\u0002",
    "\u039e\u039f\u0003\u0002\u0002\u0002\u039fo\u0003\u0002\u0002\u0002",
    "\u03a0\u039e\u0003\u0002\u0002\u0002\u03a1\u03b4\u0005r:\u0002\u03a2",
    "\u03a4\u0007~\u0002\u0002\u03a3\u03a2\u0003\u0002\u0002\u0002\u03a3",
    "\u03a4\u0003\u0002\u0002\u0002\u03a4\u03a5\u0003\u0002\u0002\u0002\u03a5",
    "\u03a7\u0007\u000f\u0002\u0002\u03a6\u03a8\u0007~\u0002\u0002\u03a7",
    "\u03a6\u0003\u0002\u0002\u0002\u03a7\u03a8\u0003\u0002\u0002\u0002\u03a8",
    "\u03a9\u0003\u0002\u0002\u0002\u03a9\u03b3\u0005r:\u0002\u03aa\u03ac",
    "\u0007~\u0002\u0002\u03ab\u03aa\u0003\u0002\u0002\u0002\u03ab\u03ac",
    "\u0003\u0002\u0002\u0002\u03ac\u03ad\u0003\u0002\u0002\u0002\u03ad\u03af",
    "\u0007\u0010\u0002\u0002\u03ae\u03b0\u0007~\u0002\u0002\u03af\u03ae",
    "\u0003\u0002\u0002\u0002\u03af\u03b0\u0003\u0002\u0002\u0002\u03b0\u03b1",
    "\u0003\u0002\u0002\u0002\u03b1\u03b3\u0005r:\u0002\u03b2\u03a3\u0003",
    "\u0002\u0002\u0002\u03b2\u03ab\u0003\u0002\u0002\u0002\u03b3\u03b6\u0003",
    "\u0002\u0002\u0002\u03b4\u03b2\u0003\u0002\u0002\u0002\u03b4\u03b5\u0003",
    "\u0002\u0002\u0002\u03b5q\u0003\u0002\u0002\u0002\u03b6\u03b4\u0003",
    "\u0002\u0002\u0002\u03b7\u03d2\u0005t;\u0002\u03b8\u03ba\u0007~\u0002",
    "\u0002\u03b9\u03b8\u0003\u0002\u0002\u0002\u03b9\u03ba\u0003\u0002\u0002",
    "\u0002\u03ba\u03bb\u0003\u0002\u0002\u0002\u03bb\u03bd\u0007\u0007\u0002",
    "\u0002\u03bc\u03be\u0007~\u0002\u0002\u03bd\u03bc\u0003\u0002\u0002",
    "\u0002\u03bd\u03be\u0003\u0002\u0002\u0002\u03be\u03bf\u0003\u0002\u0002",
    "\u0002\u03bf\u03d1\u0005t;\u0002\u03c0\u03c2\u0007~\u0002\u0002\u03c1",
    "\u03c0\u0003\u0002\u0002\u0002\u03c1\u03c2\u0003\u0002\u0002\u0002\u03c2",
    "\u03c3\u0003\u0002\u0002\u0002\u03c3\u03c5\u0007\u0011\u0002\u0002\u03c4",
    "\u03c6\u0007~\u0002\u0002\u03c5\u03c4\u0003\u0002\u0002\u0002\u03c5",
    "\u03c6\u0003\u0002\u0002\u0002\u03c6\u03c7\u0003\u0002\u0002\u0002\u03c7",
    "\u03d1\u0005t;\u0002\u03c8\u03ca\u0007~\u0002\u0002\u03c9\u03c8\u0003",
    "\u0002\u0002\u0002\u03c9\u03ca\u0003\u0002\u0002\u0002\u03ca\u03cb\u0003",
    "\u0002\u0002\u0002\u03cb\u03cd\u0007\u0012\u0002\u0002\u03cc\u03ce\u0007",
    "~\u0002\u0002\u03cd\u03cc\u0003\u0002\u0002\u0002\u03cd\u03ce\u0003",
    "\u0002\u0002\u0002\u03ce\u03cf\u0003\u0002\u0002\u0002\u03cf\u03d1\u0005",
    "t;\u0002\u03d0\u03b9\u0003\u0002\u0002\u0002\u03d0\u03c1\u0003\u0002",
    "\u0002\u0002\u03d0\u03c9\u0003\u0002\u0002\u0002\u03d1\u03d4\u0003\u0002",
    "\u0002\u0002\u03d2\u03d0\u0003\u0002\u0002\u0002\u03d2\u03d3\u0003\u0002",
    "\u0002\u0002\u03d3s\u0003\u0002\u0002\u0002\u03d4\u03d2\u0003\u0002",
    "\u0002\u0002\u03d5\u03e0\u0005v<\u0002\u03d6\u03d8\u0007~\u0002\u0002",
    "\u03d7\u03d6\u0003\u0002\u0002\u0002\u03d7\u03d8\u0003\u0002\u0002\u0002",
    "\u03d8\u03d9\u0003\u0002\u0002\u0002\u03d9\u03db\u0007\u0013\u0002\u0002",
    "\u03da\u03dc\u0007~\u0002\u0002\u03db\u03da\u0003\u0002\u0002\u0002",
    "\u03db\u03dc\u0003\u0002\u0002\u0002\u03dc\u03dd\u0003\u0002\u0002\u0002",
    "\u03dd\u03df\u0005v<\u0002\u03de\u03d7\u0003\u0002\u0002\u0002\u03df",
    "\u03e2\u0003\u0002\u0002\u0002\u03e0\u03de\u0003\u0002\u0002\u0002\u03e0",
    "\u03e1\u0003\u0002\u0002\u0002\u03e1u\u0003\u0002\u0002\u0002\u03e2",
    "\u03e0\u0003\u0002\u0002\u0002\u03e3\u03e5\t\u0003\u0002\u0002\u03e4",
    "\u03e6\u0007~\u0002\u0002\u03e5\u03e4\u0003\u0002\u0002\u0002\u03e5",
    "\u03e6\u0003\u0002\u0002\u0002\u03e6\u03e8\u0003\u0002\u0002\u0002\u03e7",
    "\u03e3\u0003\u0002\u0002\u0002\u03e8\u03eb\u0003\u0002\u0002\u0002\u03e9",
    "\u03e7\u0003\u0002\u0002\u0002\u03e9\u03ea\u0003\u0002\u0002\u0002\u03ea",
    "\u03ec\u0003\u0002\u0002\u0002\u03eb\u03e9\u0003\u0002\u0002\u0002\u03ec",
    "\u03ed\u0005x=\u0002\u03edw\u0003\u0002\u0002\u0002\u03ee\u03f4\u0005",
    "\u0080A\u0002\u03ef\u03f3\u0005|?\u0002\u03f0\u03f3\u0005z>\u0002\u03f1",
    "\u03f3\u0005~@\u0002\u03f2\u03ef\u0003\u0002\u0002\u0002\u03f2\u03f0",
    "\u0003\u0002\u0002\u0002\u03f2\u03f1\u0003\u0002\u0002\u0002\u03f3\u03f6",
    "\u0003\u0002\u0002\u0002\u03f4\u03f2\u0003\u0002\u0002\u0002\u03f4\u03f5",
    "\u0003\u0002\u0002\u0002\u03f5y\u0003\u0002\u0002\u0002\u03f6\u03f4",
    "\u0003\u0002\u0002\u0002\u03f7\u03f8\u0007~\u0002\u0002\u03f8\u03fa",
    "\u0007O\u0002\u0002\u03f9\u03fb\u0007~\u0002\u0002\u03fa\u03f9\u0003",
    "\u0002\u0002\u0002\u03fa\u03fb\u0003\u0002\u0002\u0002\u03fb\u03fc\u0003",
    "\u0002\u0002\u0002\u03fc\u0411\u0005\u0080A\u0002\u03fd\u03ff\u0007",
    "~\u0002\u0002\u03fe\u03fd\u0003\u0002\u0002\u0002\u03fe\u03ff\u0003",
    "\u0002\u0002\u0002\u03ff\u0400\u0003\u0002\u0002\u0002\u0400\u0401\u0007",
    "\n\u0002\u0002\u0401\u0402\u0005d3\u0002\u0402\u0403\u0007\u000b\u0002",
    "\u0002\u0403\u0411\u0003\u0002\u0002\u0002\u0404\u0406\u0007~\u0002",
    "\u0002\u0405\u0404\u0003\u0002\u0002\u0002\u0405\u0406\u0003\u0002\u0002",
    "\u0002\u0406\u0407\u0003\u0002\u0002\u0002\u0407\u0409\u0007\n\u0002",
    "\u0002\u0408\u040a\u0005d3\u0002\u0409\u0408\u0003\u0002\u0002\u0002",
    "\u0409\u040a\u0003\u0002\u0002\u0002\u040a\u040b\u0003\u0002\u0002\u0002",
    "\u040b\u040d\u0007\u000e\u0002\u0002\u040c\u040e\u0005d3\u0002\u040d",
    "\u040c\u0003\u0002\u0002\u0002\u040d\u040e\u0003\u0002\u0002\u0002\u040e",
    "\u040f\u0003\u0002\u0002\u0002\u040f\u0411\u0007\u000b\u0002\u0002\u0410",
    "\u03f7\u0003\u0002\u0002\u0002\u0410\u03fe\u0003\u0002\u0002\u0002\u0410",
    "\u0405\u0003\u0002\u0002\u0002\u0411{\u0003\u0002\u0002\u0002\u0412",
    "\u0413\u0007~\u0002\u0002\u0413\u0414\u0007P\u0002\u0002\u0414\u0415",
    "\u0007~\u0002\u0002\u0415\u041d\u0007?\u0002\u0002\u0416\u0417\u0007",
    "~\u0002\u0002\u0417\u0418\u0007Q\u0002\u0002\u0418\u0419\u0007~\u0002",
    "\u0002\u0419\u041d\u0007?\u0002\u0002\u041a\u041b\u0007~\u0002\u0002",
    "\u041b\u041d\u0007R\u0002\u0002\u041c\u0412\u0003\u0002\u0002\u0002",
    "\u041c\u0416\u0003\u0002\u0002\u0002\u041c\u041a\u0003\u0002\u0002\u0002",
    "\u041d\u041f\u0003\u0002\u0002\u0002\u041e\u0420\u0007~\u0002\u0002",
    "\u041f\u041e\u0003\u0002\u0002\u0002\u041f\u0420\u0003\u0002\u0002\u0002",
    "\u0420\u0421\u0003\u0002\u0002\u0002\u0421\u0422\u0005\u0080A\u0002",
    "\u0422}\u0003\u0002\u0002\u0002\u0423\u0424\u0007~\u0002\u0002\u0424",
    "\u0425\u0007S\u0002\u0002\u0425\u0426\u0007~\u0002\u0002\u0426\u042e",
    "\u0007T\u0002\u0002\u0427\u0428\u0007~\u0002\u0002\u0428\u0429\u0007",
    "S\u0002\u0002\u0429\u042a\u0007~\u0002\u0002\u042a\u042b\u0007N\u0002",
    "\u0002\u042b\u042c\u0007~\u0002\u0002\u042c\u042e\u0007T\u0002\u0002",
    "\u042d\u0423\u0003\u0002\u0002\u0002\u042d\u0427\u0003\u0002\u0002\u0002",
    "\u042e\u007f\u0003\u0002\u0002\u0002\u042f\u0436\u0005\u0082B\u0002",
    "\u0430\u0432\u0007~\u0002\u0002\u0431\u0430\u0003\u0002\u0002\u0002",
    "\u0431\u0432\u0003\u0002\u0002\u0002\u0432\u0433\u0003\u0002\u0002\u0002",
    "\u0433\u0435\u0005\u00a6T\u0002\u0434\u0431\u0003\u0002\u0002\u0002",
    "\u0435\u0438\u0003\u0002\u0002\u0002\u0436\u0434\u0003\u0002\u0002\u0002",
    "\u0436\u0437\u0003\u0002\u0002\u0002\u0437\u043d\u0003\u0002\u0002\u0002",
    "\u0438\u0436\u0003\u0002\u0002\u0002\u0439\u043b\u0007~\u0002\u0002",
    "\u043a\u0439\u0003\u0002\u0002\u0002\u043a\u043b\u0003\u0002\u0002\u0002",
    "\u043b\u043c\u0003\u0002\u0002\u0002\u043c\u043e\u0005Z.\u0002\u043d",
    "\u043a\u0003\u0002\u0002\u0002\u043d\u043e\u0003\u0002\u0002\u0002\u043e",
    "\u0081\u0003\u0002\u0002\u0002\u043f\u048e\u0005\u0084C\u0002\u0440",
    "\u048e\u0005\u00b2Z\u0002\u0441\u048e\u0005\u00a8U\u0002\u0442\u0444",
    "\u0007U\u0002\u0002\u0443\u0445\u0007~\u0002\u0002\u0444\u0443\u0003",
    "\u0002\u0002\u0002\u0444\u0445\u0003\u0002\u0002\u0002\u0445\u0446\u0003",
    "\u0002\u0002\u0002\u0446\u0448\u0007\b\u0002\u0002\u0447\u0449\u0007",
    "~\u0002\u0002\u0448\u0447\u0003\u0002\u0002\u0002\u0448\u0449\u0003",
    "\u0002\u0002\u0002\u0449\u044a\u0003\u0002\u0002\u0002\u044a\u044c\u0007",
    "\u0007\u0002\u0002\u044b\u044d\u0007~\u0002\u0002\u044c\u044b\u0003",
    "\u0002\u0002\u0002\u044c\u044d\u0003\u0002\u0002\u0002\u044d\u044e\u0003",
    "\u0002\u0002\u0002\u044e\u048e\u0007\t\u0002\u0002\u044f\u048e\u0005",
    "\u00a2R\u0002\u0450\u048e\u0005\u00a4S\u0002\u0451\u0453\u00071\u0002",
    "\u0002\u0452\u0454\u0007~\u0002\u0002\u0453\u0452\u0003\u0002\u0002",
    "\u0002\u0453\u0454\u0003\u0002\u0002\u0002\u0454\u0455\u0003\u0002\u0002",
    "\u0002\u0455\u0457\u0007\b\u0002\u0002\u0456\u0458\u0007~\u0002\u0002",
    "\u0457\u0456\u0003\u0002\u0002\u0002\u0457\u0458\u0003\u0002\u0002\u0002",
    "\u0458\u0459\u0003\u0002\u0002\u0002\u0459\u045b\u0005\u0090I\u0002",
    "\u045a\u045c\u0007~\u0002\u0002\u045b\u045a\u0003\u0002\u0002\u0002",
    "\u045b\u045c\u0003\u0002\u0002\u0002\u045c\u045d\u0003\u0002\u0002\u0002",
    "\u045d\u045e\u0007\t\u0002\u0002\u045e\u048e\u0003\u0002\u0002\u0002",
    "\u045f\u0461\u0007V\u0002\u0002\u0460\u0462\u0007~\u0002\u0002\u0461",
    "\u0460\u0003\u0002\u0002\u0002\u0461\u0462\u0003\u0002\u0002\u0002\u0462",
    "\u0463\u0003\u0002\u0002\u0002\u0463\u0465\u0007\b\u0002\u0002\u0464",
    "\u0466\u0007~\u0002\u0002\u0465\u0464\u0003\u0002\u0002\u0002\u0465",
    "\u0466\u0003\u0002\u0002\u0002\u0466\u0467\u0003\u0002\u0002\u0002\u0467",
    "\u0469\u0005\u0090I\u0002\u0468\u046a\u0007~\u0002\u0002\u0469\u0468",
    "\u0003\u0002\u0002\u0002\u0469\u046a\u0003\u0002\u0002\u0002\u046a\u046b",
    "\u0003\u0002\u0002\u0002\u046b\u046c\u0007\t\u0002\u0002\u046c\u048e",
    "\u0003\u0002\u0002\u0002\u046d\u046f\u0007W\u0002\u0002\u046e\u0470",
    "\u0007~\u0002\u0002\u046f\u046e\u0003\u0002\u0002\u0002\u046f\u0470",
    "\u0003\u0002\u0002\u0002\u0470\u0471\u0003\u0002\u0002\u0002\u0471\u0473",
    "\u0007\b\u0002\u0002\u0472\u0474\u0007~\u0002\u0002\u0473\u0472\u0003",
    "\u0002\u0002\u0002\u0473\u0474\u0003\u0002\u0002\u0002\u0474\u0475\u0003",
    "\u0002\u0002\u0002\u0475\u0477\u0005\u0090I\u0002\u0476\u0478\u0007",
    "~\u0002\u0002\u0477\u0476\u0003\u0002\u0002\u0002\u0477\u0478\u0003",
    "\u0002\u0002\u0002\u0478\u0479\u0003\u0002\u0002\u0002\u0479\u047a\u0007",
    "\t\u0002\u0002\u047a\u048e\u0003\u0002\u0002\u0002\u047b\u047d\u0007",
    "X\u0002\u0002\u047c\u047e\u0007~\u0002\u0002\u047d\u047c\u0003\u0002",
    "\u0002\u0002\u047d\u047e\u0003\u0002\u0002\u0002\u047e\u047f\u0003\u0002",
    "\u0002\u0002\u047f\u0481\u0007\b\u0002\u0002\u0480\u0482\u0007~\u0002",
    "\u0002\u0481\u0480\u0003\u0002\u0002\u0002\u0481\u0482\u0003\u0002\u0002",
    "\u0002\u0482\u0483\u0003\u0002\u0002\u0002\u0483\u0485\u0005\u0090I",
    "\u0002\u0484\u0486\u0007~\u0002\u0002\u0485\u0484\u0003\u0002\u0002",
    "\u0002\u0485\u0486\u0003\u0002\u0002\u0002\u0486\u0487\u0003\u0002\u0002",
    "\u0002\u0487\u0488\u0007\t\u0002\u0002\u0488\u048e\u0003\u0002\u0002",
    "\u0002\u0489\u048e\u0005\u008eH\u0002\u048a\u048e\u0005\u008cG\u0002",
    "\u048b\u048e\u0005\u0094K\u0002\u048c\u048e\u0005\u00acW\u0002\u048d",
    "\u043f\u0003\u0002\u0002\u0002\u048d\u0440\u0003\u0002\u0002\u0002\u048d",
    "\u0441\u0003\u0002\u0002\u0002\u048d\u0442\u0003\u0002\u0002\u0002\u048d",
    "\u044f\u0003\u0002\u0002\u0002\u048d\u0450\u0003\u0002\u0002\u0002\u048d",
    "\u0451\u0003\u0002\u0002\u0002\u048d\u045f\u0003\u0002\u0002\u0002\u048d",
    "\u046d\u0003\u0002\u0002\u0002\u048d\u047b\u0003\u0002\u0002\u0002\u048d",
    "\u0489\u0003\u0002\u0002\u0002\u048d\u048a\u0003\u0002\u0002\u0002\u048d",
    "\u048b\u0003\u0002\u0002\u0002\u048d\u048c\u0003\u0002\u0002\u0002\u048e",
    "\u0083\u0003\u0002\u0002\u0002\u048f\u0496\u0005\u00aeX\u0002\u0490",
    "\u0496\u0007a\u0002\u0002\u0491\u0496\u0005\u0086D\u0002\u0492\u0496",
    "\u0007T\u0002\u0002\u0493\u0496\u0005\u00b0Y\u0002\u0494\u0496\u0005",
    "\u0088E\u0002\u0495\u048f\u0003\u0002\u0002\u0002\u0495\u0490\u0003",
    "\u0002\u0002\u0002\u0495\u0491\u0003\u0002\u0002\u0002\u0495\u0492\u0003",
    "\u0002\u0002\u0002\u0495\u0493\u0003\u0002\u0002\u0002\u0495\u0494\u0003",
    "\u0002\u0002\u0002\u0496\u0085\u0003\u0002\u0002\u0002\u0497\u0498\t",
    "\u0004\u0002\u0002\u0498\u0087\u0003\u0002\u0002\u0002\u0499\u049b\u0007",
    "\n\u0002\u0002\u049a\u049c\u0007~\u0002\u0002\u049b\u049a\u0003\u0002",
    "\u0002\u0002\u049b\u049c\u0003\u0002\u0002\u0002\u049c\u04ae\u0003\u0002",
    "\u0002\u0002\u049d\u049f\u0005d3\u0002\u049e\u04a0\u0007~\u0002\u0002",
    "\u049f\u049e\u0003\u0002\u0002\u0002\u049f\u04a0\u0003\u0002\u0002\u0002",
    "\u04a0\u04ab\u0003\u0002\u0002\u0002\u04a1\u04a3\u0007\u0004\u0002\u0002",
    "\u04a2\u04a4\u0007~\u0002\u0002\u04a3\u04a2\u0003\u0002\u0002\u0002",
    "\u04a3\u04a4\u0003\u0002\u0002\u0002\u04a4\u04a5\u0003\u0002\u0002\u0002",
    "\u04a5\u04a7\u0005d3\u0002\u04a6\u04a8\u0007~\u0002\u0002\u04a7\u04a6",
    "\u0003\u0002\u0002\u0002\u04a7\u04a8\u0003\u0002\u0002\u0002\u04a8\u04aa",
    "\u0003\u0002\u0002\u0002\u04a9\u04a1\u0003\u0002\u0002\u0002\u04aa\u04ad",
    "\u0003\u0002\u0002\u0002\u04ab\u04a9\u0003\u0002\u0002\u0002\u04ab\u04ac",
    "\u0003\u0002\u0002\u0002\u04ac\u04af\u0003\u0002\u0002\u0002\u04ad\u04ab",
    "\u0003\u0002\u0002\u0002\u04ae\u049d\u0003\u0002\u0002\u0002\u04ae\u04af",
    "\u0003\u0002\u0002\u0002\u04af\u04b0\u0003\u0002\u0002\u0002\u04b0\u04b1",
    "\u0007\u000b\u0002\u0002\u04b1\u0089\u0003\u0002\u0002\u0002\u04b2\u04b4",
    "\u0007\u0005\u0002\u0002\u04b3\u04b5\u0007~\u0002\u0002\u04b4\u04b3",
    "\u0003\u0002\u0002\u0002\u04b4\u04b5\u0003\u0002\u0002\u0002\u04b5\u04b6",
    "\u0003\u0002\u0002\u0002\u04b6\u04d1\u0005p9\u0002\u04b7\u04b9\u0007",
    "\u0014\u0002\u0002\u04b8\u04ba\u0007~\u0002\u0002\u04b9\u04b8\u0003",
    "\u0002\u0002\u0002\u04b9\u04ba\u0003\u0002\u0002\u0002\u04ba\u04bb\u0003",
    "\u0002\u0002\u0002\u04bb\u04d1\u0005p9\u0002\u04bc\u04be\u0007\u0015",
    "\u0002\u0002\u04bd\u04bf\u0007~\u0002\u0002\u04be\u04bd\u0003\u0002",
    "\u0002\u0002\u04be\u04bf\u0003\u0002\u0002\u0002\u04bf\u04c0\u0003\u0002",
    "\u0002\u0002\u04c0\u04d1\u0005p9\u0002\u04c1\u04c3\u0007\u0016\u0002",
    "\u0002\u04c2\u04c4\u0007~\u0002\u0002\u04c3\u04c2\u0003\u0002\u0002",
    "\u0002\u04c3\u04c4\u0003\u0002\u0002\u0002\u04c4\u04c5\u0003\u0002\u0002",
    "\u0002\u04c5\u04d1\u0005p9\u0002\u04c6\u04c8\u0007\u0017\u0002\u0002",
    "\u04c7\u04c9\u0007~\u0002\u0002\u04c8\u04c7\u0003\u0002\u0002\u0002",
    "\u04c8\u04c9\u0003\u0002\u0002\u0002\u04c9\u04ca\u0003\u0002\u0002\u0002",
    "\u04ca\u04d1\u0005p9\u0002\u04cb\u04cd\u0007\u0018\u0002\u0002\u04cc",
    "\u04ce\u0007~\u0002\u0002\u04cd\u04cc\u0003\u0002\u0002\u0002\u04cd",
    "\u04ce\u0003\u0002\u0002\u0002\u04ce\u04cf\u0003\u0002\u0002\u0002\u04cf",
    "\u04d1\u0005p9\u0002\u04d0\u04b2\u0003\u0002\u0002\u0002\u04d0\u04b7",
    "\u0003\u0002\u0002\u0002\u04d0\u04bc\u0003\u0002\u0002\u0002\u04d0\u04c1",
    "\u0003\u0002\u0002\u0002\u04d0\u04c6\u0003\u0002\u0002\u0002\u04d0\u04cb",
    "\u0003\u0002\u0002\u0002\u04d1\u008b\u0003\u0002\u0002\u0002\u04d2\u04d4",
    "\u0007\b\u0002\u0002\u04d3\u04d5\u0007~\u0002\u0002\u04d4\u04d3\u0003",
    "\u0002\u0002\u0002\u04d4\u04d5\u0003\u0002\u0002\u0002\u04d5\u04d6\u0003",
    "\u0002\u0002\u0002\u04d6\u04d8\u0005d3\u0002\u04d7\u04d9\u0007~\u0002",
    "\u0002\u04d8\u04d7\u0003\u0002\u0002\u0002\u04d8\u04d9\u0003\u0002\u0002",
    "\u0002\u04d9\u04da\u0003\u0002\u0002\u0002\u04da\u04db\u0007\t\u0002",
    "\u0002\u04db\u008d\u0003\u0002\u0002\u0002\u04dc\u04e1\u0005N(\u0002",
    "\u04dd\u04df\u0007~\u0002\u0002\u04de\u04dd\u0003\u0002\u0002\u0002",
    "\u04de\u04df\u0003\u0002\u0002\u0002\u04df\u04e0\u0003\u0002\u0002\u0002",
    "\u04e0\u04e2\u0005P)\u0002\u04e1\u04de\u0003\u0002\u0002\u0002\u04e2",
    "\u04e3\u0003\u0002\u0002\u0002\u04e3\u04e1\u0003\u0002\u0002\u0002\u04e3",
    "\u04e4\u0003\u0002\u0002\u0002\u04e4\u008f\u0003\u0002\u0002\u0002\u04e5",
    "\u04ea\u0005\u0092J\u0002\u04e6\u04e8\u0007~\u0002\u0002\u04e7\u04e6",
    "\u0003\u0002\u0002\u0002\u04e7\u04e8\u0003\u0002\u0002\u0002\u04e8\u04e9",
    "\u0003\u0002\u0002\u0002\u04e9\u04eb\u0005D#\u0002\u04ea\u04e7\u0003",
    "\u0002\u0002\u0002\u04ea\u04eb\u0003\u0002\u0002\u0002\u04eb\u0091\u0003",
    "\u0002\u0002\u0002\u04ec\u04ed\u0005\u00acW\u0002\u04ed\u04ee\u0007",
    "~\u0002\u0002\u04ee\u04ef\u0007O\u0002\u0002\u04ef\u04f0\u0007~\u0002",
    "\u0002\u04f0\u04f1\u0005d3\u0002\u04f1\u0093\u0003\u0002\u0002\u0002",
    "\u04f2\u04f4\u0005\u0096L\u0002\u04f3\u04f5\u0007~\u0002\u0002\u04f4",
    "\u04f3\u0003\u0002\u0002\u0002\u04f4\u04f5\u0003\u0002\u0002\u0002\u04f5",
    "\u04f6\u0003\u0002\u0002\u0002\u04f6\u04f8\u0007\b\u0002\u0002\u04f7",
    "\u04f9\u0007~\u0002\u0002\u04f8\u04f7\u0003\u0002\u0002\u0002\u04f8",
    "\u04f9\u0003\u0002\u0002\u0002\u04f9\u04fe\u0003\u0002\u0002\u0002\u04fa",
    "\u04fc\u0007@\u0002\u0002\u04fb\u04fd\u0007~\u0002\u0002\u04fc\u04fb",
    "\u0003\u0002\u0002\u0002\u04fc\u04fd\u0003\u0002\u0002\u0002\u04fd\u04ff",
    "\u0003\u0002\u0002\u0002\u04fe\u04fa\u0003\u0002\u0002\u0002\u04fe\u04ff",
    "\u0003\u0002\u0002\u0002\u04ff\u0511\u0003\u0002\u0002\u0002\u0500\u0502",
    "\u0005d3\u0002\u0501\u0503\u0007~\u0002\u0002\u0502\u0501\u0003\u0002",
    "\u0002\u0002\u0502\u0503\u0003\u0002\u0002\u0002\u0503\u050e\u0003\u0002",
    "\u0002\u0002\u0504\u0506\u0007\u0004\u0002\u0002\u0505\u0507\u0007~",
    "\u0002\u0002\u0506\u0505\u0003\u0002\u0002\u0002\u0506\u0507\u0003\u0002",
    "\u0002\u0002\u0507\u0508\u0003\u0002\u0002\u0002\u0508\u050a\u0005d",
    "3\u0002\u0509\u050b\u0007~\u0002\u0002\u050a\u0509\u0003\u0002\u0002",
    "\u0002\u050a\u050b\u0003\u0002\u0002\u0002\u050b\u050d\u0003\u0002\u0002",
    "\u0002\u050c\u0504\u0003\u0002\u0002\u0002\u050d\u0510\u0003\u0002\u0002",
    "\u0002\u050e\u050c\u0003\u0002\u0002\u0002\u050e\u050f\u0003\u0002\u0002",
    "\u0002\u050f\u0512\u0003\u0002\u0002\u0002\u0510\u050e\u0003\u0002\u0002",
    "\u0002\u0511\u0500\u0003\u0002\u0002\u0002\u0511\u0512\u0003\u0002\u0002",
    "\u0002\u0512\u0513\u0003\u0002\u0002\u0002\u0513\u0514\u0007\t\u0002",
    "\u0002\u0514\u0095\u0003\u0002\u0002\u0002\u0515\u0516\u0005\u00a0Q",
    "\u0002\u0516\u0517\u0005\u00c0a\u0002\u0517\u051a\u0003\u0002\u0002",
    "\u0002\u0518\u051a\u0007[\u0002\u0002\u0519\u0515\u0003\u0002\u0002",
    "\u0002\u0519\u0518\u0003\u0002\u0002\u0002\u051a\u0097\u0003\u0002\u0002",
    "\u0002\u051b\u051d\u0005\u009eP\u0002\u051c\u051e\u0007~\u0002\u0002",
    "\u051d\u051c\u0003\u0002\u0002\u0002\u051d\u051e\u0003\u0002\u0002\u0002",
    "\u051e\u051f\u0003\u0002\u0002\u0002\u051f\u0521\u0007\b\u0002\u0002",
    "\u0520\u0522\u0007~\u0002\u0002\u0521\u0520\u0003\u0002\u0002\u0002",
    "\u0521\u0522\u0003\u0002\u0002\u0002\u0522\u0534\u0003\u0002\u0002\u0002",
    "\u0523\u0525\u0005d3\u0002\u0524\u0526\u0007~\u0002\u0002\u0525\u0524",
    "\u0003\u0002\u0002\u0002\u0525\u0526\u0003\u0002\u0002\u0002\u0526\u0531",
    "\u0003\u0002\u0002\u0002\u0527\u0529\u0007\u0004\u0002\u0002\u0528\u052a",
    "\u0007~\u0002\u0002\u0529\u0528\u0003\u0002\u0002\u0002\u0529\u052a",
    "\u0003\u0002\u0002\u0002\u052a\u052b\u0003\u0002\u0002\u0002\u052b\u052d",
    "\u0005d3\u0002\u052c\u052e\u0007~\u0002\u0002\u052d\u052c\u0003\u0002",
    "\u0002\u0002\u052d\u052e\u0003\u0002\u0002\u0002\u052e\u0530\u0003\u0002",
    "\u0002\u0002\u052f\u0527\u0003\u0002\u0002\u0002\u0530\u0533\u0003\u0002",
    "\u0002\u0002\u0531\u052f\u0003\u0002\u0002\u0002\u0531\u0532\u0003\u0002",
    "\u0002\u0002\u0532\u0535\u0003\u0002\u0002\u0002\u0533\u0531\u0003\u0002",
    "\u0002\u0002\u0534\u0523\u0003\u0002\u0002\u0002\u0534\u0535\u0003\u0002",
    "\u0002\u0002\u0535\u0536\u0003\u0002\u0002\u0002\u0536\u0537\u0007\t",
    "\u0002\u0002\u0537\u0099\u0003\u0002\u0002\u0002\u0538\u0539\u0005\u009e",
    "P\u0002\u0539\u009b\u0003\u0002\u0002\u0002\u053a\u053b\u0005\u00c0",
    "a\u0002\u053b\u009d\u0003\u0002\u0002\u0002\u053c\u053d\u0005\u00a0",
    "Q\u0002\u053d\u053e\u0005\u00c0a\u0002\u053e\u009f\u0003\u0002\u0002",
    "\u0002\u053f\u0540\u0005\u00c0a\u0002\u0540\u0541\u0007\u0019\u0002",
    "\u0002\u0541\u0543\u0003\u0002\u0002\u0002\u0542\u053f\u0003\u0002\u0002",
    "\u0002\u0543\u0546\u0003\u0002\u0002\u0002\u0544\u0542\u0003\u0002\u0002",
    "\u0002\u0544\u0545\u0003\u0002\u0002\u0002\u0545\u00a1\u0003\u0002\u0002",
    "\u0002\u0546\u0544\u0003\u0002\u0002\u0002\u0547\u0549\u0007\n\u0002",
    "\u0002\u0548\u054a\u0007~\u0002\u0002\u0549\u0548\u0003\u0002\u0002",
    "\u0002\u0549\u054a\u0003\u0002\u0002\u0002\u054a\u054b\u0003\u0002\u0002",
    "\u0002\u054b\u0554\u0005\u0090I\u0002\u054c\u054e\u0007~\u0002\u0002",
    "\u054d\u054c\u0003\u0002\u0002\u0002\u054d\u054e\u0003\u0002\u0002\u0002",
    "\u054e\u054f\u0003\u0002\u0002\u0002\u054f\u0551\u0007\r\u0002\u0002",
    "\u0550\u0552\u0007~\u0002\u0002\u0551\u0550\u0003\u0002\u0002\u0002",
    "\u0551\u0552\u0003\u0002\u0002\u0002\u0552\u0553\u0003\u0002\u0002\u0002",
    "\u0553\u0555\u0005d3\u0002\u0554\u054d\u0003\u0002\u0002\u0002\u0554",
    "\u0555\u0003\u0002\u0002\u0002\u0555\u0557\u0003\u0002\u0002\u0002\u0556",
    "\u0558\u0007~\u0002\u0002\u0557\u0556\u0003\u0002\u0002\u0002\u0557",
    "\u0558\u0003\u0002\u0002\u0002\u0558\u0559\u0003\u0002\u0002\u0002\u0559",
    "\u055a\u0007\u000b\u0002\u0002\u055a\u00a3\u0003\u0002\u0002\u0002\u055b",
    "\u055d\u0007\n\u0002\u0002\u055c\u055e\u0007~\u0002\u0002\u055d\u055c",
    "\u0003\u0002\u0002\u0002\u055d\u055e\u0003\u0002\u0002\u0002\u055e\u0567",
    "\u0003\u0002\u0002\u0002\u055f\u0561\u0005\u00acW\u0002\u0560\u0562",
    "\u0007~\u0002\u0002\u0561\u0560\u0003\u0002\u0002\u0002\u0561\u0562",
    "\u0003\u0002\u0002\u0002\u0562\u0563\u0003\u0002\u0002\u0002\u0563\u0565",
    "\u0007\u0005\u0002\u0002\u0564\u0566\u0007~\u0002\u0002\u0565\u0564",
    "\u0003\u0002\u0002\u0002\u0565\u0566\u0003\u0002\u0002\u0002\u0566\u0568",
    "\u0003\u0002\u0002\u0002\u0567\u055f\u0003\u0002\u0002\u0002\u0567\u0568",
    "\u0003\u0002\u0002\u0002\u0568\u0569\u0003\u0002\u0002\u0002\u0569\u056b",
    "\u0005\u008eH\u0002\u056a\u056c\u0007~\u0002\u0002\u056b\u056a\u0003",
    "\u0002\u0002\u0002\u056b\u056c\u0003\u0002\u0002\u0002\u056c\u0575\u0003",
    "\u0002\u0002\u0002\u056d\u056f\u0007J\u0002\u0002\u056e\u0570\u0007",
    "~\u0002\u0002\u056f\u056e\u0003\u0002\u0002\u0002\u056f\u0570\u0003",
    "\u0002\u0002\u0002\u0570\u0571\u0003\u0002\u0002\u0002\u0571\u0573\u0005",
    "d3\u0002\u0572\u0574\u0007~\u0002\u0002\u0573\u0572\u0003\u0002\u0002",
    "\u0002\u0573\u0574\u0003\u0002\u0002\u0002\u0574\u0576\u0003\u0002\u0002",
    "\u0002\u0575\u056d\u0003\u0002\u0002\u0002\u0575\u0576\u0003\u0002\u0002",
    "\u0002\u0576\u0577\u0003\u0002\u0002\u0002\u0577\u0579\u0007\r\u0002",
    "\u0002\u0578\u057a\u0007~\u0002\u0002\u0579\u0578\u0003\u0002\u0002",
    "\u0002\u0579\u057a\u0003\u0002\u0002\u0002\u057a\u057b\u0003\u0002\u0002",
    "\u0002\u057b\u057d\u0005d3\u0002\u057c\u057e\u0007~\u0002\u0002\u057d",
    "\u057c\u0003\u0002\u0002\u0002\u057d\u057e\u0003\u0002\u0002\u0002\u057e",
    "\u057f\u0003\u0002\u0002\u0002\u057f\u0580\u0007\u000b\u0002\u0002\u0580",
    "\u00a5\u0003\u0002\u0002\u0002\u0581\u0583\u0007\u0019\u0002\u0002\u0582",
    "\u0584\u0007~\u0002\u0002\u0583\u0582\u0003\u0002\u0002\u0002\u0583",
    "\u0584\u0003\u0002\u0002\u0002\u0584\u0585\u0003\u0002\u0002\u0002\u0585",
    "\u0586\u0005\u00b6\\\u0002\u0586\u00a7\u0003\u0002\u0002\u0002\u0587",
    "\u058c\u0007\\\u0002\u0002\u0588\u058a\u0007~\u0002\u0002\u0589\u0588",
    "\u0003\u0002\u0002\u0002\u0589\u058a\u0003\u0002\u0002\u0002\u058a\u058b",
    "\u0003\u0002\u0002\u0002\u058b\u058d\u0005\u00aaV\u0002\u058c\u0589",
    "\u0003\u0002\u0002\u0002\u058d\u058e\u0003\u0002\u0002\u0002\u058e\u058c",
    "\u0003\u0002\u0002\u0002\u058e\u058f\u0003\u0002\u0002\u0002\u058f\u059e",
    "\u0003\u0002\u0002\u0002\u0590\u0592\u0007\\\u0002\u0002\u0591\u0593",
    "\u0007~\u0002\u0002\u0592\u0591\u0003\u0002\u0002\u0002\u0592\u0593",
    "\u0003\u0002\u0002\u0002\u0593\u0594\u0003\u0002\u0002\u0002\u0594\u0599",
    "\u0005d3\u0002\u0595\u0597\u0007~\u0002\u0002\u0596\u0595\u0003\u0002",
    "\u0002\u0002\u0596\u0597\u0003\u0002\u0002\u0002\u0597\u0598\u0003\u0002",
    "\u0002\u0002\u0598\u059a\u0005\u00aaV\u0002\u0599\u0596\u0003\u0002",
    "\u0002\u0002\u059a\u059b\u0003\u0002\u0002\u0002\u059b\u0599\u0003\u0002",
    "\u0002\u0002\u059b\u059c\u0003\u0002\u0002\u0002\u059c\u059e\u0003\u0002",
    "\u0002\u0002\u059d\u0587\u0003\u0002\u0002\u0002\u059d\u0590\u0003\u0002",
    "\u0002\u0002\u059e\u05a7\u0003\u0002\u0002\u0002\u059f\u05a1\u0007~",
    "\u0002\u0002\u05a0\u059f\u0003\u0002\u0002\u0002\u05a0\u05a1\u0003\u0002",
    "\u0002\u0002\u05a1\u05a2\u0003\u0002\u0002\u0002\u05a2\u05a4\u0007]",
    "\u0002\u0002\u05a3\u05a5\u0007~\u0002\u0002\u05a4\u05a3\u0003\u0002",
    "\u0002\u0002\u05a4\u05a5\u0003\u0002\u0002\u0002\u05a5\u05a6\u0003\u0002",
    "\u0002\u0002\u05a6\u05a8\u0005d3\u0002\u05a7\u05a0\u0003\u0002\u0002",
    "\u0002\u05a7\u05a8\u0003\u0002\u0002\u0002\u05a8\u05aa\u0003\u0002\u0002",
    "\u0002\u05a9\u05ab\u0007~\u0002\u0002\u05aa\u05a9\u0003\u0002\u0002",
    "\u0002\u05aa\u05ab\u0003\u0002\u0002\u0002\u05ab\u05ac\u0003\u0002\u0002",
    "\u0002\u05ac\u05ad\u0007^\u0002\u0002\u05ad\u00a9\u0003\u0002\u0002",
    "\u0002\u05ae\u05b0\u0007_\u0002\u0002\u05af\u05b1\u0007~\u0002\u0002",
    "\u05b0\u05af\u0003\u0002\u0002\u0002\u05b0\u05b1\u0003\u0002\u0002\u0002",
    "\u05b1\u05b2\u0003\u0002\u0002\u0002\u05b2\u05b4\u0005d3\u0002\u05b3",
    "\u05b5\u0007~\u0002\u0002\u05b4\u05b3\u0003\u0002\u0002\u0002\u05b4",
    "\u05b5\u0003\u0002\u0002\u0002\u05b5\u05b6\u0003\u0002\u0002\u0002\u05b6",
    "\u05b8\u0007`\u0002\u0002\u05b7\u05b9\u0007~\u0002\u0002\u05b8\u05b7",
    "\u0003\u0002\u0002\u0002\u05b8\u05b9\u0003\u0002\u0002\u0002\u05b9\u05ba",
    "\u0003\u0002\u0002\u0002\u05ba\u05bb\u0005d3\u0002\u05bb\u00ab\u0003",
    "\u0002\u0002\u0002\u05bc\u05bd\u0005\u00c0a\u0002\u05bd\u00ad\u0003",
    "\u0002\u0002\u0002\u05be\u05c1\u0005\u00ba^\u0002\u05bf\u05c1\u0005",
    "\u00b8]\u0002\u05c0\u05be\u0003\u0002\u0002\u0002\u05c0\u05bf\u0003",
    "\u0002\u0002\u0002\u05c1\u00af\u0003\u0002\u0002\u0002\u05c2\u05c4\u0007",
    "\u001a\u0002\u0002\u05c3\u05c5\u0007~\u0002\u0002\u05c4\u05c3\u0003",
    "\u0002\u0002\u0002\u05c4\u05c5\u0003\u0002\u0002\u0002\u05c5\u05e7\u0003",
    "\u0002\u0002\u0002\u05c6\u05c8\u0005\u00b6\\\u0002\u05c7\u05c9\u0007",
    "~\u0002\u0002\u05c8\u05c7\u0003\u0002\u0002\u0002\u05c8\u05c9\u0003",
    "\u0002\u0002\u0002\u05c9\u05ca\u0003\u0002\u0002\u0002\u05ca\u05cc\u0007",
    "\f\u0002\u0002\u05cb\u05cd\u0007~\u0002\u0002\u05cc\u05cb\u0003\u0002",
    "\u0002\u0002\u05cc\u05cd\u0003\u0002\u0002\u0002\u05cd\u05ce\u0003\u0002",
    "\u0002\u0002\u05ce\u05d0\u0005d3\u0002\u05cf\u05d1\u0007~\u0002\u0002",
    "\u05d0\u05cf\u0003\u0002\u0002\u0002\u05d0\u05d1\u0003\u0002\u0002\u0002",
    "\u05d1\u05e4\u0003\u0002\u0002\u0002\u05d2\u05d4\u0007\u0004\u0002\u0002",
    "\u05d3\u05d5\u0007~\u0002\u0002\u05d4\u05d3\u0003\u0002\u0002\u0002",
    "\u05d4\u05d5\u0003\u0002\u0002\u0002\u05d5\u05d6\u0003\u0002\u0002\u0002",
    "\u05d6\u05d8\u0005\u00b6\\\u0002\u05d7\u05d9\u0007~\u0002\u0002\u05d8",
    "\u05d7\u0003\u0002\u0002\u0002\u05d8\u05d9\u0003\u0002\u0002\u0002\u05d9",
    "\u05da\u0003\u0002\u0002\u0002\u05da\u05dc\u0007\f\u0002\u0002\u05db",
    "\u05dd\u0007~\u0002\u0002\u05dc\u05db\u0003\u0002\u0002\u0002\u05dc",
    "\u05dd\u0003\u0002\u0002\u0002\u05dd\u05de\u0003\u0002\u0002\u0002\u05de",
    "\u05e0\u0005d3\u0002\u05df\u05e1\u0007~\u0002\u0002\u05e0\u05df\u0003",
    "\u0002\u0002\u0002\u05e0\u05e1\u0003\u0002\u0002\u0002\u05e1\u05e3\u0003",
    "\u0002\u0002\u0002\u05e2\u05d2\u0003\u0002\u0002\u0002\u05e3\u05e6\u0003",
    "\u0002\u0002\u0002\u05e4\u05e2\u0003\u0002\u0002\u0002\u05e4\u05e5\u0003",
    "\u0002\u0002\u0002\u05e5\u05e8\u0003\u0002\u0002\u0002\u05e6\u05e4\u0003",
    "\u0002\u0002\u0002\u05e7\u05c6\u0003\u0002\u0002\u0002\u05e7\u05e8\u0003",
    "\u0002\u0002\u0002\u05e8\u05e9\u0003\u0002\u0002\u0002\u05e9\u05ea\u0007",
    "\u001b\u0002\u0002\u05ea\u00b1\u0003\u0002\u0002\u0002\u05eb\u05ee\u0007",
    "\u001c\u0002\u0002\u05ec\u05ef\u0005\u00c0a\u0002\u05ed\u05ef\u0007",
    "c\u0002\u0002\u05ee\u05ec\u0003\u0002\u0002\u0002\u05ee\u05ed\u0003",
    "\u0002\u0002\u0002\u05ef\u00b3\u0003\u0002\u0002\u0002\u05f0\u05f5\u0005",
    "\u0082B\u0002\u05f1\u05f3\u0007~\u0002\u0002\u05f2\u05f1\u0003\u0002",
    "\u0002\u0002\u05f2\u05f3\u0003\u0002\u0002\u0002\u05f3\u05f4\u0003\u0002",
    "\u0002\u0002\u05f4\u05f6\u0005\u00a6T\u0002\u05f5\u05f2\u0003\u0002",
    "\u0002\u0002\u05f6\u05f7\u0003\u0002\u0002\u0002\u05f7\u05f5\u0003\u0002",
    "\u0002\u0002\u05f7\u05f8\u0003\u0002\u0002\u0002\u05f8\u00b5\u0003\u0002",
    "\u0002\u0002\u05f9\u05fa\u0005\u00bc_\u0002\u05fa\u00b7\u0003\u0002",
    "\u0002\u0002\u05fb\u05fc\t\u0005\u0002\u0002\u05fc\u00b9\u0003\u0002",
    "\u0002\u0002\u05fd\u05fe\t\u0006\u0002\u0002\u05fe\u00bb\u0003\u0002",
    "\u0002\u0002\u05ff\u0602\u0005\u00c0a\u0002\u0600\u0602\u0005\u00be",
    "`\u0002\u0601\u05ff\u0003\u0002\u0002\u0002\u0601\u0600\u0003\u0002",
    "\u0002\u0002\u0602\u00bd\u0003\u0002\u0002\u0002\u0603\u0604\t\u0007",
    "\u0002\u0002\u0604\u00bf\u0003\u0002\u0002\u0002\u0605\u0606\t\b\u0002",
    "\u0002\u0606\u00c1\u0003\u0002\u0002\u0002\u0607\u0608\t\t\u0002\u0002",
    "\u0608\u00c3\u0003\u0002\u0002\u0002\u0609\u060a\t\n\u0002\u0002\u060a",
    "\u00c5\u0003\u0002\u0002\u0002\u060b\u060c\t\u000b\u0002\u0002\u060c",
    "\u00c7\u0003\u0002\u0002\u0002\u011f\u00c9\u00cd\u00d0\u00d3\u00db\u00df",
    "\u00e4\u00eb\u00f0\u00f3\u00f7\u00fb\u00ff\u0105\u0109\u010e\u0113\u0117",
    "\u011a\u011c\u0120\u0124\u0129\u012d\u0132\u0136\u013f\u0144\u0148\u014c",
    "\u0150\u0153\u0157\u0161\u0168\u0175\u0179\u017f\u0186\u018b\u018f\u0195",
    "\u0199\u019f\u01a3\u01a9\u01ad\u01b1\u01b5\u01b9\u01bd\u01c2\u01c9\u01cd",
    "\u01d2\u01d9\u01df\u01e4\u01ea\u01f0\u01f5\u01f9\u01fe\u0201\u0204\u0207",
    "\u020e\u0214\u0217\u021c\u021f\u0223\u0226\u022e\u0232\u0236\u023a\u023e",
    "\u0243\u0248\u024c\u0251\u0254\u025d\u0266\u026b\u0278\u027b\u0283\u0287",
    "\u028c\u0291\u0295\u029a\u02a0\u02a5\u02ac\u02b0\u02b4\u02b6\u02ba\u02bc",
    "\u02c0\u02c2\u02c8\u02ce\u02d2\u02d5\u02d8\u02dc\u02e2\u02e6\u02e9\u02ec",
    "\u02f2\u02f5\u02f8\u02fc\u0302\u0305\u0308\u030c\u0310\u0314\u0316\u031a",
    "\u031c\u031f\u0323\u0325\u032b\u032f\u0333\u0337\u033a\u033f\u0344\u0349",
    "\u034e\u0354\u0358\u035a\u035e\u0362\u0364\u0366\u0375\u037f\u0389\u038e",
    "\u0392\u0399\u039e\u03a3\u03a7\u03ab\u03af\u03b2\u03b4\u03b9\u03bd\u03c1",
    "\u03c5\u03c9\u03cd\u03d0\u03d2\u03d7\u03db\u03e0\u03e5\u03e9\u03f2\u03f4",
    "\u03fa\u03fe\u0405\u0409\u040d\u0410\u041c\u041f\u042d\u0431\u0436\u043a",
    "\u043d\u0444\u0448\u044c\u0453\u0457\u045b\u0461\u0465\u0469\u046f\u0473",
    "\u0477\u047d\u0481\u0485\u048d\u0495\u049b\u049f\u04a3\u04a7\u04ab\u04ae",
    "\u04b4\u04b9\u04be\u04c3\u04c8\u04cd\u04d0\u04d4\u04d8\u04de\u04e3\u04e7",
    "\u04ea\u04f4\u04f8\u04fc\u04fe\u0502\u0506\u050a\u050e\u0511\u0519\u051d",
    "\u0521\u0525\u0529\u052d\u0531\u0534\u0544\u0549\u054d\u0551\u0554\u0557",
    "\u055d\u0561\u0565\u0567\u056b\u056f\u0573\u0575\u0579\u057d\u0583\u0589",
    "\u058e\u0592\u0596\u059b\u059d\u05a0\u05a4\u05a7\u05aa\u05b0\u05b4\u05b8",
    "\u05c0\u05c4\u05c8\u05cc\u05d0\u05d4\u05d8\u05dc\u05e0\u05e4\u05e7\u05ee",
    "\u05f2\u05f7\u0601"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "';'", "','", "'='", "'+='", "'*'", "'('", "')'", 
                     "'['", "']'", "':'", "'|'", "'..'", "'+'", "'-'", "'/'", 
                     "'%'", "'^'", "'<>'", "'<'", "'>'", "'<='", "'>='", 
                     "'.'", "'{'", "'}'", "'$'", "'\u27E8'", "'\u3008'", 
                     "'\uFE64'", "'\uFF1C'", "'\u27E9'", "'\u3009'", "'\uFE65'", 
                     "'\uFF1E'", "'\u00AD'", "'\u2010'", "'\u2011'", "'\u2012'", 
                     "'\u2013'", "'\u2014'", "'\u2015'", "'\u2212'", "'\uFE58'", 
                     "'\uFE63'", "'\uFF0D'", null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     "'0'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, "UNION", "ALL", "OPTIONAL", "MATCH", "UNWIND", 
                      "AS", "MERGE", "ON", "CREATE", "SET", "DETACH", "DELETE", 
                      "REMOVE", "CALL", "YIELD", "WITH", "DISTINCT", "RETURN", 
                      "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", 
                      "DESCENDING", "DESC", "WHERE", "OR", "XOR", "AND", 
                      "NOT", "IN", "STARTS", "ENDS", "CONTAINS", "IS", "NULL", 
                      "COUNT", "ANY", "NONE", "SINGLE", "TRUE", "FALSE", 
                      "EXISTS", "CASE", "ELSE", "END", "WHEN", "THEN", "StringLiteral", 
                      "HexInteger", "DecimalInteger", "OctalInteger", "HexLetter", 
                      "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", 
                      "OctDigit", "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "COMMENT", 
                      "LINE_COMMENT" ];

var ruleNames =  [ "oC_Cypher", "oC_Statement", "oC_Query", "oC_RegularQuery", 
                   "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
                   "oC_UpdatingClause", "oC_ReadingClause", "oC_Match", 
                   "oC_Unwind", "oC_Merge", "oC_MergeAction", "oC_Create", 
                   "oC_Set", "oC_SetItem", "oC_Delete", "oC_Remove", "oC_RemoveItem", 
                   "oC_InQueryCall", "oC_StandaloneCall", "oC_YieldItems", 
                   "oC_YieldItem", "oC_With", "oC_Return", "oC_ReturnBody", 
                   "oC_ReturnItems", "oC_ReturnItem", "oC_Order", "oC_Skip", 
                   "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", 
                   "oC_PatternPart", "oC_AnonymousPatternPart", "oC_PatternElement", 
                   "oC_NodePattern", "oC_PatternElementChain", "oC_RelationshipPattern", 
                   "oC_RelationshipDetail", "oC_Properties", "oC_RelationshipTypes", 
                   "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", 
                   "oC_RelTypeName", "oC_Expression", "oC_OrExpression", 
                   "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", 
                   "oC_ComparisonExpression", "oC_AddOrSubtractExpression", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_StringListNullOperatorExpression", 
                   "oC_ListOperatorExpression", "oC_StringOperatorExpression", 
                   "oC_NullOperatorExpression", "oC_PropertyOrLabelsExpression", 
                   "oC_Atom", "oC_Literal", "oC_BooleanLiteral", "oC_ListLiteral", 
                   "oC_PartialComparisonExpression", "oC_ParenthesizedExpression", 
                   "oC_RelationshipsPattern", "oC_FilterExpression", "oC_IdInColl", 
                   "oC_FunctionInvocation", "oC_FunctionName", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_ListComprehension", 
                   "oC_PatternComprehension", "oC_PropertyLookup", "oC_CaseExpression", 
                   "oC_CaseAlternatives", "oC_Variable", "oC_NumberLiteral", 
                   "oC_MapLiteral", "oC_Parameter", "oC_PropertyExpression", 
                   "oC_PropertyKeyName", "oC_IntegerLiteral", "oC_DoubleLiteral", 
                   "oC_SchemaName", "oC_ReservedWord", "oC_SymbolicName", 
                   "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash" ];

function CypherParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

CypherParser.prototype = Object.create(antlr4.Parser.prototype);
CypherParser.prototype.constructor = CypherParser;

Object.defineProperty(CypherParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

CypherParser.EOF = antlr4.Token.EOF;
CypherParser.T__0 = 1;
CypherParser.T__1 = 2;
CypherParser.T__2 = 3;
CypherParser.T__3 = 4;
CypherParser.T__4 = 5;
CypherParser.T__5 = 6;
CypherParser.T__6 = 7;
CypherParser.T__7 = 8;
CypherParser.T__8 = 9;
CypherParser.T__9 = 10;
CypherParser.T__10 = 11;
CypherParser.T__11 = 12;
CypherParser.T__12 = 13;
CypherParser.T__13 = 14;
CypherParser.T__14 = 15;
CypherParser.T__15 = 16;
CypherParser.T__16 = 17;
CypherParser.T__17 = 18;
CypherParser.T__18 = 19;
CypherParser.T__19 = 20;
CypherParser.T__20 = 21;
CypherParser.T__21 = 22;
CypherParser.T__22 = 23;
CypherParser.T__23 = 24;
CypherParser.T__24 = 25;
CypherParser.T__25 = 26;
CypherParser.T__26 = 27;
CypherParser.T__27 = 28;
CypherParser.T__28 = 29;
CypherParser.T__29 = 30;
CypherParser.T__30 = 31;
CypherParser.T__31 = 32;
CypherParser.T__32 = 33;
CypherParser.T__33 = 34;
CypherParser.T__34 = 35;
CypherParser.T__35 = 36;
CypherParser.T__36 = 37;
CypherParser.T__37 = 38;
CypherParser.T__38 = 39;
CypherParser.T__39 = 40;
CypherParser.T__40 = 41;
CypherParser.T__41 = 42;
CypherParser.T__42 = 43;
CypherParser.T__43 = 44;
CypherParser.T__44 = 45;
CypherParser.UNION = 46;
CypherParser.ALL = 47;
CypherParser.OPTIONAL = 48;
CypherParser.MATCH = 49;
CypherParser.UNWIND = 50;
CypherParser.AS = 51;
CypherParser.MERGE = 52;
CypherParser.ON = 53;
CypherParser.CREATE = 54;
CypherParser.SET = 55;
CypherParser.DETACH = 56;
CypherParser.DELETE = 57;
CypherParser.REMOVE = 58;
CypherParser.CALL = 59;
CypherParser.YIELD = 60;
CypherParser.WITH = 61;
CypherParser.DISTINCT = 62;
CypherParser.RETURN = 63;
CypherParser.ORDER = 64;
CypherParser.BY = 65;
CypherParser.L_SKIP = 66;
CypherParser.LIMIT = 67;
CypherParser.ASCENDING = 68;
CypherParser.ASC = 69;
CypherParser.DESCENDING = 70;
CypherParser.DESC = 71;
CypherParser.WHERE = 72;
CypherParser.OR = 73;
CypherParser.XOR = 74;
CypherParser.AND = 75;
CypherParser.NOT = 76;
CypherParser.IN = 77;
CypherParser.STARTS = 78;
CypherParser.ENDS = 79;
CypherParser.CONTAINS = 80;
CypherParser.IS = 81;
CypherParser.NULL = 82;
CypherParser.COUNT = 83;
CypherParser.ANY = 84;
CypherParser.NONE = 85;
CypherParser.SINGLE = 86;
CypherParser.TRUE = 87;
CypherParser.FALSE = 88;
CypherParser.EXISTS = 89;
CypherParser.CASE = 90;
CypherParser.ELSE = 91;
CypherParser.END = 92;
CypherParser.WHEN = 93;
CypherParser.THEN = 94;
CypherParser.StringLiteral = 95;
CypherParser.HexInteger = 96;
CypherParser.DecimalInteger = 97;
CypherParser.OctalInteger = 98;
CypherParser.HexLetter = 99;
CypherParser.HexDigit = 100;
CypherParser.Digit = 101;
CypherParser.NonZeroDigit = 102;
CypherParser.NonZeroOctDigit = 103;
CypherParser.OctDigit = 104;
CypherParser.ZeroDigit = 105;
CypherParser.ExponentDecimalReal = 106;
CypherParser.RegularDecimalReal = 107;
CypherParser.CONSTRAINT = 108;
CypherParser.DO = 109;
CypherParser.FOR = 110;
CypherParser.REQUIRE = 111;
CypherParser.UNIQUE = 112;
CypherParser.MANDATORY = 113;
CypherParser.SCALAR = 114;
CypherParser.OF = 115;
CypherParser.ADD = 116;
CypherParser.DROP = 117;
CypherParser.FILTER = 118;
CypherParser.EXTRACT = 119;
CypherParser.UnescapedSymbolicName = 120;
CypherParser.IdentifierStart = 121;
CypherParser.IdentifierPart = 122;
CypherParser.EscapedSymbolicName = 123;
CypherParser.SP = 124;
CypherParser.WHITESPACE = 125;
CypherParser.COMMENT = 126;
CypherParser.LINE_COMMENT = 127;

CypherParser.RULE_oC_Cypher = 0;
CypherParser.RULE_oC_Statement = 1;
CypherParser.RULE_oC_Query = 2;
CypherParser.RULE_oC_RegularQuery = 3;
CypherParser.RULE_oC_Union = 4;
CypherParser.RULE_oC_SingleQuery = 5;
CypherParser.RULE_oC_SinglePartQuery = 6;
CypherParser.RULE_oC_MultiPartQuery = 7;
CypherParser.RULE_oC_UpdatingClause = 8;
CypherParser.RULE_oC_ReadingClause = 9;
CypherParser.RULE_oC_Match = 10;
CypherParser.RULE_oC_Unwind = 11;
CypherParser.RULE_oC_Merge = 12;
CypherParser.RULE_oC_MergeAction = 13;
CypherParser.RULE_oC_Create = 14;
CypherParser.RULE_oC_Set = 15;
CypherParser.RULE_oC_SetItem = 16;
CypherParser.RULE_oC_Delete = 17;
CypherParser.RULE_oC_Remove = 18;
CypherParser.RULE_oC_RemoveItem = 19;
CypherParser.RULE_oC_InQueryCall = 20;
CypherParser.RULE_oC_StandaloneCall = 21;
CypherParser.RULE_oC_YieldItems = 22;
CypherParser.RULE_oC_YieldItem = 23;
CypherParser.RULE_oC_With = 24;
CypherParser.RULE_oC_Return = 25;
CypherParser.RULE_oC_ReturnBody = 26;
CypherParser.RULE_oC_ReturnItems = 27;
CypherParser.RULE_oC_ReturnItem = 28;
CypherParser.RULE_oC_Order = 29;
CypherParser.RULE_oC_Skip = 30;
CypherParser.RULE_oC_Limit = 31;
CypherParser.RULE_oC_SortItem = 32;
CypherParser.RULE_oC_Where = 33;
CypherParser.RULE_oC_Pattern = 34;
CypherParser.RULE_oC_PatternPart = 35;
CypherParser.RULE_oC_AnonymousPatternPart = 36;
CypherParser.RULE_oC_PatternElement = 37;
CypherParser.RULE_oC_NodePattern = 38;
CypherParser.RULE_oC_PatternElementChain = 39;
CypherParser.RULE_oC_RelationshipPattern = 40;
CypherParser.RULE_oC_RelationshipDetail = 41;
CypherParser.RULE_oC_Properties = 42;
CypherParser.RULE_oC_RelationshipTypes = 43;
CypherParser.RULE_oC_NodeLabels = 44;
CypherParser.RULE_oC_NodeLabel = 45;
CypherParser.RULE_oC_RangeLiteral = 46;
CypherParser.RULE_oC_LabelName = 47;
CypherParser.RULE_oC_RelTypeName = 48;
CypherParser.RULE_oC_Expression = 49;
CypherParser.RULE_oC_OrExpression = 50;
CypherParser.RULE_oC_XorExpression = 51;
CypherParser.RULE_oC_AndExpression = 52;
CypherParser.RULE_oC_NotExpression = 53;
CypherParser.RULE_oC_ComparisonExpression = 54;
CypherParser.RULE_oC_AddOrSubtractExpression = 55;
CypherParser.RULE_oC_MultiplyDivideModuloExpression = 56;
CypherParser.RULE_oC_PowerOfExpression = 57;
CypherParser.RULE_oC_UnaryAddOrSubtractExpression = 58;
CypherParser.RULE_oC_StringListNullOperatorExpression = 59;
CypherParser.RULE_oC_ListOperatorExpression = 60;
CypherParser.RULE_oC_StringOperatorExpression = 61;
CypherParser.RULE_oC_NullOperatorExpression = 62;
CypherParser.RULE_oC_PropertyOrLabelsExpression = 63;
CypherParser.RULE_oC_Atom = 64;
CypherParser.RULE_oC_Literal = 65;
CypherParser.RULE_oC_BooleanLiteral = 66;
CypherParser.RULE_oC_ListLiteral = 67;
CypherParser.RULE_oC_PartialComparisonExpression = 68;
CypherParser.RULE_oC_ParenthesizedExpression = 69;
CypherParser.RULE_oC_RelationshipsPattern = 70;
CypherParser.RULE_oC_FilterExpression = 71;
CypherParser.RULE_oC_IdInColl = 72;
CypherParser.RULE_oC_FunctionInvocation = 73;
CypherParser.RULE_oC_FunctionName = 74;
CypherParser.RULE_oC_ExplicitProcedureInvocation = 75;
CypherParser.RULE_oC_ImplicitProcedureInvocation = 76;
CypherParser.RULE_oC_ProcedureResultField = 77;
CypherParser.RULE_oC_ProcedureName = 78;
CypherParser.RULE_oC_Namespace = 79;
CypherParser.RULE_oC_ListComprehension = 80;
CypherParser.RULE_oC_PatternComprehension = 81;
CypherParser.RULE_oC_PropertyLookup = 82;
CypherParser.RULE_oC_CaseExpression = 83;
CypherParser.RULE_oC_CaseAlternatives = 84;
CypherParser.RULE_oC_Variable = 85;
CypherParser.RULE_oC_NumberLiteral = 86;
CypherParser.RULE_oC_MapLiteral = 87;
CypherParser.RULE_oC_Parameter = 88;
CypherParser.RULE_oC_PropertyExpression = 89;
CypherParser.RULE_oC_PropertyKeyName = 90;
CypherParser.RULE_oC_IntegerLiteral = 91;
CypherParser.RULE_oC_DoubleLiteral = 92;
CypherParser.RULE_oC_SchemaName = 93;
CypherParser.RULE_oC_ReservedWord = 94;
CypherParser.RULE_oC_SymbolicName = 95;
CypherParser.RULE_oC_LeftArrowHead = 96;
CypherParser.RULE_oC_RightArrowHead = 97;
CypherParser.RULE_oC_Dash = 98;

function OC_CypherContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Cypher;
    return this;
}

OC_CypherContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_CypherContext.prototype.constructor = OC_CypherContext;

OC_CypherContext.prototype.oC_Statement = function() {
    return this.getTypedRuleContext(OC_StatementContext,0);
};

OC_CypherContext.prototype.EOF = function() {
    return this.getToken(CypherParser.EOF, 0);
};

OC_CypherContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_CypherContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Cypher(this);
	}
};

OC_CypherContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Cypher(this);
	}
};




CypherParser.OC_CypherContext = OC_CypherContext;

CypherParser.prototype.oC_Cypher = function() {

    var localctx = new OC_CypherContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CypherParser.RULE_oC_Cypher);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 199;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 198;
            this.match(CypherParser.SP);
        }

        this.state = 201;
        this.oC_Statement();
        this.state = 206;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        if(la_===1) {
            this.state = 203;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 202;
                this.match(CypherParser.SP);
            }

            this.state = 205;
            this.match(CypherParser.T__0);

        }
        this.state = 209;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 208;
            this.match(CypherParser.SP);
        }

        this.state = 211;
        this.match(CypherParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Statement;
    return this;
}

OC_StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_StatementContext.prototype.constructor = OC_StatementContext;

OC_StatementContext.prototype.oC_Query = function() {
    return this.getTypedRuleContext(OC_QueryContext,0);
};

OC_StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Statement(this);
	}
};

OC_StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Statement(this);
	}
};




CypherParser.OC_StatementContext = OC_StatementContext;

CypherParser.prototype.oC_Statement = function() {

    var localctx = new OC_StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CypherParser.RULE_oC_Statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 213;
        this.oC_Query();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_QueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Query;
    return this;
}

OC_QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_QueryContext.prototype.constructor = OC_QueryContext;

OC_QueryContext.prototype.oC_RegularQuery = function() {
    return this.getTypedRuleContext(OC_RegularQueryContext,0);
};

OC_QueryContext.prototype.oC_StandaloneCall = function() {
    return this.getTypedRuleContext(OC_StandaloneCallContext,0);
};

OC_QueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Query(this);
	}
};

OC_QueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Query(this);
	}
};




CypherParser.OC_QueryContext = OC_QueryContext;

CypherParser.prototype.oC_Query = function() {

    var localctx = new OC_QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CypherParser.RULE_oC_Query);
    try {
        this.state = 217;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 215;
            this.oC_RegularQuery();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 216;
            this.oC_StandaloneCall();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_RegularQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_RegularQuery;
    return this;
}

OC_RegularQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_RegularQueryContext.prototype.constructor = OC_RegularQueryContext;

OC_RegularQueryContext.prototype.oC_SingleQuery = function() {
    return this.getTypedRuleContext(OC_SingleQueryContext,0);
};

OC_RegularQueryContext.prototype.oC_Union = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_UnionContext);
    } else {
        return this.getTypedRuleContext(OC_UnionContext,i);
    }
};

OC_RegularQueryContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_RegularQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_RegularQuery(this);
	}
};

OC_RegularQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_RegularQuery(this);
	}
};




CypherParser.OC_RegularQueryContext = OC_RegularQueryContext;

CypherParser.prototype.oC_RegularQuery = function() {

    var localctx = new OC_RegularQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CypherParser.RULE_oC_RegularQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 219;
        this.oC_SingleQuery();
        this.state = 226;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 221;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 220;
                    this.match(CypherParser.SP);
                }

                this.state = 223;
                this.oC_Union(); 
            }
            this.state = 228;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_UnionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Union;
    return this;
}

OC_UnionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_UnionContext.prototype.constructor = OC_UnionContext;

OC_UnionContext.prototype.UNION = function() {
    return this.getToken(CypherParser.UNION, 0);
};

OC_UnionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_UnionContext.prototype.ALL = function() {
    return this.getToken(CypherParser.ALL, 0);
};

OC_UnionContext.prototype.oC_SingleQuery = function() {
    return this.getTypedRuleContext(OC_SingleQueryContext,0);
};

OC_UnionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Union(this);
	}
};

OC_UnionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Union(this);
	}
};




CypherParser.OC_UnionContext = OC_UnionContext;

CypherParser.prototype.oC_Union = function() {

    var localctx = new OC_UnionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CypherParser.RULE_oC_Union);
    var _la = 0; // Token type
    try {
        this.state = 241;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 229;
            this.match(CypherParser.UNION);
            this.state = 230;
            this.match(CypherParser.SP);
            this.state = 231;
            this.match(CypherParser.ALL);
            this.state = 233;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 232;
                this.match(CypherParser.SP);
            }

            this.state = 235;
            this.oC_SingleQuery();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 236;
            this.match(CypherParser.UNION);
            this.state = 238;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 237;
                this.match(CypherParser.SP);
            }

            this.state = 240;
            this.oC_SingleQuery();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_SingleQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_SingleQuery;
    return this;
}

OC_SingleQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_SingleQueryContext.prototype.constructor = OC_SingleQueryContext;

OC_SingleQueryContext.prototype.oC_SinglePartQuery = function() {
    return this.getTypedRuleContext(OC_SinglePartQueryContext,0);
};

OC_SingleQueryContext.prototype.oC_MultiPartQuery = function() {
    return this.getTypedRuleContext(OC_MultiPartQueryContext,0);
};

OC_SingleQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_SingleQuery(this);
	}
};

OC_SingleQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_SingleQuery(this);
	}
};




CypherParser.OC_SingleQueryContext = OC_SingleQueryContext;

CypherParser.prototype.oC_SingleQuery = function() {

    var localctx = new OC_SingleQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, CypherParser.RULE_oC_SingleQuery);
    try {
        this.state = 245;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 243;
            this.oC_SinglePartQuery();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 244;
            this.oC_MultiPartQuery();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_SinglePartQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_SinglePartQuery;
    return this;
}

OC_SinglePartQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_SinglePartQueryContext.prototype.constructor = OC_SinglePartQueryContext;

OC_SinglePartQueryContext.prototype.oC_Return = function() {
    return this.getTypedRuleContext(OC_ReturnContext,0);
};

OC_SinglePartQueryContext.prototype.oC_ReadingClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_ReadingClauseContext);
    } else {
        return this.getTypedRuleContext(OC_ReadingClauseContext,i);
    }
};

OC_SinglePartQueryContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_SinglePartQueryContext.prototype.oC_UpdatingClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_UpdatingClauseContext);
    } else {
        return this.getTypedRuleContext(OC_UpdatingClauseContext,i);
    }
};

OC_SinglePartQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_SinglePartQuery(this);
	}
};

OC_SinglePartQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_SinglePartQuery(this);
	}
};




CypherParser.OC_SinglePartQueryContext = OC_SinglePartQueryContext;

CypherParser.prototype.oC_SinglePartQuery = function() {

    var localctx = new OC_SinglePartQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, CypherParser.RULE_oC_SinglePartQuery);
    var _la = 0; // Token type
    try {
        this.state = 282;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 253;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (CypherParser.OPTIONAL - 48)) | (1 << (CypherParser.MATCH - 48)) | (1 << (CypherParser.UNWIND - 48)) | (1 << (CypherParser.CALL - 48)))) !== 0)) {
                this.state = 247;
                this.oC_ReadingClause();
                this.state = 249;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 248;
                    this.match(CypherParser.SP);
                }

                this.state = 255;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 256;
            this.oC_Return();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 263;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (CypherParser.OPTIONAL - 48)) | (1 << (CypherParser.MATCH - 48)) | (1 << (CypherParser.UNWIND - 48)) | (1 << (CypherParser.CALL - 48)))) !== 0)) {
                this.state = 257;
                this.oC_ReadingClause();
                this.state = 259;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 258;
                    this.match(CypherParser.SP);
                }

                this.state = 265;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 266;
            this.oC_UpdatingClause();
            this.state = 273;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,16,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 268;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 267;
                        this.match(CypherParser.SP);
                    }

                    this.state = 270;
                    this.oC_UpdatingClause(); 
                }
                this.state = 275;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,16,this._ctx);
            }

            this.state = 280;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
            if(la_===1) {
                this.state = 277;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 276;
                    this.match(CypherParser.SP);
                }

                this.state = 279;
                this.oC_Return();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_MultiPartQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_MultiPartQuery;
    return this;
}

OC_MultiPartQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_MultiPartQueryContext.prototype.constructor = OC_MultiPartQueryContext;

OC_MultiPartQueryContext.prototype.oC_SinglePartQuery = function() {
    return this.getTypedRuleContext(OC_SinglePartQueryContext,0);
};

OC_MultiPartQueryContext.prototype.oC_With = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_WithContext);
    } else {
        return this.getTypedRuleContext(OC_WithContext,i);
    }
};

OC_MultiPartQueryContext.prototype.oC_ReadingClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_ReadingClauseContext);
    } else {
        return this.getTypedRuleContext(OC_ReadingClauseContext,i);
    }
};

OC_MultiPartQueryContext.prototype.oC_UpdatingClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_UpdatingClauseContext);
    } else {
        return this.getTypedRuleContext(OC_UpdatingClauseContext,i);
    }
};

OC_MultiPartQueryContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_MultiPartQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_MultiPartQuery(this);
	}
};

OC_MultiPartQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_MultiPartQuery(this);
	}
};




CypherParser.OC_MultiPartQueryContext = OC_MultiPartQueryContext;

CypherParser.prototype.oC_MultiPartQuery = function() {

    var localctx = new OC_MultiPartQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CypherParser.RULE_oC_MultiPartQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 306; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 290;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		while(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (CypherParser.OPTIONAL - 48)) | (1 << (CypherParser.MATCH - 48)) | (1 << (CypherParser.UNWIND - 48)) | (1 << (CypherParser.CALL - 48)))) !== 0)) {
        		    this.state = 284;
        		    this.oC_ReadingClause();
        		    this.state = 286;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		    if(_la===CypherParser.SP) {
        		        this.state = 285;
        		        this.match(CypherParser.SP);
        		    }

        		    this.state = 292;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		}
        		this.state = 299;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		while(((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (CypherParser.MERGE - 52)) | (1 << (CypherParser.CREATE - 52)) | (1 << (CypherParser.SET - 52)) | (1 << (CypherParser.DETACH - 52)) | (1 << (CypherParser.DELETE - 52)) | (1 << (CypherParser.REMOVE - 52)))) !== 0)) {
        		    this.state = 293;
        		    this.oC_UpdatingClause();
        		    this.state = 295;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		    if(_la===CypherParser.SP) {
        		        this.state = 294;
        		        this.match(CypherParser.SP);
        		    }

        		    this.state = 301;
        		    this._errHandler.sync(this);
        		    _la = this._input.LA(1);
        		}
        		this.state = 302;
        		this.oC_With();
        		this.state = 304;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		if(_la===CypherParser.SP) {
        		    this.state = 303;
        		    this.match(CypherParser.SP);
        		}

        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 308; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,25, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 310;
        this.oC_SinglePartQuery();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_UpdatingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_UpdatingClause;
    return this;
}

OC_UpdatingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_UpdatingClauseContext.prototype.constructor = OC_UpdatingClauseContext;

OC_UpdatingClauseContext.prototype.oC_Create = function() {
    return this.getTypedRuleContext(OC_CreateContext,0);
};

OC_UpdatingClauseContext.prototype.oC_Merge = function() {
    return this.getTypedRuleContext(OC_MergeContext,0);
};

OC_UpdatingClauseContext.prototype.oC_Delete = function() {
    return this.getTypedRuleContext(OC_DeleteContext,0);
};

OC_UpdatingClauseContext.prototype.oC_Set = function() {
    return this.getTypedRuleContext(OC_SetContext,0);
};

OC_UpdatingClauseContext.prototype.oC_Remove = function() {
    return this.getTypedRuleContext(OC_RemoveContext,0);
};

OC_UpdatingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_UpdatingClause(this);
	}
};

OC_UpdatingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_UpdatingClause(this);
	}
};




CypherParser.OC_UpdatingClauseContext = OC_UpdatingClauseContext;

CypherParser.prototype.oC_UpdatingClause = function() {

    var localctx = new OC_UpdatingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CypherParser.RULE_oC_UpdatingClause);
    try {
        this.state = 317;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.CREATE:
            this.enterOuterAlt(localctx, 1);
            this.state = 312;
            this.oC_Create();
            break;
        case CypherParser.MERGE:
            this.enterOuterAlt(localctx, 2);
            this.state = 313;
            this.oC_Merge();
            break;
        case CypherParser.DETACH:
        case CypherParser.DELETE:
            this.enterOuterAlt(localctx, 3);
            this.state = 314;
            this.oC_Delete();
            break;
        case CypherParser.SET:
            this.enterOuterAlt(localctx, 4);
            this.state = 315;
            this.oC_Set();
            break;
        case CypherParser.REMOVE:
            this.enterOuterAlt(localctx, 5);
            this.state = 316;
            this.oC_Remove();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_ReadingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ReadingClause;
    return this;
}

OC_ReadingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_ReadingClauseContext.prototype.constructor = OC_ReadingClauseContext;

OC_ReadingClauseContext.prototype.oC_Match = function() {
    return this.getTypedRuleContext(OC_MatchContext,0);
};

OC_ReadingClauseContext.prototype.oC_Unwind = function() {
    return this.getTypedRuleContext(OC_UnwindContext,0);
};

OC_ReadingClauseContext.prototype.oC_InQueryCall = function() {
    return this.getTypedRuleContext(OC_InQueryCallContext,0);
};

OC_ReadingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_ReadingClause(this);
	}
};

OC_ReadingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_ReadingClause(this);
	}
};




CypherParser.OC_ReadingClauseContext = OC_ReadingClauseContext;

CypherParser.prototype.oC_ReadingClause = function() {

    var localctx = new OC_ReadingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CypherParser.RULE_oC_ReadingClause);
    try {
        this.state = 322;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
            this.enterOuterAlt(localctx, 1);
            this.state = 319;
            this.oC_Match();
            break;
        case CypherParser.UNWIND:
            this.enterOuterAlt(localctx, 2);
            this.state = 320;
            this.oC_Unwind();
            break;
        case CypherParser.CALL:
            this.enterOuterAlt(localctx, 3);
            this.state = 321;
            this.oC_InQueryCall();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_MatchContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Match;
    return this;
}

OC_MatchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_MatchContext.prototype.constructor = OC_MatchContext;

OC_MatchContext.prototype.MATCH = function() {
    return this.getToken(CypherParser.MATCH, 0);
};

OC_MatchContext.prototype.oC_Pattern = function() {
    return this.getTypedRuleContext(OC_PatternContext,0);
};

OC_MatchContext.prototype.OPTIONAL = function() {
    return this.getToken(CypherParser.OPTIONAL, 0);
};

OC_MatchContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_MatchContext.prototype.oC_Where = function() {
    return this.getTypedRuleContext(OC_WhereContext,0);
};

OC_MatchContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Match(this);
	}
};

OC_MatchContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Match(this);
	}
};




CypherParser.OC_MatchContext = OC_MatchContext;

CypherParser.prototype.oC_Match = function() {

    var localctx = new OC_MatchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, CypherParser.RULE_oC_Match);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 326;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.OPTIONAL) {
            this.state = 324;
            this.match(CypherParser.OPTIONAL);
            this.state = 325;
            this.match(CypherParser.SP);
        }

        this.state = 328;
        this.match(CypherParser.MATCH);
        this.state = 330;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 329;
            this.match(CypherParser.SP);
        }

        this.state = 332;
        this.oC_Pattern();
        this.state = 337;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        if(la_===1) {
            this.state = 334;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 333;
                this.match(CypherParser.SP);
            }

            this.state = 336;
            this.oC_Where();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_UnwindContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Unwind;
    return this;
}

OC_UnwindContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_UnwindContext.prototype.constructor = OC_UnwindContext;

OC_UnwindContext.prototype.UNWIND = function() {
    return this.getToken(CypherParser.UNWIND, 0);
};

OC_UnwindContext.prototype.oC_Expression = function() {
    return this.getTypedRuleContext(OC_ExpressionContext,0);
};

OC_UnwindContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_UnwindContext.prototype.AS = function() {
    return this.getToken(CypherParser.AS, 0);
};

OC_UnwindContext.prototype.oC_Variable = function() {
    return this.getTypedRuleContext(OC_VariableContext,0);
};

OC_UnwindContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Unwind(this);
	}
};

OC_UnwindContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Unwind(this);
	}
};




CypherParser.OC_UnwindContext = OC_UnwindContext;

CypherParser.prototype.oC_Unwind = function() {

    var localctx = new OC_UnwindContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, CypherParser.RULE_oC_Unwind);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 339;
        this.match(CypherParser.UNWIND);
        this.state = 341;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 340;
            this.match(CypherParser.SP);
        }

        this.state = 343;
        this.oC_Expression();
        this.state = 344;
        this.match(CypherParser.SP);
        this.state = 345;
        this.match(CypherParser.AS);
        this.state = 346;
        this.match(CypherParser.SP);
        this.state = 347;
        this.oC_Variable();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_MergeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Merge;
    return this;
}

OC_MergeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_MergeContext.prototype.constructor = OC_MergeContext;

OC_MergeContext.prototype.MERGE = function() {
    return this.getToken(CypherParser.MERGE, 0);
};

OC_MergeContext.prototype.oC_PatternPart = function() {
    return this.getTypedRuleContext(OC_PatternPartContext,0);
};

OC_MergeContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_MergeContext.prototype.oC_MergeAction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_MergeActionContext);
    } else {
        return this.getTypedRuleContext(OC_MergeActionContext,i);
    }
};

OC_MergeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Merge(this);
	}
};

OC_MergeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Merge(this);
	}
};




CypherParser.OC_MergeContext = OC_MergeContext;

CypherParser.prototype.oC_Merge = function() {

    var localctx = new OC_MergeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CypherParser.RULE_oC_Merge);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 349;
        this.match(CypherParser.MERGE);
        this.state = 351;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 350;
            this.match(CypherParser.SP);
        }

        this.state = 353;
        this.oC_PatternPart();
        this.state = 358;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 354;
                this.match(CypherParser.SP);
                this.state = 355;
                this.oC_MergeAction(); 
            }
            this.state = 360;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_MergeActionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_MergeAction;
    return this;
}

OC_MergeActionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_MergeActionContext.prototype.constructor = OC_MergeActionContext;

OC_MergeActionContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

OC_MergeActionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_MergeActionContext.prototype.MATCH = function() {
    return this.getToken(CypherParser.MATCH, 0);
};

OC_MergeActionContext.prototype.oC_Set = function() {
    return this.getTypedRuleContext(OC_SetContext,0);
};

OC_MergeActionContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

OC_MergeActionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_MergeAction(this);
	}
};

OC_MergeActionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_MergeAction(this);
	}
};




CypherParser.OC_MergeActionContext = OC_MergeActionContext;

CypherParser.prototype.oC_MergeAction = function() {

    var localctx = new OC_MergeActionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CypherParser.RULE_oC_MergeAction);
    try {
        this.state = 371;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 361;
            this.match(CypherParser.ON);
            this.state = 362;
            this.match(CypherParser.SP);
            this.state = 363;
            this.match(CypherParser.MATCH);
            this.state = 364;
            this.match(CypherParser.SP);
            this.state = 365;
            this.oC_Set();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 366;
            this.match(CypherParser.ON);
            this.state = 367;
            this.match(CypherParser.SP);
            this.state = 368;
            this.match(CypherParser.CREATE);
            this.state = 369;
            this.match(CypherParser.SP);
            this.state = 370;
            this.oC_Set();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_CreateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Create;
    return this;
}

OC_CreateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_CreateContext.prototype.constructor = OC_CreateContext;

OC_CreateContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

OC_CreateContext.prototype.oC_Pattern = function() {
    return this.getTypedRuleContext(OC_PatternContext,0);
};

OC_CreateContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

OC_CreateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Create(this);
	}
};

OC_CreateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Create(this);
	}
};




CypherParser.OC_CreateContext = OC_CreateContext;

CypherParser.prototype.oC_Create = function() {

    var localctx = new OC_CreateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CypherParser.RULE_oC_Create);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 373;
        this.match(CypherParser.CREATE);
        this.state = 375;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 374;
            this.match(CypherParser.SP);
        }

        this.state = 377;
        this.oC_Pattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_SetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Set;
    return this;
}

OC_SetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_SetContext.prototype.constructor = OC_SetContext;

OC_SetContext.prototype.SET = function() {
    return this.getToken(CypherParser.SET, 0);
};

OC_SetContext.prototype.oC_SetItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_SetItemContext);
    } else {
        return this.getTypedRuleContext(OC_SetItemContext,i);
    }
};

OC_SetContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

OC_SetContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Set(this);
	}
};

OC_SetContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Set(this);
	}
};




CypherParser.OC_SetContext = OC_SetContext;

CypherParser.prototype.oC_Set = function() {

    var localctx = new OC_SetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, CypherParser.RULE_oC_Set);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 379;
        this.match(CypherParser.SET);
        this.state = 381;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 380;
            this.match(CypherParser.SP);
        }

        this.state = 383;
        this.oC_SetItem();
        this.state = 388;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CypherParser.T__1) {
            this.state = 384;
            this.match(CypherParser.T__1);
            this.state = 385;
            this.oC_SetItem();
            this.state = 390;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_SetItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_SetItem;
    return this;
}

OC_SetItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_SetItemContext.prototype.constructor = OC_SetItemContext;

OC_SetItemContext.prototype.oC_PropertyExpression = function() {
    return this.getTypedRuleContext(OC_PropertyExpressionContext,0);
};

OC_SetItemContext.prototype.oC_Expression = function() {
    return this.getTypedRuleContext(OC_ExpressionContext,0);
};

OC_SetItemContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_SetItemContext.prototype.oC_Variable = function() {
    return this.getTypedRuleContext(OC_VariableContext,0);
};

OC_SetItemContext.prototype.oC_NodeLabels = function() {
    return this.getTypedRuleContext(OC_NodeLabelsContext,0);
};

OC_SetItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_SetItem(this);
	}
};

OC_SetItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_SetItem(this);
	}
};




CypherParser.OC_SetItemContext = OC_SetItemContext;

CypherParser.prototype.oC_SetItem = function() {

    var localctx = new OC_SetItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CypherParser.RULE_oC_SetItem);
    var _la = 0; // Token type
    try {
        this.state = 427;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 391;
            this.oC_PropertyExpression();
            this.state = 393;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 392;
                this.match(CypherParser.SP);
            }

            this.state = 395;
            this.match(CypherParser.T__2);
            this.state = 397;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 396;
                this.match(CypherParser.SP);
            }

            this.state = 399;
            this.oC_Expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 401;
            this.oC_Variable();
            this.state = 403;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 402;
                this.match(CypherParser.SP);
            }

            this.state = 405;
            this.match(CypherParser.T__2);
            this.state = 407;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 406;
                this.match(CypherParser.SP);
            }

            this.state = 409;
            this.oC_Expression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 411;
            this.oC_Variable();
            this.state = 413;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 412;
                this.match(CypherParser.SP);
            }

            this.state = 415;
            this.match(CypherParser.T__3);
            this.state = 417;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 416;
                this.match(CypherParser.SP);
            }

            this.state = 419;
            this.oC_Expression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 421;
            this.oC_Variable();
            this.state = 423;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 422;
                this.match(CypherParser.SP);
            }

            this.state = 425;
            this.oC_NodeLabels();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_DeleteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Delete;
    return this;
}

OC_DeleteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_DeleteContext.prototype.constructor = OC_DeleteContext;

OC_DeleteContext.prototype.DELETE = function() {
    return this.getToken(CypherParser.DELETE, 0);
};

OC_DeleteContext.prototype.oC_Expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_ExpressionContext);
    } else {
        return this.getTypedRuleContext(OC_ExpressionContext,i);
    }
};

OC_DeleteContext.prototype.DETACH = function() {
    return this.getToken(CypherParser.DETACH, 0);
};

OC_DeleteContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_DeleteContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Delete(this);
	}
};

OC_DeleteContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Delete(this);
	}
};




CypherParser.OC_DeleteContext = OC_DeleteContext;

CypherParser.prototype.oC_Delete = function() {

    var localctx = new OC_DeleteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, CypherParser.RULE_oC_Delete);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 431;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.DETACH) {
            this.state = 429;
            this.match(CypherParser.DETACH);
            this.state = 430;
            this.match(CypherParser.SP);
        }

        this.state = 433;
        this.match(CypherParser.DELETE);
        this.state = 435;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 434;
            this.match(CypherParser.SP);
        }

        this.state = 437;
        this.oC_Expression();
        this.state = 448;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 439;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 438;
                    this.match(CypherParser.SP);
                }

                this.state = 441;
                this.match(CypherParser.T__1);
                this.state = 443;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 442;
                    this.match(CypherParser.SP);
                }

                this.state = 445;
                this.oC_Expression(); 
            }
            this.state = 450;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_RemoveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Remove;
    return this;
}

OC_RemoveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_RemoveContext.prototype.constructor = OC_RemoveContext;

OC_RemoveContext.prototype.REMOVE = function() {
    return this.getToken(CypherParser.REMOVE, 0);
};

OC_RemoveContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_RemoveContext.prototype.oC_RemoveItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_RemoveItemContext);
    } else {
        return this.getTypedRuleContext(OC_RemoveItemContext,i);
    }
};

OC_RemoveContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Remove(this);
	}
};

OC_RemoveContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Remove(this);
	}
};




CypherParser.OC_RemoveContext = OC_RemoveContext;

CypherParser.prototype.oC_Remove = function() {

    var localctx = new OC_RemoveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, CypherParser.RULE_oC_Remove);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 451;
        this.match(CypherParser.REMOVE);
        this.state = 452;
        this.match(CypherParser.SP);
        this.state = 453;
        this.oC_RemoveItem();
        this.state = 464;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 455;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 454;
                    this.match(CypherParser.SP);
                }

                this.state = 457;
                this.match(CypherParser.T__1);
                this.state = 459;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 458;
                    this.match(CypherParser.SP);
                }

                this.state = 461;
                this.oC_RemoveItem(); 
            }
            this.state = 466;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_RemoveItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_RemoveItem;
    return this;
}

OC_RemoveItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_RemoveItemContext.prototype.constructor = OC_RemoveItemContext;

OC_RemoveItemContext.prototype.oC_Variable = function() {
    return this.getTypedRuleContext(OC_VariableContext,0);
};

OC_RemoveItemContext.prototype.oC_NodeLabels = function() {
    return this.getTypedRuleContext(OC_NodeLabelsContext,0);
};

OC_RemoveItemContext.prototype.oC_PropertyExpression = function() {
    return this.getTypedRuleContext(OC_PropertyExpressionContext,0);
};

OC_RemoveItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_RemoveItem(this);
	}
};

OC_RemoveItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_RemoveItem(this);
	}
};




CypherParser.OC_RemoveItemContext = OC_RemoveItemContext;

CypherParser.prototype.oC_RemoveItem = function() {

    var localctx = new OC_RemoveItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CypherParser.RULE_oC_RemoveItem);
    try {
        this.state = 471;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 467;
            this.oC_Variable();
            this.state = 468;
            this.oC_NodeLabels();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 470;
            this.oC_PropertyExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_InQueryCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_InQueryCall;
    return this;
}

OC_InQueryCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_InQueryCallContext.prototype.constructor = OC_InQueryCallContext;

OC_InQueryCallContext.prototype.CALL = function() {
    return this.getToken(CypherParser.CALL, 0);
};

OC_InQueryCallContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_InQueryCallContext.prototype.oC_ExplicitProcedureInvocation = function() {
    return this.getTypedRuleContext(OC_ExplicitProcedureInvocationContext,0);
};

OC_InQueryCallContext.prototype.YIELD = function() {
    return this.getToken(CypherParser.YIELD, 0);
};

OC_InQueryCallContext.prototype.oC_YieldItems = function() {
    return this.getTypedRuleContext(OC_YieldItemsContext,0);
};

OC_InQueryCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_InQueryCall(this);
	}
};

OC_InQueryCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_InQueryCall(this);
	}
};




CypherParser.OC_InQueryCallContext = OC_InQueryCallContext;

CypherParser.prototype.oC_InQueryCall = function() {

    var localctx = new OC_InQueryCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CypherParser.RULE_oC_InQueryCall);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 473;
        this.match(CypherParser.CALL);
        this.state = 474;
        this.match(CypherParser.SP);
        this.state = 475;
        this.oC_ExplicitProcedureInvocation();
        this.state = 482;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        if(la_===1) {
            this.state = 477;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 476;
                this.match(CypherParser.SP);
            }

            this.state = 479;
            this.match(CypherParser.YIELD);
            this.state = 480;
            this.match(CypherParser.SP);
            this.state = 481;
            this.oC_YieldItems();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_StandaloneCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_StandaloneCall;
    return this;
}

OC_StandaloneCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_StandaloneCallContext.prototype.constructor = OC_StandaloneCallContext;

OC_StandaloneCallContext.prototype.CALL = function() {
    return this.getToken(CypherParser.CALL, 0);
};

OC_StandaloneCallContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_StandaloneCallContext.prototype.oC_ExplicitProcedureInvocation = function() {
    return this.getTypedRuleContext(OC_ExplicitProcedureInvocationContext,0);
};

OC_StandaloneCallContext.prototype.oC_ImplicitProcedureInvocation = function() {
    return this.getTypedRuleContext(OC_ImplicitProcedureInvocationContext,0);
};

OC_StandaloneCallContext.prototype.YIELD = function() {
    return this.getToken(CypherParser.YIELD, 0);
};

OC_StandaloneCallContext.prototype.oC_YieldItems = function() {
    return this.getTypedRuleContext(OC_YieldItemsContext,0);
};

OC_StandaloneCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_StandaloneCall(this);
	}
};

OC_StandaloneCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_StandaloneCall(this);
	}
};




CypherParser.OC_StandaloneCallContext = OC_StandaloneCallContext;

CypherParser.prototype.oC_StandaloneCall = function() {

    var localctx = new OC_StandaloneCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CypherParser.RULE_oC_StandaloneCall);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 484;
        this.match(CypherParser.CALL);
        this.state = 485;
        this.match(CypherParser.SP);
        this.state = 488;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
        switch(la_) {
        case 1:
            this.state = 486;
            this.oC_ExplicitProcedureInvocation();
            break;

        case 2:
            this.state = 487;
            this.oC_ImplicitProcedureInvocation();
            break;

        }
        this.state = 494;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
        if(la_===1) {
            this.state = 490;
            this.match(CypherParser.SP);
            this.state = 491;
            this.match(CypherParser.YIELD);
            this.state = 492;
            this.match(CypherParser.SP);
            this.state = 493;
            this.oC_YieldItems();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_YieldItemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_YieldItems;
    return this;
}

OC_YieldItemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_YieldItemsContext.prototype.constructor = OC_YieldItemsContext;

OC_YieldItemsContext.prototype.oC_Where = function() {
    return this.getTypedRuleContext(OC_WhereContext,0);
};

OC_YieldItemsContext.prototype.oC_YieldItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_YieldItemContext);
    } else {
        return this.getTypedRuleContext(OC_YieldItemContext,i);
    }
};

OC_YieldItemsContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_YieldItemsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_YieldItems(this);
	}
};

OC_YieldItemsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_YieldItems(this);
	}
};




CypherParser.OC_YieldItemsContext = OC_YieldItemsContext;

CypherParser.prototype.oC_YieldItems = function() {

    var localctx = new OC_YieldItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CypherParser.RULE_oC_YieldItems);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 511;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.T__4:
            this.state = 496;
            this.match(CypherParser.T__4);
            break;
        case CypherParser.COUNT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.HexLetter:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
            this.state = 497;
            this.oC_YieldItem();
            this.state = 508;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 499;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 498;
                        this.match(CypherParser.SP);
                    }

                    this.state = 501;
                    this.match(CypherParser.T__1);
                    this.state = 503;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 502;
                        this.match(CypherParser.SP);
                    }

                    this.state = 505;
                    this.oC_YieldItem(); 
                }
                this.state = 510;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 517;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
        if(la_===1) {
            this.state = 514;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 513;
                this.match(CypherParser.SP);
            }

            this.state = 516;
            this.oC_Where();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_YieldItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_YieldItem;
    return this;
}

OC_YieldItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_YieldItemContext.prototype.constructor = OC_YieldItemContext;

OC_YieldItemContext.prototype.oC_Variable = function() {
    return this.getTypedRuleContext(OC_VariableContext,0);
};

OC_YieldItemContext.prototype.oC_ProcedureResultField = function() {
    return this.getTypedRuleContext(OC_ProcedureResultFieldContext,0);
};

OC_YieldItemContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_YieldItemContext.prototype.AS = function() {
    return this.getToken(CypherParser.AS, 0);
};

OC_YieldItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_YieldItem(this);
	}
};

OC_YieldItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_YieldItem(this);
	}
};




CypherParser.OC_YieldItemContext = OC_YieldItemContext;

CypherParser.prototype.oC_YieldItem = function() {

    var localctx = new OC_YieldItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CypherParser.RULE_oC_YieldItem);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 524;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        if(la_===1) {
            this.state = 519;
            this.oC_ProcedureResultField();
            this.state = 520;
            this.match(CypherParser.SP);
            this.state = 521;
            this.match(CypherParser.AS);
            this.state = 522;
            this.match(CypherParser.SP);

        }
        this.state = 526;
        this.oC_Variable();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_WithContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_With;
    return this;
}

OC_WithContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_WithContext.prototype.constructor = OC_WithContext;

OC_WithContext.prototype.WITH = function() {
    return this.getToken(CypherParser.WITH, 0);
};

OC_WithContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_WithContext.prototype.oC_ReturnBody = function() {
    return this.getTypedRuleContext(OC_ReturnBodyContext,0);
};

OC_WithContext.prototype.DISTINCT = function() {
    return this.getToken(CypherParser.DISTINCT, 0);
};

OC_WithContext.prototype.oC_Where = function() {
    return this.getTypedRuleContext(OC_WhereContext,0);
};

OC_WithContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_With(this);
	}
};

OC_WithContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_With(this);
	}
};




CypherParser.OC_WithContext = OC_WithContext;

CypherParser.prototype.oC_With = function() {

    var localctx = new OC_WithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CypherParser.RULE_oC_With);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 528;
        this.match(CypherParser.WITH);
        this.state = 533;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        if(la_===1) {
            this.state = 530;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 529;
                this.match(CypherParser.SP);
            }

            this.state = 532;
            this.match(CypherParser.DISTINCT);

        }
        this.state = 535;
        this.match(CypherParser.SP);
        this.state = 536;
        this.oC_ReturnBody();
        this.state = 541;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        if(la_===1) {
            this.state = 538;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 537;
                this.match(CypherParser.SP);
            }

            this.state = 540;
            this.oC_Where();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_ReturnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Return;
    return this;
}

OC_ReturnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_ReturnContext.prototype.constructor = OC_ReturnContext;

OC_ReturnContext.prototype.RETURN = function() {
    return this.getToken(CypherParser.RETURN, 0);
};

OC_ReturnContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_ReturnContext.prototype.oC_ReturnBody = function() {
    return this.getTypedRuleContext(OC_ReturnBodyContext,0);
};

OC_ReturnContext.prototype.DISTINCT = function() {
    return this.getToken(CypherParser.DISTINCT, 0);
};

OC_ReturnContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Return(this);
	}
};

OC_ReturnContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Return(this);
	}
};




CypherParser.OC_ReturnContext = OC_ReturnContext;

CypherParser.prototype.oC_Return = function() {

    var localctx = new OC_ReturnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CypherParser.RULE_oC_Return);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 543;
        this.match(CypherParser.RETURN);
        this.state = 548;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        if(la_===1) {
            this.state = 545;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 544;
                this.match(CypherParser.SP);
            }

            this.state = 547;
            this.match(CypherParser.DISTINCT);

        }
        this.state = 550;
        this.match(CypherParser.SP);
        this.state = 551;
        this.oC_ReturnBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_ReturnBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ReturnBody;
    return this;
}

OC_ReturnBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_ReturnBodyContext.prototype.constructor = OC_ReturnBodyContext;

OC_ReturnBodyContext.prototype.oC_ReturnItems = function() {
    return this.getTypedRuleContext(OC_ReturnItemsContext,0);
};

OC_ReturnBodyContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_ReturnBodyContext.prototype.oC_Order = function() {
    return this.getTypedRuleContext(OC_OrderContext,0);
};

OC_ReturnBodyContext.prototype.oC_Skip = function() {
    return this.getTypedRuleContext(OC_SkipContext,0);
};

OC_ReturnBodyContext.prototype.oC_Limit = function() {
    return this.getTypedRuleContext(OC_LimitContext,0);
};

OC_ReturnBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_ReturnBody(this);
	}
};

OC_ReturnBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_ReturnBody(this);
	}
};




CypherParser.OC_ReturnBodyContext = OC_ReturnBodyContext;

CypherParser.prototype.oC_ReturnBody = function() {

    var localctx = new OC_ReturnBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CypherParser.RULE_oC_ReturnBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 553;
        this.oC_ReturnItems();
        this.state = 556;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        if(la_===1) {
            this.state = 554;
            this.match(CypherParser.SP);
            this.state = 555;
            this.oC_Order();

        }
        this.state = 560;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        if(la_===1) {
            this.state = 558;
            this.match(CypherParser.SP);
            this.state = 559;
            this.oC_Skip();

        }
        this.state = 564;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        if(la_===1) {
            this.state = 562;
            this.match(CypherParser.SP);
            this.state = 563;
            this.oC_Limit();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_ReturnItemsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ReturnItems;
    return this;
}

OC_ReturnItemsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_ReturnItemsContext.prototype.constructor = OC_ReturnItemsContext;

OC_ReturnItemsContext.prototype.oC_ReturnItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_ReturnItemContext);
    } else {
        return this.getTypedRuleContext(OC_ReturnItemContext,i);
    }
};

OC_ReturnItemsContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_ReturnItemsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_ReturnItems(this);
	}
};

OC_ReturnItemsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_ReturnItems(this);
	}
};




CypherParser.OC_ReturnItemsContext = OC_ReturnItemsContext;

CypherParser.prototype.oC_ReturnItems = function() {

    var localctx = new OC_ReturnItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CypherParser.RULE_oC_ReturnItems);
    var _la = 0; // Token type
    try {
        this.state = 594;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.T__4:
            this.enterOuterAlt(localctx, 1);
            this.state = 566;
            this.match(CypherParser.T__4);
            this.state = 577;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 568;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 567;
                        this.match(CypherParser.SP);
                    }

                    this.state = 570;
                    this.match(CypherParser.T__1);
                    this.state = 572;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 571;
                        this.match(CypherParser.SP);
                    }

                    this.state = 574;
                    this.oC_ReturnItem(); 
                }
                this.state = 579;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
            }

            break;
        case CypherParser.T__5:
        case CypherParser.T__7:
        case CypherParser.T__12:
        case CypherParser.T__13:
        case CypherParser.T__23:
        case CypherParser.T__25:
        case CypherParser.ALL:
        case CypherParser.NOT:
        case CypherParser.NULL:
        case CypherParser.COUNT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.TRUE:
        case CypherParser.FALSE:
        case CypherParser.EXISTS:
        case CypherParser.CASE:
        case CypherParser.StringLiteral:
        case CypherParser.HexInteger:
        case CypherParser.DecimalInteger:
        case CypherParser.OctalInteger:
        case CypherParser.HexLetter:
        case CypherParser.ExponentDecimalReal:
        case CypherParser.RegularDecimalReal:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
            this.enterOuterAlt(localctx, 2);
            this.state = 580;
            this.oC_ReturnItem();
            this.state = 591;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 582;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 581;
                        this.match(CypherParser.SP);
                    }

                    this.state = 584;
                    this.match(CypherParser.T__1);
                    this.state = 586;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 585;
                        this.match(CypherParser.SP);
                    }

                    this.state = 588;
                    this.oC_ReturnItem(); 
                }
                this.state = 593;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_ReturnItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ReturnItem;
    return this;
}

OC_ReturnItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_ReturnItemContext.prototype.constructor = OC_ReturnItemContext;

OC_ReturnItemContext.prototype.oC_Expression = function() {
    return this.getTypedRuleContext(OC_ExpressionContext,0);
};

OC_ReturnItemContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_ReturnItemContext.prototype.AS = function() {
    return this.getToken(CypherParser.AS, 0);
};

OC_ReturnItemContext.prototype.oC_Variable = function() {
    return this.getTypedRuleContext(OC_VariableContext,0);
};

OC_ReturnItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_ReturnItem(this);
	}
};

OC_ReturnItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_ReturnItem(this);
	}
};




CypherParser.OC_ReturnItemContext = OC_ReturnItemContext;

CypherParser.prototype.oC_ReturnItem = function() {

    var localctx = new OC_ReturnItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, CypherParser.RULE_oC_ReturnItem);
    try {
        this.state = 603;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 596;
            this.oC_Expression();
            this.state = 597;
            this.match(CypherParser.SP);
            this.state = 598;
            this.match(CypherParser.AS);
            this.state = 599;
            this.match(CypherParser.SP);
            this.state = 600;
            this.oC_Variable();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 602;
            this.oC_Expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_OrderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Order;
    return this;
}

OC_OrderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_OrderContext.prototype.constructor = OC_OrderContext;

OC_OrderContext.prototype.ORDER = function() {
    return this.getToken(CypherParser.ORDER, 0);
};

OC_OrderContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_OrderContext.prototype.BY = function() {
    return this.getToken(CypherParser.BY, 0);
};

OC_OrderContext.prototype.oC_SortItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_SortItemContext);
    } else {
        return this.getTypedRuleContext(OC_SortItemContext,i);
    }
};

OC_OrderContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Order(this);
	}
};

OC_OrderContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Order(this);
	}
};




CypherParser.OC_OrderContext = OC_OrderContext;

CypherParser.prototype.oC_Order = function() {

    var localctx = new OC_OrderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CypherParser.RULE_oC_Order);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 605;
        this.match(CypherParser.ORDER);
        this.state = 606;
        this.match(CypherParser.SP);
        this.state = 607;
        this.match(CypherParser.BY);
        this.state = 608;
        this.match(CypherParser.SP);
        this.state = 609;
        this.oC_SortItem();
        this.state = 617;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CypherParser.T__1) {
            this.state = 610;
            this.match(CypherParser.T__1);
            this.state = 612;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 611;
                this.match(CypherParser.SP);
            }

            this.state = 614;
            this.oC_SortItem();
            this.state = 619;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_SkipContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Skip;
    return this;
}

OC_SkipContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_SkipContext.prototype.constructor = OC_SkipContext;

OC_SkipContext.prototype.L_SKIP = function() {
    return this.getToken(CypherParser.L_SKIP, 0);
};

OC_SkipContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

OC_SkipContext.prototype.oC_Expression = function() {
    return this.getTypedRuleContext(OC_ExpressionContext,0);
};

OC_SkipContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Skip(this);
	}
};

OC_SkipContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Skip(this);
	}
};




CypherParser.OC_SkipContext = OC_SkipContext;

CypherParser.prototype.oC_Skip = function() {

    var localctx = new OC_SkipContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CypherParser.RULE_oC_Skip);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 620;
        this.match(CypherParser.L_SKIP);
        this.state = 621;
        this.match(CypherParser.SP);
        this.state = 622;
        this.oC_Expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_LimitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Limit;
    return this;
}

OC_LimitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_LimitContext.prototype.constructor = OC_LimitContext;

OC_LimitContext.prototype.LIMIT = function() {
    return this.getToken(CypherParser.LIMIT, 0);
};

OC_LimitContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

OC_LimitContext.prototype.oC_Expression = function() {
    return this.getTypedRuleContext(OC_ExpressionContext,0);
};

OC_LimitContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Limit(this);
	}
};

OC_LimitContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Limit(this);
	}
};




CypherParser.OC_LimitContext = OC_LimitContext;

CypherParser.prototype.oC_Limit = function() {

    var localctx = new OC_LimitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, CypherParser.RULE_oC_Limit);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 624;
        this.match(CypherParser.LIMIT);
        this.state = 625;
        this.match(CypherParser.SP);
        this.state = 626;
        this.oC_Expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_SortItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_SortItem;
    return this;
}

OC_SortItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_SortItemContext.prototype.constructor = OC_SortItemContext;

OC_SortItemContext.prototype.oC_Expression = function() {
    return this.getTypedRuleContext(OC_ExpressionContext,0);
};

OC_SortItemContext.prototype.ASCENDING = function() {
    return this.getToken(CypherParser.ASCENDING, 0);
};

OC_SortItemContext.prototype.ASC = function() {
    return this.getToken(CypherParser.ASC, 0);
};

OC_SortItemContext.prototype.DESCENDING = function() {
    return this.getToken(CypherParser.DESCENDING, 0);
};

OC_SortItemContext.prototype.DESC = function() {
    return this.getToken(CypherParser.DESC, 0);
};

OC_SortItemContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

OC_SortItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_SortItem(this);
	}
};

OC_SortItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_SortItem(this);
	}
};




CypherParser.OC_SortItemContext = OC_SortItemContext;

CypherParser.prototype.oC_SortItem = function() {

    var localctx = new OC_SortItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CypherParser.RULE_oC_SortItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 628;
        this.oC_Expression();
        this.state = 633;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
        if(la_===1) {
            this.state = 630;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 629;
                this.match(CypherParser.SP);
            }

            this.state = 632;
            _la = this._input.LA(1);
            if(!(((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (CypherParser.ASCENDING - 68)) | (1 << (CypherParser.ASC - 68)) | (1 << (CypherParser.DESCENDING - 68)) | (1 << (CypherParser.DESC - 68)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_WhereContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Where;
    return this;
}

OC_WhereContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_WhereContext.prototype.constructor = OC_WhereContext;

OC_WhereContext.prototype.WHERE = function() {
    return this.getToken(CypherParser.WHERE, 0);
};

OC_WhereContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

OC_WhereContext.prototype.oC_Expression = function() {
    return this.getTypedRuleContext(OC_ExpressionContext,0);
};

OC_WhereContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Where(this);
	}
};

OC_WhereContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Where(this);
	}
};




CypherParser.OC_WhereContext = OC_WhereContext;

CypherParser.prototype.oC_Where = function() {

    var localctx = new OC_WhereContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, CypherParser.RULE_oC_Where);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 635;
        this.match(CypherParser.WHERE);
        this.state = 636;
        this.match(CypherParser.SP);
        this.state = 637;
        this.oC_Expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_PatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Pattern;
    return this;
}

OC_PatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_PatternContext.prototype.constructor = OC_PatternContext;

OC_PatternContext.prototype.oC_PatternPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_PatternPartContext);
    } else {
        return this.getTypedRuleContext(OC_PatternPartContext,i);
    }
};

OC_PatternContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_PatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Pattern(this);
	}
};

OC_PatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Pattern(this);
	}
};




CypherParser.OC_PatternContext = OC_PatternContext;

CypherParser.prototype.oC_Pattern = function() {

    var localctx = new OC_PatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, CypherParser.RULE_oC_Pattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 639;
        this.oC_PatternPart();
        this.state = 650;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 641;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 640;
                    this.match(CypherParser.SP);
                }

                this.state = 643;
                this.match(CypherParser.T__1);
                this.state = 645;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 644;
                    this.match(CypherParser.SP);
                }

                this.state = 647;
                this.oC_PatternPart(); 
            }
            this.state = 652;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_PatternPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PatternPart;
    return this;
}

OC_PatternPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_PatternPartContext.prototype.constructor = OC_PatternPartContext;

OC_PatternPartContext.prototype.oC_Variable = function() {
    return this.getTypedRuleContext(OC_VariableContext,0);
};

OC_PatternPartContext.prototype.oC_AnonymousPatternPart = function() {
    return this.getTypedRuleContext(OC_AnonymousPatternPartContext,0);
};

OC_PatternPartContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_PatternPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_PatternPart(this);
	}
};

OC_PatternPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_PatternPart(this);
	}
};




CypherParser.OC_PatternPartContext = OC_PatternPartContext;

CypherParser.prototype.oC_PatternPart = function() {

    var localctx = new OC_PatternPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, CypherParser.RULE_oC_PatternPart);
    var _la = 0; // Token type
    try {
        this.state = 664;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.COUNT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.HexLetter:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
            this.enterOuterAlt(localctx, 1);
            this.state = 653;
            this.oC_Variable();
            this.state = 655;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 654;
                this.match(CypherParser.SP);
            }

            this.state = 657;
            this.match(CypherParser.T__2);
            this.state = 659;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 658;
                this.match(CypherParser.SP);
            }

            this.state = 661;
            this.oC_AnonymousPatternPart();
            break;
        case CypherParser.T__5:
            this.enterOuterAlt(localctx, 2);
            this.state = 663;
            this.oC_AnonymousPatternPart();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_AnonymousPatternPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_AnonymousPatternPart;
    return this;
}

OC_AnonymousPatternPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_AnonymousPatternPartContext.prototype.constructor = OC_AnonymousPatternPartContext;

OC_AnonymousPatternPartContext.prototype.oC_PatternElement = function() {
    return this.getTypedRuleContext(OC_PatternElementContext,0);
};

OC_AnonymousPatternPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_AnonymousPatternPart(this);
	}
};

OC_AnonymousPatternPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_AnonymousPatternPart(this);
	}
};




CypherParser.OC_AnonymousPatternPartContext = OC_AnonymousPatternPartContext;

CypherParser.prototype.oC_AnonymousPatternPart = function() {

    var localctx = new OC_AnonymousPatternPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, CypherParser.RULE_oC_AnonymousPatternPart);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 666;
        this.oC_PatternElement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_PatternElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PatternElement;
    return this;
}

OC_PatternElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_PatternElementContext.prototype.constructor = OC_PatternElementContext;

OC_PatternElementContext.prototype.oC_NodePattern = function() {
    return this.getTypedRuleContext(OC_NodePatternContext,0);
};

OC_PatternElementContext.prototype.oC_PatternElementChain = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_PatternElementChainContext);
    } else {
        return this.getTypedRuleContext(OC_PatternElementChainContext,i);
    }
};

OC_PatternElementContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_PatternElementContext.prototype.oC_PatternElement = function() {
    return this.getTypedRuleContext(OC_PatternElementContext,0);
};

OC_PatternElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_PatternElement(this);
	}
};

OC_PatternElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_PatternElement(this);
	}
};




CypherParser.OC_PatternElementContext = OC_PatternElementContext;

CypherParser.prototype.oC_PatternElement = function() {

    var localctx = new OC_PatternElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, CypherParser.RULE_oC_PatternElement);
    var _la = 0; // Token type
    try {
        this.state = 682;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 668;
            this.oC_NodePattern();
            this.state = 675;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,95,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 670;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 669;
                        this.match(CypherParser.SP);
                    }

                    this.state = 672;
                    this.oC_PatternElementChain(); 
                }
                this.state = 677;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,95,this._ctx);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 678;
            this.match(CypherParser.T__5);
            this.state = 679;
            this.oC_PatternElement();
            this.state = 680;
            this.match(CypherParser.T__6);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_NodePatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_NodePattern;
    return this;
}

OC_NodePatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_NodePatternContext.prototype.constructor = OC_NodePatternContext;

OC_NodePatternContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_NodePatternContext.prototype.oC_Variable = function() {
    return this.getTypedRuleContext(OC_VariableContext,0);
};

OC_NodePatternContext.prototype.oC_NodeLabels = function() {
    return this.getTypedRuleContext(OC_NodeLabelsContext,0);
};

OC_NodePatternContext.prototype.oC_Properties = function() {
    return this.getTypedRuleContext(OC_PropertiesContext,0);
};

OC_NodePatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_NodePattern(this);
	}
};

OC_NodePatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_NodePattern(this);
	}
};




CypherParser.OC_NodePatternContext = OC_NodePatternContext;

CypherParser.prototype.oC_NodePattern = function() {

    var localctx = new OC_NodePatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, CypherParser.RULE_oC_NodePattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 684;
        this.match(CypherParser.T__5);
        this.state = 686;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 685;
            this.match(CypherParser.SP);
        }

        this.state = 692;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (CypherParser.COUNT - 83)) | (1 << (CypherParser.ANY - 83)) | (1 << (CypherParser.NONE - 83)) | (1 << (CypherParser.SINGLE - 83)) | (1 << (CypherParser.HexLetter - 83)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.FILTER - 118)) | (1 << (CypherParser.EXTRACT - 118)) | (1 << (CypherParser.UnescapedSymbolicName - 118)) | (1 << (CypherParser.EscapedSymbolicName - 118)))) !== 0)) {
            this.state = 688;
            this.oC_Variable();
            this.state = 690;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 689;
                this.match(CypherParser.SP);
            }

        }

        this.state = 698;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__9) {
            this.state = 694;
            this.oC_NodeLabels();
            this.state = 696;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 695;
                this.match(CypherParser.SP);
            }

        }

        this.state = 704;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__23 || _la===CypherParser.T__25) {
            this.state = 700;
            this.oC_Properties();
            this.state = 702;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 701;
                this.match(CypherParser.SP);
            }

        }

        this.state = 706;
        this.match(CypherParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_PatternElementChainContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PatternElementChain;
    return this;
}

OC_PatternElementChainContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_PatternElementChainContext.prototype.constructor = OC_PatternElementChainContext;

OC_PatternElementChainContext.prototype.oC_RelationshipPattern = function() {
    return this.getTypedRuleContext(OC_RelationshipPatternContext,0);
};

OC_PatternElementChainContext.prototype.oC_NodePattern = function() {
    return this.getTypedRuleContext(OC_NodePatternContext,0);
};

OC_PatternElementChainContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

OC_PatternElementChainContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_PatternElementChain(this);
	}
};

OC_PatternElementChainContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_PatternElementChain(this);
	}
};




CypherParser.OC_PatternElementChainContext = OC_PatternElementChainContext;

CypherParser.prototype.oC_PatternElementChain = function() {

    var localctx = new OC_PatternElementChainContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, CypherParser.RULE_oC_PatternElementChain);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 708;
        this.oC_RelationshipPattern();
        this.state = 710;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 709;
            this.match(CypherParser.SP);
        }

        this.state = 712;
        this.oC_NodePattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_RelationshipPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_RelationshipPattern;
    return this;
}

OC_RelationshipPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_RelationshipPatternContext.prototype.constructor = OC_RelationshipPatternContext;

OC_RelationshipPatternContext.prototype.oC_LeftArrowHead = function() {
    return this.getTypedRuleContext(OC_LeftArrowHeadContext,0);
};

OC_RelationshipPatternContext.prototype.oC_Dash = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_DashContext);
    } else {
        return this.getTypedRuleContext(OC_DashContext,i);
    }
};

OC_RelationshipPatternContext.prototype.oC_RightArrowHead = function() {
    return this.getTypedRuleContext(OC_RightArrowHeadContext,0);
};

OC_RelationshipPatternContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_RelationshipPatternContext.prototype.oC_RelationshipDetail = function() {
    return this.getTypedRuleContext(OC_RelationshipDetailContext,0);
};

OC_RelationshipPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_RelationshipPattern(this);
	}
};

OC_RelationshipPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_RelationshipPattern(this);
	}
};




CypherParser.OC_RelationshipPatternContext = OC_RelationshipPatternContext;

CypherParser.prototype.oC_RelationshipPattern = function() {

    var localctx = new OC_RelationshipPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, CypherParser.RULE_oC_RelationshipPattern);
    var _la = 0; // Token type
    try {
        this.state = 778;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 714;
            this.oC_LeftArrowHead();
            this.state = 716;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 715;
                this.match(CypherParser.SP);
            }

            this.state = 718;
            this.oC_Dash();
            this.state = 720;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
            if(la_===1) {
                this.state = 719;
                this.match(CypherParser.SP);

            }
            this.state = 723;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.T__7) {
                this.state = 722;
                this.oC_RelationshipDetail();
            }

            this.state = 726;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 725;
                this.match(CypherParser.SP);
            }

            this.state = 728;
            this.oC_Dash();
            this.state = 730;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 729;
                this.match(CypherParser.SP);
            }

            this.state = 732;
            this.oC_RightArrowHead();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 734;
            this.oC_LeftArrowHead();
            this.state = 736;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 735;
                this.match(CypherParser.SP);
            }

            this.state = 738;
            this.oC_Dash();
            this.state = 740;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
            if(la_===1) {
                this.state = 739;
                this.match(CypherParser.SP);

            }
            this.state = 743;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.T__7) {
                this.state = 742;
                this.oC_RelationshipDetail();
            }

            this.state = 746;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 745;
                this.match(CypherParser.SP);
            }

            this.state = 748;
            this.oC_Dash();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 750;
            this.oC_Dash();
            this.state = 752;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
            if(la_===1) {
                this.state = 751;
                this.match(CypherParser.SP);

            }
            this.state = 755;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.T__7) {
                this.state = 754;
                this.oC_RelationshipDetail();
            }

            this.state = 758;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 757;
                this.match(CypherParser.SP);
            }

            this.state = 760;
            this.oC_Dash();
            this.state = 762;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 761;
                this.match(CypherParser.SP);
            }

            this.state = 764;
            this.oC_RightArrowHead();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 766;
            this.oC_Dash();
            this.state = 768;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
            if(la_===1) {
                this.state = 767;
                this.match(CypherParser.SP);

            }
            this.state = 771;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.T__7) {
                this.state = 770;
                this.oC_RelationshipDetail();
            }

            this.state = 774;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 773;
                this.match(CypherParser.SP);
            }

            this.state = 776;
            this.oC_Dash();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_RelationshipDetailContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_RelationshipDetail;
    return this;
}

OC_RelationshipDetailContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_RelationshipDetailContext.prototype.constructor = OC_RelationshipDetailContext;

OC_RelationshipDetailContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_RelationshipDetailContext.prototype.oC_Variable = function() {
    return this.getTypedRuleContext(OC_VariableContext,0);
};

OC_RelationshipDetailContext.prototype.oC_RelationshipTypes = function() {
    return this.getTypedRuleContext(OC_RelationshipTypesContext,0);
};

OC_RelationshipDetailContext.prototype.oC_RangeLiteral = function() {
    return this.getTypedRuleContext(OC_RangeLiteralContext,0);
};

OC_RelationshipDetailContext.prototype.oC_Properties = function() {
    return this.getTypedRuleContext(OC_PropertiesContext,0);
};

OC_RelationshipDetailContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_RelationshipDetail(this);
	}
};

OC_RelationshipDetailContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_RelationshipDetail(this);
	}
};




CypherParser.OC_RelationshipDetailContext = OC_RelationshipDetailContext;

CypherParser.prototype.oC_RelationshipDetail = function() {

    var localctx = new OC_RelationshipDetailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, CypherParser.RULE_oC_RelationshipDetail);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 780;
        this.match(CypherParser.T__7);
        this.state = 782;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 781;
            this.match(CypherParser.SP);
        }

        this.state = 788;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (CypherParser.COUNT - 83)) | (1 << (CypherParser.ANY - 83)) | (1 << (CypherParser.NONE - 83)) | (1 << (CypherParser.SINGLE - 83)) | (1 << (CypherParser.HexLetter - 83)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.FILTER - 118)) | (1 << (CypherParser.EXTRACT - 118)) | (1 << (CypherParser.UnescapedSymbolicName - 118)) | (1 << (CypherParser.EscapedSymbolicName - 118)))) !== 0)) {
            this.state = 784;
            this.oC_Variable();
            this.state = 786;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 785;
                this.match(CypherParser.SP);
            }

        }

        this.state = 794;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__9) {
            this.state = 790;
            this.oC_RelationshipTypes();
            this.state = 792;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 791;
                this.match(CypherParser.SP);
            }

        }

        this.state = 797;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__4) {
            this.state = 796;
            this.oC_RangeLiteral();
        }

        this.state = 803;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__23 || _la===CypherParser.T__25) {
            this.state = 799;
            this.oC_Properties();
            this.state = 801;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 800;
                this.match(CypherParser.SP);
            }

        }

        this.state = 805;
        this.match(CypherParser.T__8);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_PropertiesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Properties;
    return this;
}

OC_PropertiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_PropertiesContext.prototype.constructor = OC_PropertiesContext;

OC_PropertiesContext.prototype.oC_MapLiteral = function() {
    return this.getTypedRuleContext(OC_MapLiteralContext,0);
};

OC_PropertiesContext.prototype.oC_Parameter = function() {
    return this.getTypedRuleContext(OC_ParameterContext,0);
};

OC_PropertiesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Properties(this);
	}
};

OC_PropertiesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Properties(this);
	}
};




CypherParser.OC_PropertiesContext = OC_PropertiesContext;

CypherParser.prototype.oC_Properties = function() {

    var localctx = new OC_PropertiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, CypherParser.RULE_oC_Properties);
    try {
        this.state = 809;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.T__23:
            this.enterOuterAlt(localctx, 1);
            this.state = 807;
            this.oC_MapLiteral();
            break;
        case CypherParser.T__25:
            this.enterOuterAlt(localctx, 2);
            this.state = 808;
            this.oC_Parameter();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_RelationshipTypesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_RelationshipTypes;
    return this;
}

OC_RelationshipTypesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_RelationshipTypesContext.prototype.constructor = OC_RelationshipTypesContext;

OC_RelationshipTypesContext.prototype.oC_RelTypeName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_RelTypeNameContext);
    } else {
        return this.getTypedRuleContext(OC_RelTypeNameContext,i);
    }
};

OC_RelationshipTypesContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_RelationshipTypesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_RelationshipTypes(this);
	}
};

OC_RelationshipTypesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_RelationshipTypes(this);
	}
};




CypherParser.OC_RelationshipTypesContext = OC_RelationshipTypesContext;

CypherParser.prototype.oC_RelationshipTypes = function() {

    var localctx = new OC_RelationshipTypesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, CypherParser.RULE_oC_RelationshipTypes);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 811;
        this.match(CypherParser.T__9);
        this.state = 813;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 812;
            this.match(CypherParser.SP);
        }

        this.state = 815;
        this.oC_RelTypeName();
        this.state = 829;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,135,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 817;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 816;
                    this.match(CypherParser.SP);
                }

                this.state = 819;
                this.match(CypherParser.T__10);
                this.state = 821;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.T__9) {
                    this.state = 820;
                    this.match(CypherParser.T__9);
                }

                this.state = 824;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 823;
                    this.match(CypherParser.SP);
                }

                this.state = 826;
                this.oC_RelTypeName(); 
            }
            this.state = 831;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,135,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_NodeLabelsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_NodeLabels;
    return this;
}

OC_NodeLabelsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_NodeLabelsContext.prototype.constructor = OC_NodeLabelsContext;

OC_NodeLabelsContext.prototype.oC_NodeLabel = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_NodeLabelContext);
    } else {
        return this.getTypedRuleContext(OC_NodeLabelContext,i);
    }
};

OC_NodeLabelsContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_NodeLabelsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_NodeLabels(this);
	}
};

OC_NodeLabelsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_NodeLabels(this);
	}
};




CypherParser.OC_NodeLabelsContext = OC_NodeLabelsContext;

CypherParser.prototype.oC_NodeLabels = function() {

    var localctx = new OC_NodeLabelsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CypherParser.RULE_oC_NodeLabels);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 832;
        this.oC_NodeLabel();
        this.state = 839;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,137,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 834;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 833;
                    this.match(CypherParser.SP);
                }

                this.state = 836;
                this.oC_NodeLabel(); 
            }
            this.state = 841;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,137,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_NodeLabelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_NodeLabel;
    return this;
}

OC_NodeLabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_NodeLabelContext.prototype.constructor = OC_NodeLabelContext;

OC_NodeLabelContext.prototype.oC_LabelName = function() {
    return this.getTypedRuleContext(OC_LabelNameContext,0);
};

OC_NodeLabelContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

OC_NodeLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_NodeLabel(this);
	}
};

OC_NodeLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_NodeLabel(this);
	}
};




CypherParser.OC_NodeLabelContext = OC_NodeLabelContext;

CypherParser.prototype.oC_NodeLabel = function() {

    var localctx = new OC_NodeLabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CypherParser.RULE_oC_NodeLabel);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 842;
        this.match(CypherParser.T__9);
        this.state = 844;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 843;
            this.match(CypherParser.SP);
        }

        this.state = 846;
        this.oC_LabelName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_RangeLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_RangeLiteral;
    return this;
}

OC_RangeLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_RangeLiteralContext.prototype.constructor = OC_RangeLiteralContext;

OC_RangeLiteralContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_RangeLiteralContext.prototype.oC_IntegerLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_IntegerLiteralContext);
    } else {
        return this.getTypedRuleContext(OC_IntegerLiteralContext,i);
    }
};

OC_RangeLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_RangeLiteral(this);
	}
};

OC_RangeLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_RangeLiteral(this);
	}
};




CypherParser.OC_RangeLiteralContext = OC_RangeLiteralContext;

CypherParser.prototype.oC_RangeLiteral = function() {

    var localctx = new OC_RangeLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, CypherParser.RULE_oC_RangeLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 848;
        this.match(CypherParser.T__4);
        this.state = 850;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 849;
            this.match(CypherParser.SP);
        }

        this.state = 856;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CypherParser.HexInteger - 96)) | (1 << (CypherParser.DecimalInteger - 96)) | (1 << (CypherParser.OctalInteger - 96)))) !== 0)) {
            this.state = 852;
            this.oC_IntegerLiteral();
            this.state = 854;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 853;
                this.match(CypherParser.SP);
            }

        }

        this.state = 868;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.T__11) {
            this.state = 858;
            this.match(CypherParser.T__11);
            this.state = 860;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 859;
                this.match(CypherParser.SP);
            }

            this.state = 866;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CypherParser.HexInteger - 96)) | (1 << (CypherParser.DecimalInteger - 96)) | (1 << (CypherParser.OctalInteger - 96)))) !== 0)) {
                this.state = 862;
                this.oC_IntegerLiteral();
                this.state = 864;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 863;
                    this.match(CypherParser.SP);
                }

            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_LabelNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_LabelName;
    return this;
}

OC_LabelNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_LabelNameContext.prototype.constructor = OC_LabelNameContext;

OC_LabelNameContext.prototype.oC_SchemaName = function() {
    return this.getTypedRuleContext(OC_SchemaNameContext,0);
};

OC_LabelNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_LabelName(this);
	}
};

OC_LabelNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_LabelName(this);
	}
};




CypherParser.OC_LabelNameContext = OC_LabelNameContext;

CypherParser.prototype.oC_LabelName = function() {

    var localctx = new OC_LabelNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, CypherParser.RULE_oC_LabelName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 870;
        this.oC_SchemaName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_RelTypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_RelTypeName;
    return this;
}

OC_RelTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_RelTypeNameContext.prototype.constructor = OC_RelTypeNameContext;

OC_RelTypeNameContext.prototype.oC_SchemaName = function() {
    return this.getTypedRuleContext(OC_SchemaNameContext,0);
};

OC_RelTypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_RelTypeName(this);
	}
};

OC_RelTypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_RelTypeName(this);
	}
};




CypherParser.OC_RelTypeNameContext = OC_RelTypeNameContext;

CypherParser.prototype.oC_RelTypeName = function() {

    var localctx = new OC_RelTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, CypherParser.RULE_oC_RelTypeName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 872;
        this.oC_SchemaName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Expression;
    return this;
}

OC_ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_ExpressionContext.prototype.constructor = OC_ExpressionContext;

OC_ExpressionContext.prototype.oC_OrExpression = function() {
    return this.getTypedRuleContext(OC_OrExpressionContext,0);
};

OC_ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Expression(this);
	}
};

OC_ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Expression(this);
	}
};




CypherParser.OC_ExpressionContext = OC_ExpressionContext;

CypherParser.prototype.oC_Expression = function() {

    var localctx = new OC_ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, CypherParser.RULE_oC_Expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 874;
        this.oC_OrExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_OrExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_OrExpression;
    return this;
}

OC_OrExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_OrExpressionContext.prototype.constructor = OC_OrExpressionContext;

OC_OrExpressionContext.prototype.oC_XorExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_XorExpressionContext);
    } else {
        return this.getTypedRuleContext(OC_XorExpressionContext,i);
    }
};

OC_OrExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_OrExpressionContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.OR);
    } else {
        return this.getToken(CypherParser.OR, i);
    }
};


OC_OrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_OrExpression(this);
	}
};

OC_OrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_OrExpression(this);
	}
};




CypherParser.OC_OrExpressionContext = OC_OrExpressionContext;

CypherParser.prototype.oC_OrExpression = function() {

    var localctx = new OC_OrExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, CypherParser.RULE_oC_OrExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 876;
        this.oC_XorExpression();
        this.state = 883;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,146,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 877;
                this.match(CypherParser.SP);
                this.state = 878;
                this.match(CypherParser.OR);
                this.state = 879;
                this.match(CypherParser.SP);
                this.state = 880;
                this.oC_XorExpression(); 
            }
            this.state = 885;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,146,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_XorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_XorExpression;
    return this;
}

OC_XorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_XorExpressionContext.prototype.constructor = OC_XorExpressionContext;

OC_XorExpressionContext.prototype.oC_AndExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_AndExpressionContext);
    } else {
        return this.getTypedRuleContext(OC_AndExpressionContext,i);
    }
};

OC_XorExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_XorExpressionContext.prototype.XOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.XOR);
    } else {
        return this.getToken(CypherParser.XOR, i);
    }
};


OC_XorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_XorExpression(this);
	}
};

OC_XorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_XorExpression(this);
	}
};




CypherParser.OC_XorExpressionContext = OC_XorExpressionContext;

CypherParser.prototype.oC_XorExpression = function() {

    var localctx = new OC_XorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CypherParser.RULE_oC_XorExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 886;
        this.oC_AndExpression();
        this.state = 893;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,147,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 887;
                this.match(CypherParser.SP);
                this.state = 888;
                this.match(CypherParser.XOR);
                this.state = 889;
                this.match(CypherParser.SP);
                this.state = 890;
                this.oC_AndExpression(); 
            }
            this.state = 895;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,147,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_AndExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_AndExpression;
    return this;
}

OC_AndExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_AndExpressionContext.prototype.constructor = OC_AndExpressionContext;

OC_AndExpressionContext.prototype.oC_NotExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_NotExpressionContext);
    } else {
        return this.getTypedRuleContext(OC_NotExpressionContext,i);
    }
};

OC_AndExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_AndExpressionContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.AND);
    } else {
        return this.getToken(CypherParser.AND, i);
    }
};


OC_AndExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_AndExpression(this);
	}
};

OC_AndExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_AndExpression(this);
	}
};




CypherParser.OC_AndExpressionContext = OC_AndExpressionContext;

CypherParser.prototype.oC_AndExpression = function() {

    var localctx = new OC_AndExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, CypherParser.RULE_oC_AndExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 896;
        this.oC_NotExpression();
        this.state = 903;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,148,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 897;
                this.match(CypherParser.SP);
                this.state = 898;
                this.match(CypherParser.AND);
                this.state = 899;
                this.match(CypherParser.SP);
                this.state = 900;
                this.oC_NotExpression(); 
            }
            this.state = 905;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,148,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_NotExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_NotExpression;
    return this;
}

OC_NotExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_NotExpressionContext.prototype.constructor = OC_NotExpressionContext;

OC_NotExpressionContext.prototype.oC_ComparisonExpression = function() {
    return this.getTypedRuleContext(OC_ComparisonExpressionContext,0);
};

OC_NotExpressionContext.prototype.NOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.NOT);
    } else {
        return this.getToken(CypherParser.NOT, i);
    }
};


OC_NotExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_NotExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_NotExpression(this);
	}
};

OC_NotExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_NotExpression(this);
	}
};




CypherParser.OC_NotExpressionContext = OC_NotExpressionContext;

CypherParser.prototype.oC_NotExpression = function() {

    var localctx = new OC_NotExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CypherParser.RULE_oC_NotExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 912;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CypherParser.NOT) {
            this.state = 906;
            this.match(CypherParser.NOT);
            this.state = 908;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 907;
                this.match(CypherParser.SP);
            }

            this.state = 914;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 915;
        this.oC_ComparisonExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_ComparisonExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ComparisonExpression;
    return this;
}

OC_ComparisonExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_ComparisonExpressionContext.prototype.constructor = OC_ComparisonExpressionContext;

OC_ComparisonExpressionContext.prototype.oC_AddOrSubtractExpression = function() {
    return this.getTypedRuleContext(OC_AddOrSubtractExpressionContext,0);
};

OC_ComparisonExpressionContext.prototype.oC_PartialComparisonExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_PartialComparisonExpressionContext);
    } else {
        return this.getTypedRuleContext(OC_PartialComparisonExpressionContext,i);
    }
};

OC_ComparisonExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_ComparisonExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_ComparisonExpression(this);
	}
};

OC_ComparisonExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_ComparisonExpression(this);
	}
};




CypherParser.OC_ComparisonExpressionContext = OC_ComparisonExpressionContext;

CypherParser.prototype.oC_ComparisonExpression = function() {

    var localctx = new OC_ComparisonExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CypherParser.RULE_oC_ComparisonExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 917;
        this.oC_AddOrSubtractExpression();
        this.state = 924;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,152,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 919;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 918;
                    this.match(CypherParser.SP);
                }

                this.state = 921;
                this.oC_PartialComparisonExpression(); 
            }
            this.state = 926;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,152,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_AddOrSubtractExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_AddOrSubtractExpression;
    return this;
}

OC_AddOrSubtractExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_AddOrSubtractExpressionContext.prototype.constructor = OC_AddOrSubtractExpressionContext;

OC_AddOrSubtractExpressionContext.prototype.oC_MultiplyDivideModuloExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_MultiplyDivideModuloExpressionContext);
    } else {
        return this.getTypedRuleContext(OC_MultiplyDivideModuloExpressionContext,i);
    }
};

OC_AddOrSubtractExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_AddOrSubtractExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_AddOrSubtractExpression(this);
	}
};

OC_AddOrSubtractExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_AddOrSubtractExpression(this);
	}
};




CypherParser.OC_AddOrSubtractExpressionContext = OC_AddOrSubtractExpressionContext;

CypherParser.prototype.oC_AddOrSubtractExpression = function() {

    var localctx = new OC_AddOrSubtractExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CypherParser.RULE_oC_AddOrSubtractExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 927;
        this.oC_MultiplyDivideModuloExpression();
        this.state = 946;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,158,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 944;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 929;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 928;
                        this.match(CypherParser.SP);
                    }

                    this.state = 931;
                    this.match(CypherParser.T__12);
                    this.state = 933;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 932;
                        this.match(CypherParser.SP);
                    }

                    this.state = 935;
                    this.oC_MultiplyDivideModuloExpression();
                    break;

                case 2:
                    this.state = 937;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 936;
                        this.match(CypherParser.SP);
                    }

                    this.state = 939;
                    this.match(CypherParser.T__13);
                    this.state = 941;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 940;
                        this.match(CypherParser.SP);
                    }

                    this.state = 943;
                    this.oC_MultiplyDivideModuloExpression();
                    break;

                } 
            }
            this.state = 948;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,158,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_MultiplyDivideModuloExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_MultiplyDivideModuloExpression;
    return this;
}

OC_MultiplyDivideModuloExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_MultiplyDivideModuloExpressionContext.prototype.constructor = OC_MultiplyDivideModuloExpressionContext;

OC_MultiplyDivideModuloExpressionContext.prototype.oC_PowerOfExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_PowerOfExpressionContext);
    } else {
        return this.getTypedRuleContext(OC_PowerOfExpressionContext,i);
    }
};

OC_MultiplyDivideModuloExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_MultiplyDivideModuloExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_MultiplyDivideModuloExpression(this);
	}
};

OC_MultiplyDivideModuloExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_MultiplyDivideModuloExpression(this);
	}
};




CypherParser.OC_MultiplyDivideModuloExpressionContext = OC_MultiplyDivideModuloExpressionContext;

CypherParser.prototype.oC_MultiplyDivideModuloExpression = function() {

    var localctx = new OC_MultiplyDivideModuloExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CypherParser.RULE_oC_MultiplyDivideModuloExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 949;
        this.oC_PowerOfExpression();
        this.state = 976;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,166,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 974;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 951;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 950;
                        this.match(CypherParser.SP);
                    }

                    this.state = 953;
                    this.match(CypherParser.T__4);
                    this.state = 955;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 954;
                        this.match(CypherParser.SP);
                    }

                    this.state = 957;
                    this.oC_PowerOfExpression();
                    break;

                case 2:
                    this.state = 959;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 958;
                        this.match(CypherParser.SP);
                    }

                    this.state = 961;
                    this.match(CypherParser.T__14);
                    this.state = 963;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 962;
                        this.match(CypherParser.SP);
                    }

                    this.state = 965;
                    this.oC_PowerOfExpression();
                    break;

                case 3:
                    this.state = 967;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 966;
                        this.match(CypherParser.SP);
                    }

                    this.state = 969;
                    this.match(CypherParser.T__15);
                    this.state = 971;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CypherParser.SP) {
                        this.state = 970;
                        this.match(CypherParser.SP);
                    }

                    this.state = 973;
                    this.oC_PowerOfExpression();
                    break;

                } 
            }
            this.state = 978;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,166,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_PowerOfExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PowerOfExpression;
    return this;
}

OC_PowerOfExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_PowerOfExpressionContext.prototype.constructor = OC_PowerOfExpressionContext;

OC_PowerOfExpressionContext.prototype.oC_UnaryAddOrSubtractExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_UnaryAddOrSubtractExpressionContext);
    } else {
        return this.getTypedRuleContext(OC_UnaryAddOrSubtractExpressionContext,i);
    }
};

OC_PowerOfExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_PowerOfExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_PowerOfExpression(this);
	}
};

OC_PowerOfExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_PowerOfExpression(this);
	}
};




CypherParser.OC_PowerOfExpressionContext = OC_PowerOfExpressionContext;

CypherParser.prototype.oC_PowerOfExpression = function() {

    var localctx = new OC_PowerOfExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, CypherParser.RULE_oC_PowerOfExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 979;
        this.oC_UnaryAddOrSubtractExpression();
        this.state = 990;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,169,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 981;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 980;
                    this.match(CypherParser.SP);
                }

                this.state = 983;
                this.match(CypherParser.T__16);
                this.state = 985;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 984;
                    this.match(CypherParser.SP);
                }

                this.state = 987;
                this.oC_UnaryAddOrSubtractExpression(); 
            }
            this.state = 992;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,169,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_UnaryAddOrSubtractExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_UnaryAddOrSubtractExpression;
    return this;
}

OC_UnaryAddOrSubtractExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_UnaryAddOrSubtractExpressionContext.prototype.constructor = OC_UnaryAddOrSubtractExpressionContext;

OC_UnaryAddOrSubtractExpressionContext.prototype.oC_StringListNullOperatorExpression = function() {
    return this.getTypedRuleContext(OC_StringListNullOperatorExpressionContext,0);
};

OC_UnaryAddOrSubtractExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_UnaryAddOrSubtractExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_UnaryAddOrSubtractExpression(this);
	}
};

OC_UnaryAddOrSubtractExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_UnaryAddOrSubtractExpression(this);
	}
};




CypherParser.OC_UnaryAddOrSubtractExpressionContext = OC_UnaryAddOrSubtractExpressionContext;

CypherParser.prototype.oC_UnaryAddOrSubtractExpression = function() {

    var localctx = new OC_UnaryAddOrSubtractExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CypherParser.RULE_oC_UnaryAddOrSubtractExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 999;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CypherParser.T__12 || _la===CypherParser.T__13) {
            this.state = 993;
            _la = this._input.LA(1);
            if(!(_la===CypherParser.T__12 || _la===CypherParser.T__13)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 995;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 994;
                this.match(CypherParser.SP);
            }

            this.state = 1001;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1002;
        this.oC_StringListNullOperatorExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_StringListNullOperatorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_StringListNullOperatorExpression;
    return this;
}

OC_StringListNullOperatorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_StringListNullOperatorExpressionContext.prototype.constructor = OC_StringListNullOperatorExpressionContext;

OC_StringListNullOperatorExpressionContext.prototype.oC_PropertyOrLabelsExpression = function() {
    return this.getTypedRuleContext(OC_PropertyOrLabelsExpressionContext,0);
};

OC_StringListNullOperatorExpressionContext.prototype.oC_StringOperatorExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_StringOperatorExpressionContext);
    } else {
        return this.getTypedRuleContext(OC_StringOperatorExpressionContext,i);
    }
};

OC_StringListNullOperatorExpressionContext.prototype.oC_ListOperatorExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_ListOperatorExpressionContext);
    } else {
        return this.getTypedRuleContext(OC_ListOperatorExpressionContext,i);
    }
};

OC_StringListNullOperatorExpressionContext.prototype.oC_NullOperatorExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_NullOperatorExpressionContext);
    } else {
        return this.getTypedRuleContext(OC_NullOperatorExpressionContext,i);
    }
};

OC_StringListNullOperatorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_StringListNullOperatorExpression(this);
	}
};

OC_StringListNullOperatorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_StringListNullOperatorExpression(this);
	}
};




CypherParser.OC_StringListNullOperatorExpressionContext = OC_StringListNullOperatorExpressionContext;

CypherParser.prototype.oC_StringListNullOperatorExpression = function() {

    var localctx = new OC_StringListNullOperatorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, CypherParser.RULE_oC_StringListNullOperatorExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1004;
        this.oC_PropertyOrLabelsExpression();
        this.state = 1010;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,173,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1008;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1005;
                    this.oC_StringOperatorExpression();
                    break;

                case 2:
                    this.state = 1006;
                    this.oC_ListOperatorExpression();
                    break;

                case 3:
                    this.state = 1007;
                    this.oC_NullOperatorExpression();
                    break;

                } 
            }
            this.state = 1012;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,173,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_ListOperatorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ListOperatorExpression;
    return this;
}

OC_ListOperatorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_ListOperatorExpressionContext.prototype.constructor = OC_ListOperatorExpressionContext;

OC_ListOperatorExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_ListOperatorExpressionContext.prototype.IN = function() {
    return this.getToken(CypherParser.IN, 0);
};

OC_ListOperatorExpressionContext.prototype.oC_PropertyOrLabelsExpression = function() {
    return this.getTypedRuleContext(OC_PropertyOrLabelsExpressionContext,0);
};

OC_ListOperatorExpressionContext.prototype.oC_Expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_ExpressionContext);
    } else {
        return this.getTypedRuleContext(OC_ExpressionContext,i);
    }
};

OC_ListOperatorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_ListOperatorExpression(this);
	}
};

OC_ListOperatorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_ListOperatorExpression(this);
	}
};




CypherParser.OC_ListOperatorExpressionContext = OC_ListOperatorExpressionContext;

CypherParser.prototype.oC_ListOperatorExpression = function() {

    var localctx = new OC_ListOperatorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CypherParser.RULE_oC_ListOperatorExpression);
    var _la = 0; // Token type
    try {
        this.state = 1038;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1013;
            this.match(CypherParser.SP);
            this.state = 1014;
            this.match(CypherParser.IN);
            this.state = 1016;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1015;
                this.match(CypherParser.SP);
            }

            this.state = 1018;
            this.oC_PropertyOrLabelsExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1020;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1019;
                this.match(CypherParser.SP);
            }

            this.state = 1022;
            this.match(CypherParser.T__7);
            this.state = 1023;
            this.oC_Expression();
            this.state = 1024;
            this.match(CypherParser.T__8);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1027;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1026;
                this.match(CypherParser.SP);
            }

            this.state = 1029;
            this.match(CypherParser.T__7);
            this.state = 1031;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__5) | (1 << CypherParser.T__7) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__23) | (1 << CypherParser.T__25))) !== 0) || _la===CypherParser.ALL || _la===CypherParser.NOT || ((((_la - 82)) & ~0x1f) == 0 && ((1 << (_la - 82)) & ((1 << (CypherParser.NULL - 82)) | (1 << (CypherParser.COUNT - 82)) | (1 << (CypherParser.ANY - 82)) | (1 << (CypherParser.NONE - 82)) | (1 << (CypherParser.SINGLE - 82)) | (1 << (CypherParser.TRUE - 82)) | (1 << (CypherParser.FALSE - 82)) | (1 << (CypherParser.EXISTS - 82)) | (1 << (CypherParser.CASE - 82)) | (1 << (CypherParser.StringLiteral - 82)) | (1 << (CypherParser.HexInteger - 82)) | (1 << (CypherParser.DecimalInteger - 82)) | (1 << (CypherParser.OctalInteger - 82)) | (1 << (CypherParser.HexLetter - 82)) | (1 << (CypherParser.ExponentDecimalReal - 82)) | (1 << (CypherParser.RegularDecimalReal - 82)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.FILTER - 118)) | (1 << (CypherParser.EXTRACT - 118)) | (1 << (CypherParser.UnescapedSymbolicName - 118)) | (1 << (CypherParser.EscapedSymbolicName - 118)))) !== 0)) {
                this.state = 1030;
                this.oC_Expression();
            }

            this.state = 1033;
            this.match(CypherParser.T__11);
            this.state = 1035;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__5) | (1 << CypherParser.T__7) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__23) | (1 << CypherParser.T__25))) !== 0) || _la===CypherParser.ALL || _la===CypherParser.NOT || ((((_la - 82)) & ~0x1f) == 0 && ((1 << (_la - 82)) & ((1 << (CypherParser.NULL - 82)) | (1 << (CypherParser.COUNT - 82)) | (1 << (CypherParser.ANY - 82)) | (1 << (CypherParser.NONE - 82)) | (1 << (CypherParser.SINGLE - 82)) | (1 << (CypherParser.TRUE - 82)) | (1 << (CypherParser.FALSE - 82)) | (1 << (CypherParser.EXISTS - 82)) | (1 << (CypherParser.CASE - 82)) | (1 << (CypherParser.StringLiteral - 82)) | (1 << (CypherParser.HexInteger - 82)) | (1 << (CypherParser.DecimalInteger - 82)) | (1 << (CypherParser.OctalInteger - 82)) | (1 << (CypherParser.HexLetter - 82)) | (1 << (CypherParser.ExponentDecimalReal - 82)) | (1 << (CypherParser.RegularDecimalReal - 82)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.FILTER - 118)) | (1 << (CypherParser.EXTRACT - 118)) | (1 << (CypherParser.UnescapedSymbolicName - 118)) | (1 << (CypherParser.EscapedSymbolicName - 118)))) !== 0)) {
                this.state = 1034;
                this.oC_Expression();
            }

            this.state = 1037;
            this.match(CypherParser.T__8);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_StringOperatorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_StringOperatorExpression;
    return this;
}

OC_StringOperatorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_StringOperatorExpressionContext.prototype.constructor = OC_StringOperatorExpressionContext;

OC_StringOperatorExpressionContext.prototype.oC_PropertyOrLabelsExpression = function() {
    return this.getTypedRuleContext(OC_PropertyOrLabelsExpressionContext,0);
};

OC_StringOperatorExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_StringOperatorExpressionContext.prototype.STARTS = function() {
    return this.getToken(CypherParser.STARTS, 0);
};

OC_StringOperatorExpressionContext.prototype.WITH = function() {
    return this.getToken(CypherParser.WITH, 0);
};

OC_StringOperatorExpressionContext.prototype.ENDS = function() {
    return this.getToken(CypherParser.ENDS, 0);
};

OC_StringOperatorExpressionContext.prototype.CONTAINS = function() {
    return this.getToken(CypherParser.CONTAINS, 0);
};

OC_StringOperatorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_StringOperatorExpression(this);
	}
};

OC_StringOperatorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_StringOperatorExpression(this);
	}
};




CypherParser.OC_StringOperatorExpressionContext = OC_StringOperatorExpressionContext;

CypherParser.prototype.oC_StringOperatorExpression = function() {

    var localctx = new OC_StringOperatorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CypherParser.RULE_oC_StringOperatorExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1050;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1040;
            this.match(CypherParser.SP);
            this.state = 1041;
            this.match(CypherParser.STARTS);
            this.state = 1042;
            this.match(CypherParser.SP);
            this.state = 1043;
            this.match(CypherParser.WITH);
            break;

        case 2:
            this.state = 1044;
            this.match(CypherParser.SP);
            this.state = 1045;
            this.match(CypherParser.ENDS);
            this.state = 1046;
            this.match(CypherParser.SP);
            this.state = 1047;
            this.match(CypherParser.WITH);
            break;

        case 3:
            this.state = 1048;
            this.match(CypherParser.SP);
            this.state = 1049;
            this.match(CypherParser.CONTAINS);
            break;

        }
        this.state = 1053;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1052;
            this.match(CypherParser.SP);
        }

        this.state = 1055;
        this.oC_PropertyOrLabelsExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_NullOperatorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_NullOperatorExpression;
    return this;
}

OC_NullOperatorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_NullOperatorExpressionContext.prototype.constructor = OC_NullOperatorExpressionContext;

OC_NullOperatorExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_NullOperatorExpressionContext.prototype.IS = function() {
    return this.getToken(CypherParser.IS, 0);
};

OC_NullOperatorExpressionContext.prototype.NULL = function() {
    return this.getToken(CypherParser.NULL, 0);
};

OC_NullOperatorExpressionContext.prototype.NOT = function() {
    return this.getToken(CypherParser.NOT, 0);
};

OC_NullOperatorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_NullOperatorExpression(this);
	}
};

OC_NullOperatorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_NullOperatorExpression(this);
	}
};




CypherParser.OC_NullOperatorExpressionContext = OC_NullOperatorExpressionContext;

CypherParser.prototype.oC_NullOperatorExpression = function() {

    var localctx = new OC_NullOperatorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CypherParser.RULE_oC_NullOperatorExpression);
    try {
        this.state = 1067;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1057;
            this.match(CypherParser.SP);
            this.state = 1058;
            this.match(CypherParser.IS);
            this.state = 1059;
            this.match(CypherParser.SP);
            this.state = 1060;
            this.match(CypherParser.NULL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1061;
            this.match(CypherParser.SP);
            this.state = 1062;
            this.match(CypherParser.IS);
            this.state = 1063;
            this.match(CypherParser.SP);
            this.state = 1064;
            this.match(CypherParser.NOT);
            this.state = 1065;
            this.match(CypherParser.SP);
            this.state = 1066;
            this.match(CypherParser.NULL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_PropertyOrLabelsExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PropertyOrLabelsExpression;
    return this;
}

OC_PropertyOrLabelsExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_PropertyOrLabelsExpressionContext.prototype.constructor = OC_PropertyOrLabelsExpressionContext;

OC_PropertyOrLabelsExpressionContext.prototype.oC_Atom = function() {
    return this.getTypedRuleContext(OC_AtomContext,0);
};

OC_PropertyOrLabelsExpressionContext.prototype.oC_PropertyLookup = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_PropertyLookupContext);
    } else {
        return this.getTypedRuleContext(OC_PropertyLookupContext,i);
    }
};

OC_PropertyOrLabelsExpressionContext.prototype.oC_NodeLabels = function() {
    return this.getTypedRuleContext(OC_NodeLabelsContext,0);
};

OC_PropertyOrLabelsExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_PropertyOrLabelsExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_PropertyOrLabelsExpression(this);
	}
};

OC_PropertyOrLabelsExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_PropertyOrLabelsExpression(this);
	}
};




CypherParser.OC_PropertyOrLabelsExpressionContext = OC_PropertyOrLabelsExpressionContext;

CypherParser.prototype.oC_PropertyOrLabelsExpression = function() {

    var localctx = new OC_PropertyOrLabelsExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CypherParser.RULE_oC_PropertyOrLabelsExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1069;
        this.oC_Atom();
        this.state = 1076;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,184,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1071;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1070;
                    this.match(CypherParser.SP);
                }

                this.state = 1073;
                this.oC_PropertyLookup(); 
            }
            this.state = 1078;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,184,this._ctx);
        }

        this.state = 1083;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
        if(la_===1) {
            this.state = 1080;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1079;
                this.match(CypherParser.SP);
            }

            this.state = 1082;
            this.oC_NodeLabels();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_AtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Atom;
    return this;
}

OC_AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_AtomContext.prototype.constructor = OC_AtomContext;

OC_AtomContext.prototype.oC_Literal = function() {
    return this.getTypedRuleContext(OC_LiteralContext,0);
};

OC_AtomContext.prototype.oC_Parameter = function() {
    return this.getTypedRuleContext(OC_ParameterContext,0);
};

OC_AtomContext.prototype.oC_CaseExpression = function() {
    return this.getTypedRuleContext(OC_CaseExpressionContext,0);
};

OC_AtomContext.prototype.COUNT = function() {
    return this.getToken(CypherParser.COUNT, 0);
};

OC_AtomContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_AtomContext.prototype.oC_ListComprehension = function() {
    return this.getTypedRuleContext(OC_ListComprehensionContext,0);
};

OC_AtomContext.prototype.oC_PatternComprehension = function() {
    return this.getTypedRuleContext(OC_PatternComprehensionContext,0);
};

OC_AtomContext.prototype.ALL = function() {
    return this.getToken(CypherParser.ALL, 0);
};

OC_AtomContext.prototype.oC_FilterExpression = function() {
    return this.getTypedRuleContext(OC_FilterExpressionContext,0);
};

OC_AtomContext.prototype.ANY = function() {
    return this.getToken(CypherParser.ANY, 0);
};

OC_AtomContext.prototype.NONE = function() {
    return this.getToken(CypherParser.NONE, 0);
};

OC_AtomContext.prototype.SINGLE = function() {
    return this.getToken(CypherParser.SINGLE, 0);
};

OC_AtomContext.prototype.oC_RelationshipsPattern = function() {
    return this.getTypedRuleContext(OC_RelationshipsPatternContext,0);
};

OC_AtomContext.prototype.oC_ParenthesizedExpression = function() {
    return this.getTypedRuleContext(OC_ParenthesizedExpressionContext,0);
};

OC_AtomContext.prototype.oC_FunctionInvocation = function() {
    return this.getTypedRuleContext(OC_FunctionInvocationContext,0);
};

OC_AtomContext.prototype.oC_Variable = function() {
    return this.getTypedRuleContext(OC_VariableContext,0);
};

OC_AtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Atom(this);
	}
};

OC_AtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Atom(this);
	}
};




CypherParser.OC_AtomContext = OC_AtomContext;

CypherParser.prototype.oC_Atom = function() {

    var localctx = new OC_AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CypherParser.RULE_oC_Atom);
    var _la = 0; // Token type
    try {
        this.state = 1163;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1085;
            this.oC_Literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1086;
            this.oC_Parameter();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1087;
            this.oC_CaseExpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1088;
            this.match(CypherParser.COUNT);
            this.state = 1090;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1089;
                this.match(CypherParser.SP);
            }

            this.state = 1092;
            this.match(CypherParser.T__5);
            this.state = 1094;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1093;
                this.match(CypherParser.SP);
            }

            this.state = 1096;
            this.match(CypherParser.T__4);
            this.state = 1098;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1097;
                this.match(CypherParser.SP);
            }

            this.state = 1100;
            this.match(CypherParser.T__6);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1101;
            this.oC_ListComprehension();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1102;
            this.oC_PatternComprehension();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1103;
            this.match(CypherParser.ALL);
            this.state = 1105;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1104;
                this.match(CypherParser.SP);
            }

            this.state = 1107;
            this.match(CypherParser.T__5);
            this.state = 1109;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1108;
                this.match(CypherParser.SP);
            }

            this.state = 1111;
            this.oC_FilterExpression();
            this.state = 1113;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1112;
                this.match(CypherParser.SP);
            }

            this.state = 1115;
            this.match(CypherParser.T__6);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1117;
            this.match(CypherParser.ANY);
            this.state = 1119;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1118;
                this.match(CypherParser.SP);
            }

            this.state = 1121;
            this.match(CypherParser.T__5);
            this.state = 1123;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1122;
                this.match(CypherParser.SP);
            }

            this.state = 1125;
            this.oC_FilterExpression();
            this.state = 1127;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1126;
                this.match(CypherParser.SP);
            }

            this.state = 1129;
            this.match(CypherParser.T__6);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1131;
            this.match(CypherParser.NONE);
            this.state = 1133;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1132;
                this.match(CypherParser.SP);
            }

            this.state = 1135;
            this.match(CypherParser.T__5);
            this.state = 1137;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1136;
                this.match(CypherParser.SP);
            }

            this.state = 1139;
            this.oC_FilterExpression();
            this.state = 1141;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1140;
                this.match(CypherParser.SP);
            }

            this.state = 1143;
            this.match(CypherParser.T__6);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1145;
            this.match(CypherParser.SINGLE);
            this.state = 1147;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1146;
                this.match(CypherParser.SP);
            }

            this.state = 1149;
            this.match(CypherParser.T__5);
            this.state = 1151;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1150;
                this.match(CypherParser.SP);
            }

            this.state = 1153;
            this.oC_FilterExpression();
            this.state = 1155;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1154;
                this.match(CypherParser.SP);
            }

            this.state = 1157;
            this.match(CypherParser.T__6);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1159;
            this.oC_RelationshipsPattern();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 1160;
            this.oC_ParenthesizedExpression();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 1161;
            this.oC_FunctionInvocation();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 1162;
            this.oC_Variable();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Literal;
    return this;
}

OC_LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_LiteralContext.prototype.constructor = OC_LiteralContext;

OC_LiteralContext.prototype.oC_NumberLiteral = function() {
    return this.getTypedRuleContext(OC_NumberLiteralContext,0);
};

OC_LiteralContext.prototype.StringLiteral = function() {
    return this.getToken(CypherParser.StringLiteral, 0);
};

OC_LiteralContext.prototype.oC_BooleanLiteral = function() {
    return this.getTypedRuleContext(OC_BooleanLiteralContext,0);
};

OC_LiteralContext.prototype.NULL = function() {
    return this.getToken(CypherParser.NULL, 0);
};

OC_LiteralContext.prototype.oC_MapLiteral = function() {
    return this.getTypedRuleContext(OC_MapLiteralContext,0);
};

OC_LiteralContext.prototype.oC_ListLiteral = function() {
    return this.getTypedRuleContext(OC_ListLiteralContext,0);
};

OC_LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Literal(this);
	}
};

OC_LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Literal(this);
	}
};




CypherParser.OC_LiteralContext = OC_LiteralContext;

CypherParser.prototype.oC_Literal = function() {

    var localctx = new OC_LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CypherParser.RULE_oC_Literal);
    try {
        this.state = 1171;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.HexInteger:
        case CypherParser.DecimalInteger:
        case CypherParser.OctalInteger:
        case CypherParser.ExponentDecimalReal:
        case CypherParser.RegularDecimalReal:
            this.enterOuterAlt(localctx, 1);
            this.state = 1165;
            this.oC_NumberLiteral();
            break;
        case CypherParser.StringLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 1166;
            this.match(CypherParser.StringLiteral);
            break;
        case CypherParser.TRUE:
        case CypherParser.FALSE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1167;
            this.oC_BooleanLiteral();
            break;
        case CypherParser.NULL:
            this.enterOuterAlt(localctx, 4);
            this.state = 1168;
            this.match(CypherParser.NULL);
            break;
        case CypherParser.T__23:
            this.enterOuterAlt(localctx, 5);
            this.state = 1169;
            this.oC_MapLiteral();
            break;
        case CypherParser.T__7:
            this.enterOuterAlt(localctx, 6);
            this.state = 1170;
            this.oC_ListLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_BooleanLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_BooleanLiteral;
    return this;
}

OC_BooleanLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_BooleanLiteralContext.prototype.constructor = OC_BooleanLiteralContext;

OC_BooleanLiteralContext.prototype.TRUE = function() {
    return this.getToken(CypherParser.TRUE, 0);
};

OC_BooleanLiteralContext.prototype.FALSE = function() {
    return this.getToken(CypherParser.FALSE, 0);
};

OC_BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_BooleanLiteral(this);
	}
};

OC_BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_BooleanLiteral(this);
	}
};




CypherParser.OC_BooleanLiteralContext = OC_BooleanLiteralContext;

CypherParser.prototype.oC_BooleanLiteral = function() {

    var localctx = new OC_BooleanLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CypherParser.RULE_oC_BooleanLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1173;
        _la = this._input.LA(1);
        if(!(_la===CypherParser.TRUE || _la===CypherParser.FALSE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_ListLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ListLiteral;
    return this;
}

OC_ListLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_ListLiteralContext.prototype.constructor = OC_ListLiteralContext;

OC_ListLiteralContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_ListLiteralContext.prototype.oC_Expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_ExpressionContext);
    } else {
        return this.getTypedRuleContext(OC_ExpressionContext,i);
    }
};

OC_ListLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_ListLiteral(this);
	}
};

OC_ListLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_ListLiteral(this);
	}
};




CypherParser.OC_ListLiteralContext = OC_ListLiteralContext;

CypherParser.prototype.oC_ListLiteral = function() {

    var localctx = new OC_ListLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CypherParser.RULE_oC_ListLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1175;
        this.match(CypherParser.T__7);
        this.state = 1177;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1176;
            this.match(CypherParser.SP);
        }

        this.state = 1196;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__5) | (1 << CypherParser.T__7) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__23) | (1 << CypherParser.T__25))) !== 0) || _la===CypherParser.ALL || _la===CypherParser.NOT || ((((_la - 82)) & ~0x1f) == 0 && ((1 << (_la - 82)) & ((1 << (CypherParser.NULL - 82)) | (1 << (CypherParser.COUNT - 82)) | (1 << (CypherParser.ANY - 82)) | (1 << (CypherParser.NONE - 82)) | (1 << (CypherParser.SINGLE - 82)) | (1 << (CypherParser.TRUE - 82)) | (1 << (CypherParser.FALSE - 82)) | (1 << (CypherParser.EXISTS - 82)) | (1 << (CypherParser.CASE - 82)) | (1 << (CypherParser.StringLiteral - 82)) | (1 << (CypherParser.HexInteger - 82)) | (1 << (CypherParser.DecimalInteger - 82)) | (1 << (CypherParser.OctalInteger - 82)) | (1 << (CypherParser.HexLetter - 82)) | (1 << (CypherParser.ExponentDecimalReal - 82)) | (1 << (CypherParser.RegularDecimalReal - 82)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.FILTER - 118)) | (1 << (CypherParser.EXTRACT - 118)) | (1 << (CypherParser.UnescapedSymbolicName - 118)) | (1 << (CypherParser.EscapedSymbolicName - 118)))) !== 0)) {
            this.state = 1179;
            this.oC_Expression();
            this.state = 1181;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1180;
                this.match(CypherParser.SP);
            }

            this.state = 1193;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CypherParser.T__1) {
                this.state = 1183;
                this.match(CypherParser.T__1);
                this.state = 1185;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1184;
                    this.match(CypherParser.SP);
                }

                this.state = 1187;
                this.oC_Expression();
                this.state = 1189;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1188;
                    this.match(CypherParser.SP);
                }

                this.state = 1195;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1198;
        this.match(CypherParser.T__8);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_PartialComparisonExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PartialComparisonExpression;
    return this;
}

OC_PartialComparisonExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_PartialComparisonExpressionContext.prototype.constructor = OC_PartialComparisonExpressionContext;

OC_PartialComparisonExpressionContext.prototype.oC_AddOrSubtractExpression = function() {
    return this.getTypedRuleContext(OC_AddOrSubtractExpressionContext,0);
};

OC_PartialComparisonExpressionContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

OC_PartialComparisonExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_PartialComparisonExpression(this);
	}
};

OC_PartialComparisonExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_PartialComparisonExpression(this);
	}
};




CypherParser.OC_PartialComparisonExpressionContext = OC_PartialComparisonExpressionContext;

CypherParser.prototype.oC_PartialComparisonExpression = function() {

    var localctx = new OC_PartialComparisonExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CypherParser.RULE_oC_PartialComparisonExpression);
    var _la = 0; // Token type
    try {
        this.state = 1230;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.T__2:
            this.enterOuterAlt(localctx, 1);
            this.state = 1200;
            this.match(CypherParser.T__2);
            this.state = 1202;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1201;
                this.match(CypherParser.SP);
            }

            this.state = 1204;
            this.oC_AddOrSubtractExpression();
            break;
        case CypherParser.T__17:
            this.enterOuterAlt(localctx, 2);
            this.state = 1205;
            this.match(CypherParser.T__17);
            this.state = 1207;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1206;
                this.match(CypherParser.SP);
            }

            this.state = 1209;
            this.oC_AddOrSubtractExpression();
            break;
        case CypherParser.T__18:
            this.enterOuterAlt(localctx, 3);
            this.state = 1210;
            this.match(CypherParser.T__18);
            this.state = 1212;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1211;
                this.match(CypherParser.SP);
            }

            this.state = 1214;
            this.oC_AddOrSubtractExpression();
            break;
        case CypherParser.T__19:
            this.enterOuterAlt(localctx, 4);
            this.state = 1215;
            this.match(CypherParser.T__19);
            this.state = 1217;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1216;
                this.match(CypherParser.SP);
            }

            this.state = 1219;
            this.oC_AddOrSubtractExpression();
            break;
        case CypherParser.T__20:
            this.enterOuterAlt(localctx, 5);
            this.state = 1220;
            this.match(CypherParser.T__20);
            this.state = 1222;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1221;
                this.match(CypherParser.SP);
            }

            this.state = 1224;
            this.oC_AddOrSubtractExpression();
            break;
        case CypherParser.T__21:
            this.enterOuterAlt(localctx, 6);
            this.state = 1225;
            this.match(CypherParser.T__21);
            this.state = 1227;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1226;
                this.match(CypherParser.SP);
            }

            this.state = 1229;
            this.oC_AddOrSubtractExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_ParenthesizedExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ParenthesizedExpression;
    return this;
}

OC_ParenthesizedExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_ParenthesizedExpressionContext.prototype.constructor = OC_ParenthesizedExpressionContext;

OC_ParenthesizedExpressionContext.prototype.oC_Expression = function() {
    return this.getTypedRuleContext(OC_ExpressionContext,0);
};

OC_ParenthesizedExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_ParenthesizedExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_ParenthesizedExpression(this);
	}
};

OC_ParenthesizedExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_ParenthesizedExpression(this);
	}
};




CypherParser.OC_ParenthesizedExpressionContext = OC_ParenthesizedExpressionContext;

CypherParser.prototype.oC_ParenthesizedExpression = function() {

    var localctx = new OC_ParenthesizedExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, CypherParser.RULE_oC_ParenthesizedExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1232;
        this.match(CypherParser.T__5);
        this.state = 1234;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1233;
            this.match(CypherParser.SP);
        }

        this.state = 1236;
        this.oC_Expression();
        this.state = 1238;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1237;
            this.match(CypherParser.SP);
        }

        this.state = 1240;
        this.match(CypherParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_RelationshipsPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_RelationshipsPattern;
    return this;
}

OC_RelationshipsPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_RelationshipsPatternContext.prototype.constructor = OC_RelationshipsPatternContext;

OC_RelationshipsPatternContext.prototype.oC_NodePattern = function() {
    return this.getTypedRuleContext(OC_NodePatternContext,0);
};

OC_RelationshipsPatternContext.prototype.oC_PatternElementChain = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_PatternElementChainContext);
    } else {
        return this.getTypedRuleContext(OC_PatternElementChainContext,i);
    }
};

OC_RelationshipsPatternContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_RelationshipsPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_RelationshipsPattern(this);
	}
};

OC_RelationshipsPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_RelationshipsPattern(this);
	}
};




CypherParser.OC_RelationshipsPatternContext = OC_RelationshipsPatternContext;

CypherParser.prototype.oC_RelationshipsPattern = function() {

    var localctx = new OC_RelationshipsPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CypherParser.RULE_oC_RelationshipsPattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1242;
        this.oC_NodePattern();
        this.state = 1247; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1244;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		if(_la===CypherParser.SP) {
        		    this.state = 1243;
        		    this.match(CypherParser.SP);
        		}

        		this.state = 1246;
        		this.oC_PatternElementChain();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1249; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,220, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_FilterExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_FilterExpression;
    return this;
}

OC_FilterExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_FilterExpressionContext.prototype.constructor = OC_FilterExpressionContext;

OC_FilterExpressionContext.prototype.oC_IdInColl = function() {
    return this.getTypedRuleContext(OC_IdInCollContext,0);
};

OC_FilterExpressionContext.prototype.oC_Where = function() {
    return this.getTypedRuleContext(OC_WhereContext,0);
};

OC_FilterExpressionContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

OC_FilterExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_FilterExpression(this);
	}
};

OC_FilterExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_FilterExpression(this);
	}
};




CypherParser.OC_FilterExpressionContext = OC_FilterExpressionContext;

CypherParser.prototype.oC_FilterExpression = function() {

    var localctx = new OC_FilterExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CypherParser.RULE_oC_FilterExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1251;
        this.oC_IdInColl();
        this.state = 1256;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
        if(la_===1) {
            this.state = 1253;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1252;
                this.match(CypherParser.SP);
            }

            this.state = 1255;
            this.oC_Where();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_IdInCollContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_IdInColl;
    return this;
}

OC_IdInCollContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_IdInCollContext.prototype.constructor = OC_IdInCollContext;

OC_IdInCollContext.prototype.oC_Variable = function() {
    return this.getTypedRuleContext(OC_VariableContext,0);
};

OC_IdInCollContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_IdInCollContext.prototype.IN = function() {
    return this.getToken(CypherParser.IN, 0);
};

OC_IdInCollContext.prototype.oC_Expression = function() {
    return this.getTypedRuleContext(OC_ExpressionContext,0);
};

OC_IdInCollContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_IdInColl(this);
	}
};

OC_IdInCollContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_IdInColl(this);
	}
};




CypherParser.OC_IdInCollContext = OC_IdInCollContext;

CypherParser.prototype.oC_IdInColl = function() {

    var localctx = new OC_IdInCollContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CypherParser.RULE_oC_IdInColl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1258;
        this.oC_Variable();
        this.state = 1259;
        this.match(CypherParser.SP);
        this.state = 1260;
        this.match(CypherParser.IN);
        this.state = 1261;
        this.match(CypherParser.SP);
        this.state = 1262;
        this.oC_Expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_FunctionInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_FunctionInvocation;
    return this;
}

OC_FunctionInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_FunctionInvocationContext.prototype.constructor = OC_FunctionInvocationContext;

OC_FunctionInvocationContext.prototype.oC_FunctionName = function() {
    return this.getTypedRuleContext(OC_FunctionNameContext,0);
};

OC_FunctionInvocationContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_FunctionInvocationContext.prototype.DISTINCT = function() {
    return this.getToken(CypherParser.DISTINCT, 0);
};

OC_FunctionInvocationContext.prototype.oC_Expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_ExpressionContext);
    } else {
        return this.getTypedRuleContext(OC_ExpressionContext,i);
    }
};

OC_FunctionInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_FunctionInvocation(this);
	}
};

OC_FunctionInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_FunctionInvocation(this);
	}
};




CypherParser.OC_FunctionInvocationContext = OC_FunctionInvocationContext;

CypherParser.prototype.oC_FunctionInvocation = function() {

    var localctx = new OC_FunctionInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CypherParser.RULE_oC_FunctionInvocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1264;
        this.oC_FunctionName();
        this.state = 1266;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1265;
            this.match(CypherParser.SP);
        }

        this.state = 1268;
        this.match(CypherParser.T__5);
        this.state = 1270;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1269;
            this.match(CypherParser.SP);
        }

        this.state = 1276;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.DISTINCT) {
            this.state = 1272;
            this.match(CypherParser.DISTINCT);
            this.state = 1274;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1273;
                this.match(CypherParser.SP);
            }

        }

        this.state = 1295;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__5) | (1 << CypherParser.T__7) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__23) | (1 << CypherParser.T__25))) !== 0) || _la===CypherParser.ALL || _la===CypherParser.NOT || ((((_la - 82)) & ~0x1f) == 0 && ((1 << (_la - 82)) & ((1 << (CypherParser.NULL - 82)) | (1 << (CypherParser.COUNT - 82)) | (1 << (CypherParser.ANY - 82)) | (1 << (CypherParser.NONE - 82)) | (1 << (CypherParser.SINGLE - 82)) | (1 << (CypherParser.TRUE - 82)) | (1 << (CypherParser.FALSE - 82)) | (1 << (CypherParser.EXISTS - 82)) | (1 << (CypherParser.CASE - 82)) | (1 << (CypherParser.StringLiteral - 82)) | (1 << (CypherParser.HexInteger - 82)) | (1 << (CypherParser.DecimalInteger - 82)) | (1 << (CypherParser.OctalInteger - 82)) | (1 << (CypherParser.HexLetter - 82)) | (1 << (CypherParser.ExponentDecimalReal - 82)) | (1 << (CypherParser.RegularDecimalReal - 82)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.FILTER - 118)) | (1 << (CypherParser.EXTRACT - 118)) | (1 << (CypherParser.UnescapedSymbolicName - 118)) | (1 << (CypherParser.EscapedSymbolicName - 118)))) !== 0)) {
            this.state = 1278;
            this.oC_Expression();
            this.state = 1280;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1279;
                this.match(CypherParser.SP);
            }

            this.state = 1292;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CypherParser.T__1) {
                this.state = 1282;
                this.match(CypherParser.T__1);
                this.state = 1284;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1283;
                    this.match(CypherParser.SP);
                }

                this.state = 1286;
                this.oC_Expression();
                this.state = 1288;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1287;
                    this.match(CypherParser.SP);
                }

                this.state = 1294;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1297;
        this.match(CypherParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_FunctionNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_FunctionName;
    return this;
}

OC_FunctionNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_FunctionNameContext.prototype.constructor = OC_FunctionNameContext;

OC_FunctionNameContext.prototype.oC_Namespace = function() {
    return this.getTypedRuleContext(OC_NamespaceContext,0);
};

OC_FunctionNameContext.prototype.oC_SymbolicName = function() {
    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
};

OC_FunctionNameContext.prototype.EXISTS = function() {
    return this.getToken(CypherParser.EXISTS, 0);
};

OC_FunctionNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_FunctionName(this);
	}
};

OC_FunctionNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_FunctionName(this);
	}
};




CypherParser.OC_FunctionNameContext = OC_FunctionNameContext;

CypherParser.prototype.oC_FunctionName = function() {

    var localctx = new OC_FunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CypherParser.RULE_oC_FunctionName);
    try {
        this.state = 1303;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.COUNT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.HexLetter:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1299;
            this.oC_Namespace();
            this.state = 1300;
            this.oC_SymbolicName();
            break;
        case CypherParser.EXISTS:
            this.enterOuterAlt(localctx, 2);
            this.state = 1302;
            this.match(CypherParser.EXISTS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_ExplicitProcedureInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ExplicitProcedureInvocation;
    return this;
}

OC_ExplicitProcedureInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_ExplicitProcedureInvocationContext.prototype.constructor = OC_ExplicitProcedureInvocationContext;

OC_ExplicitProcedureInvocationContext.prototype.oC_ProcedureName = function() {
    return this.getTypedRuleContext(OC_ProcedureNameContext,0);
};

OC_ExplicitProcedureInvocationContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_ExplicitProcedureInvocationContext.prototype.oC_Expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_ExpressionContext);
    } else {
        return this.getTypedRuleContext(OC_ExpressionContext,i);
    }
};

OC_ExplicitProcedureInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_ExplicitProcedureInvocation(this);
	}
};

OC_ExplicitProcedureInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_ExplicitProcedureInvocation(this);
	}
};




CypherParser.OC_ExplicitProcedureInvocationContext = OC_ExplicitProcedureInvocationContext;

CypherParser.prototype.oC_ExplicitProcedureInvocation = function() {

    var localctx = new OC_ExplicitProcedureInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CypherParser.RULE_oC_ExplicitProcedureInvocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1305;
        this.oC_ProcedureName();
        this.state = 1307;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1306;
            this.match(CypherParser.SP);
        }

        this.state = 1309;
        this.match(CypherParser.T__5);
        this.state = 1311;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1310;
            this.match(CypherParser.SP);
        }

        this.state = 1330;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__5) | (1 << CypherParser.T__7) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__23) | (1 << CypherParser.T__25))) !== 0) || _la===CypherParser.ALL || _la===CypherParser.NOT || ((((_la - 82)) & ~0x1f) == 0 && ((1 << (_la - 82)) & ((1 << (CypherParser.NULL - 82)) | (1 << (CypherParser.COUNT - 82)) | (1 << (CypherParser.ANY - 82)) | (1 << (CypherParser.NONE - 82)) | (1 << (CypherParser.SINGLE - 82)) | (1 << (CypherParser.TRUE - 82)) | (1 << (CypherParser.FALSE - 82)) | (1 << (CypherParser.EXISTS - 82)) | (1 << (CypherParser.CASE - 82)) | (1 << (CypherParser.StringLiteral - 82)) | (1 << (CypherParser.HexInteger - 82)) | (1 << (CypherParser.DecimalInteger - 82)) | (1 << (CypherParser.OctalInteger - 82)) | (1 << (CypherParser.HexLetter - 82)) | (1 << (CypherParser.ExponentDecimalReal - 82)) | (1 << (CypherParser.RegularDecimalReal - 82)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.FILTER - 118)) | (1 << (CypherParser.EXTRACT - 118)) | (1 << (CypherParser.UnescapedSymbolicName - 118)) | (1 << (CypherParser.EscapedSymbolicName - 118)))) !== 0)) {
            this.state = 1313;
            this.oC_Expression();
            this.state = 1315;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1314;
                this.match(CypherParser.SP);
            }

            this.state = 1327;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CypherParser.T__1) {
                this.state = 1317;
                this.match(CypherParser.T__1);
                this.state = 1319;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1318;
                    this.match(CypherParser.SP);
                }

                this.state = 1321;
                this.oC_Expression();
                this.state = 1323;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1322;
                    this.match(CypherParser.SP);
                }

                this.state = 1329;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1332;
        this.match(CypherParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_ImplicitProcedureInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ImplicitProcedureInvocation;
    return this;
}

OC_ImplicitProcedureInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_ImplicitProcedureInvocationContext.prototype.constructor = OC_ImplicitProcedureInvocationContext;

OC_ImplicitProcedureInvocationContext.prototype.oC_ProcedureName = function() {
    return this.getTypedRuleContext(OC_ProcedureNameContext,0);
};

OC_ImplicitProcedureInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_ImplicitProcedureInvocation(this);
	}
};

OC_ImplicitProcedureInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_ImplicitProcedureInvocation(this);
	}
};




CypherParser.OC_ImplicitProcedureInvocationContext = OC_ImplicitProcedureInvocationContext;

CypherParser.prototype.oC_ImplicitProcedureInvocation = function() {

    var localctx = new OC_ImplicitProcedureInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CypherParser.RULE_oC_ImplicitProcedureInvocation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1334;
        this.oC_ProcedureName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_ProcedureResultFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ProcedureResultField;
    return this;
}

OC_ProcedureResultFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_ProcedureResultFieldContext.prototype.constructor = OC_ProcedureResultFieldContext;

OC_ProcedureResultFieldContext.prototype.oC_SymbolicName = function() {
    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
};

OC_ProcedureResultFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_ProcedureResultField(this);
	}
};

OC_ProcedureResultFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_ProcedureResultField(this);
	}
};




CypherParser.OC_ProcedureResultFieldContext = OC_ProcedureResultFieldContext;

CypherParser.prototype.oC_ProcedureResultField = function() {

    var localctx = new OC_ProcedureResultFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CypherParser.RULE_oC_ProcedureResultField);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1336;
        this.oC_SymbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_ProcedureNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ProcedureName;
    return this;
}

OC_ProcedureNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_ProcedureNameContext.prototype.constructor = OC_ProcedureNameContext;

OC_ProcedureNameContext.prototype.oC_Namespace = function() {
    return this.getTypedRuleContext(OC_NamespaceContext,0);
};

OC_ProcedureNameContext.prototype.oC_SymbolicName = function() {
    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
};

OC_ProcedureNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_ProcedureName(this);
	}
};

OC_ProcedureNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_ProcedureName(this);
	}
};




CypherParser.OC_ProcedureNameContext = OC_ProcedureNameContext;

CypherParser.prototype.oC_ProcedureName = function() {

    var localctx = new OC_ProcedureNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CypherParser.RULE_oC_ProcedureName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1338;
        this.oC_Namespace();
        this.state = 1339;
        this.oC_SymbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_NamespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Namespace;
    return this;
}

OC_NamespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_NamespaceContext.prototype.constructor = OC_NamespaceContext;

OC_NamespaceContext.prototype.oC_SymbolicName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_SymbolicNameContext);
    } else {
        return this.getTypedRuleContext(OC_SymbolicNameContext,i);
    }
};

OC_NamespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Namespace(this);
	}
};

OC_NamespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Namespace(this);
	}
};




CypherParser.OC_NamespaceContext = OC_NamespaceContext;

CypherParser.prototype.oC_Namespace = function() {

    var localctx = new OC_NamespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CypherParser.RULE_oC_Namespace);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1346;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,240,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1341;
                this.oC_SymbolicName();
                this.state = 1342;
                this.match(CypherParser.T__22); 
            }
            this.state = 1348;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,240,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_ListComprehensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ListComprehension;
    return this;
}

OC_ListComprehensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_ListComprehensionContext.prototype.constructor = OC_ListComprehensionContext;

OC_ListComprehensionContext.prototype.oC_FilterExpression = function() {
    return this.getTypedRuleContext(OC_FilterExpressionContext,0);
};

OC_ListComprehensionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_ListComprehensionContext.prototype.oC_Expression = function() {
    return this.getTypedRuleContext(OC_ExpressionContext,0);
};

OC_ListComprehensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_ListComprehension(this);
	}
};

OC_ListComprehensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_ListComprehension(this);
	}
};




CypherParser.OC_ListComprehensionContext = OC_ListComprehensionContext;

CypherParser.prototype.oC_ListComprehension = function() {

    var localctx = new OC_ListComprehensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, CypherParser.RULE_oC_ListComprehension);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1349;
        this.match(CypherParser.T__7);
        this.state = 1351;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1350;
            this.match(CypherParser.SP);
        }

        this.state = 1353;
        this.oC_FilterExpression();
        this.state = 1362;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
        if(la_===1) {
            this.state = 1355;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1354;
                this.match(CypherParser.SP);
            }

            this.state = 1357;
            this.match(CypherParser.T__10);
            this.state = 1359;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1358;
                this.match(CypherParser.SP);
            }

            this.state = 1361;
            this.oC_Expression();

        }
        this.state = 1365;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1364;
            this.match(CypherParser.SP);
        }

        this.state = 1367;
        this.match(CypherParser.T__8);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_PatternComprehensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PatternComprehension;
    return this;
}

OC_PatternComprehensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_PatternComprehensionContext.prototype.constructor = OC_PatternComprehensionContext;

OC_PatternComprehensionContext.prototype.oC_RelationshipsPattern = function() {
    return this.getTypedRuleContext(OC_RelationshipsPatternContext,0);
};

OC_PatternComprehensionContext.prototype.oC_Expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_ExpressionContext);
    } else {
        return this.getTypedRuleContext(OC_ExpressionContext,i);
    }
};

OC_PatternComprehensionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_PatternComprehensionContext.prototype.oC_Variable = function() {
    return this.getTypedRuleContext(OC_VariableContext,0);
};

OC_PatternComprehensionContext.prototype.WHERE = function() {
    return this.getToken(CypherParser.WHERE, 0);
};

OC_PatternComprehensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_PatternComprehension(this);
	}
};

OC_PatternComprehensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_PatternComprehension(this);
	}
};




CypherParser.OC_PatternComprehensionContext = OC_PatternComprehensionContext;

CypherParser.prototype.oC_PatternComprehension = function() {

    var localctx = new OC_PatternComprehensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CypherParser.RULE_oC_PatternComprehension);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1369;
        this.match(CypherParser.T__7);
        this.state = 1371;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1370;
            this.match(CypherParser.SP);
        }

        this.state = 1381;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (CypherParser.COUNT - 83)) | (1 << (CypherParser.ANY - 83)) | (1 << (CypherParser.NONE - 83)) | (1 << (CypherParser.SINGLE - 83)) | (1 << (CypherParser.HexLetter - 83)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.FILTER - 118)) | (1 << (CypherParser.EXTRACT - 118)) | (1 << (CypherParser.UnescapedSymbolicName - 118)) | (1 << (CypherParser.EscapedSymbolicName - 118)))) !== 0)) {
            this.state = 1373;
            this.oC_Variable();
            this.state = 1375;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1374;
                this.match(CypherParser.SP);
            }

            this.state = 1377;
            this.match(CypherParser.T__2);
            this.state = 1379;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1378;
                this.match(CypherParser.SP);
            }

        }

        this.state = 1383;
        this.oC_RelationshipsPattern();
        this.state = 1385;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1384;
            this.match(CypherParser.SP);
        }

        this.state = 1395;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.WHERE) {
            this.state = 1387;
            this.match(CypherParser.WHERE);
            this.state = 1389;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1388;
                this.match(CypherParser.SP);
            }

            this.state = 1391;
            this.oC_Expression();
            this.state = 1393;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1392;
                this.match(CypherParser.SP);
            }

        }

        this.state = 1397;
        this.match(CypherParser.T__10);
        this.state = 1399;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1398;
            this.match(CypherParser.SP);
        }

        this.state = 1401;
        this.oC_Expression();
        this.state = 1403;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1402;
            this.match(CypherParser.SP);
        }

        this.state = 1405;
        this.match(CypherParser.T__8);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_PropertyLookupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PropertyLookup;
    return this;
}

OC_PropertyLookupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_PropertyLookupContext.prototype.constructor = OC_PropertyLookupContext;

OC_PropertyLookupContext.prototype.oC_PropertyKeyName = function() {
    return this.getTypedRuleContext(OC_PropertyKeyNameContext,0);
};

OC_PropertyLookupContext.prototype.SP = function() {
    return this.getToken(CypherParser.SP, 0);
};

OC_PropertyLookupContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_PropertyLookup(this);
	}
};

OC_PropertyLookupContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_PropertyLookup(this);
	}
};




CypherParser.OC_PropertyLookupContext = OC_PropertyLookupContext;

CypherParser.prototype.oC_PropertyLookup = function() {

    var localctx = new OC_PropertyLookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CypherParser.RULE_oC_PropertyLookup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1407;
        this.match(CypherParser.T__22);
        this.state = 1409;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1408;
            this.match(CypherParser.SP);
        }

        this.state = 1411;
        this.oC_PropertyKeyName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_CaseExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_CaseExpression;
    return this;
}

OC_CaseExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_CaseExpressionContext.prototype.constructor = OC_CaseExpressionContext;

OC_CaseExpressionContext.prototype.END = function() {
    return this.getToken(CypherParser.END, 0);
};

OC_CaseExpressionContext.prototype.ELSE = function() {
    return this.getToken(CypherParser.ELSE, 0);
};

OC_CaseExpressionContext.prototype.oC_Expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_ExpressionContext);
    } else {
        return this.getTypedRuleContext(OC_ExpressionContext,i);
    }
};

OC_CaseExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_CaseExpressionContext.prototype.CASE = function() {
    return this.getToken(CypherParser.CASE, 0);
};

OC_CaseExpressionContext.prototype.oC_CaseAlternatives = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_CaseAlternativesContext);
    } else {
        return this.getTypedRuleContext(OC_CaseAlternativesContext,i);
    }
};

OC_CaseExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_CaseExpression(this);
	}
};

OC_CaseExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_CaseExpression(this);
	}
};




CypherParser.OC_CaseExpressionContext = OC_CaseExpressionContext;

CypherParser.prototype.oC_CaseExpression = function() {

    var localctx = new OC_CaseExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, CypherParser.RULE_oC_CaseExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1435;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1413;
            this.match(CypherParser.CASE);
            this.state = 1418; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 1415;
            		this._errHandler.sync(this);
            		_la = this._input.LA(1);
            		if(_la===CypherParser.SP) {
            		    this.state = 1414;
            		    this.match(CypherParser.SP);
            		}

            		this.state = 1417;
            		this.oC_CaseAlternatives();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 1420; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,258, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        case 2:
            this.state = 1422;
            this.match(CypherParser.CASE);
            this.state = 1424;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1423;
                this.match(CypherParser.SP);
            }

            this.state = 1426;
            this.oC_Expression();
            this.state = 1431; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 1428;
            		this._errHandler.sync(this);
            		_la = this._input.LA(1);
            		if(_la===CypherParser.SP) {
            		    this.state = 1427;
            		    this.match(CypherParser.SP);
            		}

            		this.state = 1430;
            		this.oC_CaseAlternatives();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 1433; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,261, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;

        }
        this.state = 1445;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,265,this._ctx);
        if(la_===1) {
            this.state = 1438;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1437;
                this.match(CypherParser.SP);
            }

            this.state = 1440;
            this.match(CypherParser.ELSE);
            this.state = 1442;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1441;
                this.match(CypherParser.SP);
            }

            this.state = 1444;
            this.oC_Expression();

        }
        this.state = 1448;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1447;
            this.match(CypherParser.SP);
        }

        this.state = 1450;
        this.match(CypherParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_CaseAlternativesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_CaseAlternatives;
    return this;
}

OC_CaseAlternativesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_CaseAlternativesContext.prototype.constructor = OC_CaseAlternativesContext;

OC_CaseAlternativesContext.prototype.WHEN = function() {
    return this.getToken(CypherParser.WHEN, 0);
};

OC_CaseAlternativesContext.prototype.oC_Expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_ExpressionContext);
    } else {
        return this.getTypedRuleContext(OC_ExpressionContext,i);
    }
};

OC_CaseAlternativesContext.prototype.THEN = function() {
    return this.getToken(CypherParser.THEN, 0);
};

OC_CaseAlternativesContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_CaseAlternativesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_CaseAlternatives(this);
	}
};

OC_CaseAlternativesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_CaseAlternatives(this);
	}
};




CypherParser.OC_CaseAlternativesContext = OC_CaseAlternativesContext;

CypherParser.prototype.oC_CaseAlternatives = function() {

    var localctx = new OC_CaseAlternativesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CypherParser.RULE_oC_CaseAlternatives);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1452;
        this.match(CypherParser.WHEN);
        this.state = 1454;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1453;
            this.match(CypherParser.SP);
        }

        this.state = 1456;
        this.oC_Expression();
        this.state = 1458;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1457;
            this.match(CypherParser.SP);
        }

        this.state = 1460;
        this.match(CypherParser.THEN);
        this.state = 1462;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1461;
            this.match(CypherParser.SP);
        }

        this.state = 1464;
        this.oC_Expression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_VariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Variable;
    return this;
}

OC_VariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_VariableContext.prototype.constructor = OC_VariableContext;

OC_VariableContext.prototype.oC_SymbolicName = function() {
    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
};

OC_VariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Variable(this);
	}
};

OC_VariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Variable(this);
	}
};




CypherParser.OC_VariableContext = OC_VariableContext;

CypherParser.prototype.oC_Variable = function() {

    var localctx = new OC_VariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CypherParser.RULE_oC_Variable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1466;
        this.oC_SymbolicName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_NumberLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_NumberLiteral;
    return this;
}

OC_NumberLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_NumberLiteralContext.prototype.constructor = OC_NumberLiteralContext;

OC_NumberLiteralContext.prototype.oC_DoubleLiteral = function() {
    return this.getTypedRuleContext(OC_DoubleLiteralContext,0);
};

OC_NumberLiteralContext.prototype.oC_IntegerLiteral = function() {
    return this.getTypedRuleContext(OC_IntegerLiteralContext,0);
};

OC_NumberLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_NumberLiteral(this);
	}
};

OC_NumberLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_NumberLiteral(this);
	}
};




CypherParser.OC_NumberLiteralContext = OC_NumberLiteralContext;

CypherParser.prototype.oC_NumberLiteral = function() {

    var localctx = new OC_NumberLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, CypherParser.RULE_oC_NumberLiteral);
    try {
        this.state = 1470;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.ExponentDecimalReal:
        case CypherParser.RegularDecimalReal:
            this.enterOuterAlt(localctx, 1);
            this.state = 1468;
            this.oC_DoubleLiteral();
            break;
        case CypherParser.HexInteger:
        case CypherParser.DecimalInteger:
        case CypherParser.OctalInteger:
            this.enterOuterAlt(localctx, 2);
            this.state = 1469;
            this.oC_IntegerLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_MapLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_MapLiteral;
    return this;
}

OC_MapLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_MapLiteralContext.prototype.constructor = OC_MapLiteralContext;

OC_MapLiteralContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_MapLiteralContext.prototype.oC_PropertyKeyName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_PropertyKeyNameContext);
    } else {
        return this.getTypedRuleContext(OC_PropertyKeyNameContext,i);
    }
};

OC_MapLiteralContext.prototype.oC_Expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_ExpressionContext);
    } else {
        return this.getTypedRuleContext(OC_ExpressionContext,i);
    }
};

OC_MapLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_MapLiteral(this);
	}
};

OC_MapLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_MapLiteral(this);
	}
};




CypherParser.OC_MapLiteralContext = OC_MapLiteralContext;

CypherParser.prototype.oC_MapLiteral = function() {

    var localctx = new OC_MapLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, CypherParser.RULE_oC_MapLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1472;
        this.match(CypherParser.T__23);
        this.state = 1474;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CypherParser.SP) {
            this.state = 1473;
            this.match(CypherParser.SP);
        }

        this.state = 1509;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (CypherParser.UNION - 46)) | (1 << (CypherParser.ALL - 46)) | (1 << (CypherParser.OPTIONAL - 46)) | (1 << (CypherParser.MATCH - 46)) | (1 << (CypherParser.UNWIND - 46)) | (1 << (CypherParser.AS - 46)) | (1 << (CypherParser.MERGE - 46)) | (1 << (CypherParser.ON - 46)) | (1 << (CypherParser.CREATE - 46)) | (1 << (CypherParser.SET - 46)) | (1 << (CypherParser.DETACH - 46)) | (1 << (CypherParser.DELETE - 46)) | (1 << (CypherParser.REMOVE - 46)) | (1 << (CypherParser.WITH - 46)) | (1 << (CypherParser.DISTINCT - 46)) | (1 << (CypherParser.RETURN - 46)) | (1 << (CypherParser.ORDER - 46)) | (1 << (CypherParser.BY - 46)) | (1 << (CypherParser.L_SKIP - 46)) | (1 << (CypherParser.LIMIT - 46)) | (1 << (CypherParser.ASCENDING - 46)) | (1 << (CypherParser.ASC - 46)) | (1 << (CypherParser.DESCENDING - 46)) | (1 << (CypherParser.DESC - 46)) | (1 << (CypherParser.WHERE - 46)) | (1 << (CypherParser.OR - 46)) | (1 << (CypherParser.XOR - 46)) | (1 << (CypherParser.AND - 46)) | (1 << (CypherParser.NOT - 46)) | (1 << (CypherParser.IN - 46)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (CypherParser.STARTS - 78)) | (1 << (CypherParser.ENDS - 78)) | (1 << (CypherParser.CONTAINS - 78)) | (1 << (CypherParser.IS - 78)) | (1 << (CypherParser.NULL - 78)) | (1 << (CypherParser.COUNT - 78)) | (1 << (CypherParser.ANY - 78)) | (1 << (CypherParser.NONE - 78)) | (1 << (CypherParser.SINGLE - 78)) | (1 << (CypherParser.TRUE - 78)) | (1 << (CypherParser.FALSE - 78)) | (1 << (CypherParser.EXISTS - 78)) | (1 << (CypherParser.CASE - 78)) | (1 << (CypherParser.ELSE - 78)) | (1 << (CypherParser.END - 78)) | (1 << (CypherParser.WHEN - 78)) | (1 << (CypherParser.THEN - 78)) | (1 << (CypherParser.HexLetter - 78)) | (1 << (CypherParser.CONSTRAINT - 78)) | (1 << (CypherParser.DO - 78)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (CypherParser.FOR - 110)) | (1 << (CypherParser.REQUIRE - 110)) | (1 << (CypherParser.UNIQUE - 110)) | (1 << (CypherParser.MANDATORY - 110)) | (1 << (CypherParser.SCALAR - 110)) | (1 << (CypherParser.OF - 110)) | (1 << (CypherParser.ADD - 110)) | (1 << (CypherParser.DROP - 110)) | (1 << (CypherParser.FILTER - 110)) | (1 << (CypherParser.EXTRACT - 110)) | (1 << (CypherParser.UnescapedSymbolicName - 110)) | (1 << (CypherParser.EscapedSymbolicName - 110)))) !== 0)) {
            this.state = 1476;
            this.oC_PropertyKeyName();
            this.state = 1478;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1477;
                this.match(CypherParser.SP);
            }

            this.state = 1480;
            this.match(CypherParser.T__9);
            this.state = 1482;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1481;
                this.match(CypherParser.SP);
            }

            this.state = 1484;
            this.oC_Expression();
            this.state = 1486;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CypherParser.SP) {
                this.state = 1485;
                this.match(CypherParser.SP);
            }

            this.state = 1506;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CypherParser.T__1) {
                this.state = 1488;
                this.match(CypherParser.T__1);
                this.state = 1490;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1489;
                    this.match(CypherParser.SP);
                }

                this.state = 1492;
                this.oC_PropertyKeyName();
                this.state = 1494;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1493;
                    this.match(CypherParser.SP);
                }

                this.state = 1496;
                this.match(CypherParser.T__9);
                this.state = 1498;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1497;
                    this.match(CypherParser.SP);
                }

                this.state = 1500;
                this.oC_Expression();
                this.state = 1502;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CypherParser.SP) {
                    this.state = 1501;
                    this.match(CypherParser.SP);
                }

                this.state = 1508;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1511;
        this.match(CypherParser.T__24);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Parameter;
    return this;
}

OC_ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_ParameterContext.prototype.constructor = OC_ParameterContext;

OC_ParameterContext.prototype.oC_SymbolicName = function() {
    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
};

OC_ParameterContext.prototype.DecimalInteger = function() {
    return this.getToken(CypherParser.DecimalInteger, 0);
};

OC_ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Parameter(this);
	}
};

OC_ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Parameter(this);
	}
};




CypherParser.OC_ParameterContext = OC_ParameterContext;

CypherParser.prototype.oC_Parameter = function() {

    var localctx = new OC_ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, CypherParser.RULE_oC_Parameter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1513;
        this.match(CypherParser.T__25);
        this.state = 1516;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.COUNT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.HexLetter:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
            this.state = 1514;
            this.oC_SymbolicName();
            break;
        case CypherParser.DecimalInteger:
            this.state = 1515;
            this.match(CypherParser.DecimalInteger);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_PropertyExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PropertyExpression;
    return this;
}

OC_PropertyExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_PropertyExpressionContext.prototype.constructor = OC_PropertyExpressionContext;

OC_PropertyExpressionContext.prototype.oC_Atom = function() {
    return this.getTypedRuleContext(OC_AtomContext,0);
};

OC_PropertyExpressionContext.prototype.oC_PropertyLookup = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OC_PropertyLookupContext);
    } else {
        return this.getTypedRuleContext(OC_PropertyLookupContext,i);
    }
};

OC_PropertyExpressionContext.prototype.SP = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CypherParser.SP);
    } else {
        return this.getToken(CypherParser.SP, i);
    }
};


OC_PropertyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_PropertyExpression(this);
	}
};

OC_PropertyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_PropertyExpression(this);
	}
};




CypherParser.OC_PropertyExpressionContext = OC_PropertyExpressionContext;

CypherParser.prototype.oC_PropertyExpression = function() {

    var localctx = new OC_PropertyExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, CypherParser.RULE_oC_PropertyExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1518;
        this.oC_Atom();
        this.state = 1523; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1520;
        		this._errHandler.sync(this);
        		_la = this._input.LA(1);
        		if(_la===CypherParser.SP) {
        		    this.state = 1519;
        		    this.match(CypherParser.SP);
        		}

        		this.state = 1522;
        		this.oC_PropertyLookup();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1525; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,283, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_PropertyKeyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PropertyKeyName;
    return this;
}

OC_PropertyKeyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_PropertyKeyNameContext.prototype.constructor = OC_PropertyKeyNameContext;

OC_PropertyKeyNameContext.prototype.oC_SchemaName = function() {
    return this.getTypedRuleContext(OC_SchemaNameContext,0);
};

OC_PropertyKeyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_PropertyKeyName(this);
	}
};

OC_PropertyKeyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_PropertyKeyName(this);
	}
};




CypherParser.OC_PropertyKeyNameContext = OC_PropertyKeyNameContext;

CypherParser.prototype.oC_PropertyKeyName = function() {

    var localctx = new OC_PropertyKeyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, CypherParser.RULE_oC_PropertyKeyName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1527;
        this.oC_SchemaName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_IntegerLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_IntegerLiteral;
    return this;
}

OC_IntegerLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_IntegerLiteralContext.prototype.constructor = OC_IntegerLiteralContext;

OC_IntegerLiteralContext.prototype.HexInteger = function() {
    return this.getToken(CypherParser.HexInteger, 0);
};

OC_IntegerLiteralContext.prototype.OctalInteger = function() {
    return this.getToken(CypherParser.OctalInteger, 0);
};

OC_IntegerLiteralContext.prototype.DecimalInteger = function() {
    return this.getToken(CypherParser.DecimalInteger, 0);
};

OC_IntegerLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_IntegerLiteral(this);
	}
};

OC_IntegerLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_IntegerLiteral(this);
	}
};




CypherParser.OC_IntegerLiteralContext = OC_IntegerLiteralContext;

CypherParser.prototype.oC_IntegerLiteral = function() {

    var localctx = new OC_IntegerLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, CypherParser.RULE_oC_IntegerLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1529;
        _la = this._input.LA(1);
        if(!(((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CypherParser.HexInteger - 96)) | (1 << (CypherParser.DecimalInteger - 96)) | (1 << (CypherParser.OctalInteger - 96)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_DoubleLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_DoubleLiteral;
    return this;
}

OC_DoubleLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_DoubleLiteralContext.prototype.constructor = OC_DoubleLiteralContext;

OC_DoubleLiteralContext.prototype.ExponentDecimalReal = function() {
    return this.getToken(CypherParser.ExponentDecimalReal, 0);
};

OC_DoubleLiteralContext.prototype.RegularDecimalReal = function() {
    return this.getToken(CypherParser.RegularDecimalReal, 0);
};

OC_DoubleLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_DoubleLiteral(this);
	}
};

OC_DoubleLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_DoubleLiteral(this);
	}
};




CypherParser.OC_DoubleLiteralContext = OC_DoubleLiteralContext;

CypherParser.prototype.oC_DoubleLiteral = function() {

    var localctx = new OC_DoubleLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, CypherParser.RULE_oC_DoubleLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1531;
        _la = this._input.LA(1);
        if(!(_la===CypherParser.ExponentDecimalReal || _la===CypherParser.RegularDecimalReal)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_SchemaNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_SchemaName;
    return this;
}

OC_SchemaNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_SchemaNameContext.prototype.constructor = OC_SchemaNameContext;

OC_SchemaNameContext.prototype.oC_SymbolicName = function() {
    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
};

OC_SchemaNameContext.prototype.oC_ReservedWord = function() {
    return this.getTypedRuleContext(OC_ReservedWordContext,0);
};

OC_SchemaNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_SchemaName(this);
	}
};

OC_SchemaNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_SchemaName(this);
	}
};




CypherParser.OC_SchemaNameContext = OC_SchemaNameContext;

CypherParser.prototype.oC_SchemaName = function() {

    var localctx = new OC_SchemaNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, CypherParser.RULE_oC_SchemaName);
    try {
        this.state = 1535;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CypherParser.COUNT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.HexLetter:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
            this.enterOuterAlt(localctx, 1);
            this.state = 1533;
            this.oC_SymbolicName();
            break;
        case CypherParser.UNION:
        case CypherParser.ALL:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.AS:
        case CypherParser.MERGE:
        case CypherParser.ON:
        case CypherParser.CREATE:
        case CypherParser.SET:
        case CypherParser.DETACH:
        case CypherParser.DELETE:
        case CypherParser.REMOVE:
        case CypherParser.WITH:
        case CypherParser.DISTINCT:
        case CypherParser.RETURN:
        case CypherParser.ORDER:
        case CypherParser.BY:
        case CypherParser.L_SKIP:
        case CypherParser.LIMIT:
        case CypherParser.ASCENDING:
        case CypherParser.ASC:
        case CypherParser.DESCENDING:
        case CypherParser.DESC:
        case CypherParser.WHERE:
        case CypherParser.OR:
        case CypherParser.XOR:
        case CypherParser.AND:
        case CypherParser.NOT:
        case CypherParser.IN:
        case CypherParser.STARTS:
        case CypherParser.ENDS:
        case CypherParser.CONTAINS:
        case CypherParser.IS:
        case CypherParser.NULL:
        case CypherParser.TRUE:
        case CypherParser.FALSE:
        case CypherParser.EXISTS:
        case CypherParser.CASE:
        case CypherParser.ELSE:
        case CypherParser.END:
        case CypherParser.WHEN:
        case CypherParser.THEN:
        case CypherParser.CONSTRAINT:
        case CypherParser.DO:
        case CypherParser.FOR:
        case CypherParser.REQUIRE:
        case CypherParser.UNIQUE:
        case CypherParser.MANDATORY:
        case CypherParser.SCALAR:
        case CypherParser.OF:
        case CypherParser.ADD:
        case CypherParser.DROP:
            this.enterOuterAlt(localctx, 2);
            this.state = 1534;
            this.oC_ReservedWord();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_ReservedWordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ReservedWord;
    return this;
}

OC_ReservedWordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_ReservedWordContext.prototype.constructor = OC_ReservedWordContext;

OC_ReservedWordContext.prototype.ALL = function() {
    return this.getToken(CypherParser.ALL, 0);
};

OC_ReservedWordContext.prototype.ASC = function() {
    return this.getToken(CypherParser.ASC, 0);
};

OC_ReservedWordContext.prototype.ASCENDING = function() {
    return this.getToken(CypherParser.ASCENDING, 0);
};

OC_ReservedWordContext.prototype.BY = function() {
    return this.getToken(CypherParser.BY, 0);
};

OC_ReservedWordContext.prototype.CREATE = function() {
    return this.getToken(CypherParser.CREATE, 0);
};

OC_ReservedWordContext.prototype.DELETE = function() {
    return this.getToken(CypherParser.DELETE, 0);
};

OC_ReservedWordContext.prototype.DESC = function() {
    return this.getToken(CypherParser.DESC, 0);
};

OC_ReservedWordContext.prototype.DESCENDING = function() {
    return this.getToken(CypherParser.DESCENDING, 0);
};

OC_ReservedWordContext.prototype.DETACH = function() {
    return this.getToken(CypherParser.DETACH, 0);
};

OC_ReservedWordContext.prototype.EXISTS = function() {
    return this.getToken(CypherParser.EXISTS, 0);
};

OC_ReservedWordContext.prototype.LIMIT = function() {
    return this.getToken(CypherParser.LIMIT, 0);
};

OC_ReservedWordContext.prototype.MATCH = function() {
    return this.getToken(CypherParser.MATCH, 0);
};

OC_ReservedWordContext.prototype.MERGE = function() {
    return this.getToken(CypherParser.MERGE, 0);
};

OC_ReservedWordContext.prototype.ON = function() {
    return this.getToken(CypherParser.ON, 0);
};

OC_ReservedWordContext.prototype.OPTIONAL = function() {
    return this.getToken(CypherParser.OPTIONAL, 0);
};

OC_ReservedWordContext.prototype.ORDER = function() {
    return this.getToken(CypherParser.ORDER, 0);
};

OC_ReservedWordContext.prototype.REMOVE = function() {
    return this.getToken(CypherParser.REMOVE, 0);
};

OC_ReservedWordContext.prototype.RETURN = function() {
    return this.getToken(CypherParser.RETURN, 0);
};

OC_ReservedWordContext.prototype.SET = function() {
    return this.getToken(CypherParser.SET, 0);
};

OC_ReservedWordContext.prototype.L_SKIP = function() {
    return this.getToken(CypherParser.L_SKIP, 0);
};

OC_ReservedWordContext.prototype.WHERE = function() {
    return this.getToken(CypherParser.WHERE, 0);
};

OC_ReservedWordContext.prototype.WITH = function() {
    return this.getToken(CypherParser.WITH, 0);
};

OC_ReservedWordContext.prototype.UNION = function() {
    return this.getToken(CypherParser.UNION, 0);
};

OC_ReservedWordContext.prototype.UNWIND = function() {
    return this.getToken(CypherParser.UNWIND, 0);
};

OC_ReservedWordContext.prototype.AND = function() {
    return this.getToken(CypherParser.AND, 0);
};

OC_ReservedWordContext.prototype.AS = function() {
    return this.getToken(CypherParser.AS, 0);
};

OC_ReservedWordContext.prototype.CONTAINS = function() {
    return this.getToken(CypherParser.CONTAINS, 0);
};

OC_ReservedWordContext.prototype.DISTINCT = function() {
    return this.getToken(CypherParser.DISTINCT, 0);
};

OC_ReservedWordContext.prototype.ENDS = function() {
    return this.getToken(CypherParser.ENDS, 0);
};

OC_ReservedWordContext.prototype.IN = function() {
    return this.getToken(CypherParser.IN, 0);
};

OC_ReservedWordContext.prototype.IS = function() {
    return this.getToken(CypherParser.IS, 0);
};

OC_ReservedWordContext.prototype.NOT = function() {
    return this.getToken(CypherParser.NOT, 0);
};

OC_ReservedWordContext.prototype.OR = function() {
    return this.getToken(CypherParser.OR, 0);
};

OC_ReservedWordContext.prototype.STARTS = function() {
    return this.getToken(CypherParser.STARTS, 0);
};

OC_ReservedWordContext.prototype.XOR = function() {
    return this.getToken(CypherParser.XOR, 0);
};

OC_ReservedWordContext.prototype.FALSE = function() {
    return this.getToken(CypherParser.FALSE, 0);
};

OC_ReservedWordContext.prototype.TRUE = function() {
    return this.getToken(CypherParser.TRUE, 0);
};

OC_ReservedWordContext.prototype.NULL = function() {
    return this.getToken(CypherParser.NULL, 0);
};

OC_ReservedWordContext.prototype.CONSTRAINT = function() {
    return this.getToken(CypherParser.CONSTRAINT, 0);
};

OC_ReservedWordContext.prototype.DO = function() {
    return this.getToken(CypherParser.DO, 0);
};

OC_ReservedWordContext.prototype.FOR = function() {
    return this.getToken(CypherParser.FOR, 0);
};

OC_ReservedWordContext.prototype.REQUIRE = function() {
    return this.getToken(CypherParser.REQUIRE, 0);
};

OC_ReservedWordContext.prototype.UNIQUE = function() {
    return this.getToken(CypherParser.UNIQUE, 0);
};

OC_ReservedWordContext.prototype.CASE = function() {
    return this.getToken(CypherParser.CASE, 0);
};

OC_ReservedWordContext.prototype.WHEN = function() {
    return this.getToken(CypherParser.WHEN, 0);
};

OC_ReservedWordContext.prototype.THEN = function() {
    return this.getToken(CypherParser.THEN, 0);
};

OC_ReservedWordContext.prototype.ELSE = function() {
    return this.getToken(CypherParser.ELSE, 0);
};

OC_ReservedWordContext.prototype.END = function() {
    return this.getToken(CypherParser.END, 0);
};

OC_ReservedWordContext.prototype.MANDATORY = function() {
    return this.getToken(CypherParser.MANDATORY, 0);
};

OC_ReservedWordContext.prototype.SCALAR = function() {
    return this.getToken(CypherParser.SCALAR, 0);
};

OC_ReservedWordContext.prototype.OF = function() {
    return this.getToken(CypherParser.OF, 0);
};

OC_ReservedWordContext.prototype.ADD = function() {
    return this.getToken(CypherParser.ADD, 0);
};

OC_ReservedWordContext.prototype.DROP = function() {
    return this.getToken(CypherParser.DROP, 0);
};

OC_ReservedWordContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_ReservedWord(this);
	}
};

OC_ReservedWordContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_ReservedWord(this);
	}
};




CypherParser.OC_ReservedWordContext = OC_ReservedWordContext;

CypherParser.prototype.oC_ReservedWord = function() {

    var localctx = new OC_ReservedWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, CypherParser.RULE_oC_ReservedWord);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1537;
        _la = this._input.LA(1);
        if(!(((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (CypherParser.UNION - 46)) | (1 << (CypherParser.ALL - 46)) | (1 << (CypherParser.OPTIONAL - 46)) | (1 << (CypherParser.MATCH - 46)) | (1 << (CypherParser.UNWIND - 46)) | (1 << (CypherParser.AS - 46)) | (1 << (CypherParser.MERGE - 46)) | (1 << (CypherParser.ON - 46)) | (1 << (CypherParser.CREATE - 46)) | (1 << (CypherParser.SET - 46)) | (1 << (CypherParser.DETACH - 46)) | (1 << (CypherParser.DELETE - 46)) | (1 << (CypherParser.REMOVE - 46)) | (1 << (CypherParser.WITH - 46)) | (1 << (CypherParser.DISTINCT - 46)) | (1 << (CypherParser.RETURN - 46)) | (1 << (CypherParser.ORDER - 46)) | (1 << (CypherParser.BY - 46)) | (1 << (CypherParser.L_SKIP - 46)) | (1 << (CypherParser.LIMIT - 46)) | (1 << (CypherParser.ASCENDING - 46)) | (1 << (CypherParser.ASC - 46)) | (1 << (CypherParser.DESCENDING - 46)) | (1 << (CypherParser.DESC - 46)) | (1 << (CypherParser.WHERE - 46)) | (1 << (CypherParser.OR - 46)) | (1 << (CypherParser.XOR - 46)) | (1 << (CypherParser.AND - 46)) | (1 << (CypherParser.NOT - 46)) | (1 << (CypherParser.IN - 46)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (CypherParser.STARTS - 78)) | (1 << (CypherParser.ENDS - 78)) | (1 << (CypherParser.CONTAINS - 78)) | (1 << (CypherParser.IS - 78)) | (1 << (CypherParser.NULL - 78)) | (1 << (CypherParser.TRUE - 78)) | (1 << (CypherParser.FALSE - 78)) | (1 << (CypherParser.EXISTS - 78)) | (1 << (CypherParser.CASE - 78)) | (1 << (CypherParser.ELSE - 78)) | (1 << (CypherParser.END - 78)) | (1 << (CypherParser.WHEN - 78)) | (1 << (CypherParser.THEN - 78)) | (1 << (CypherParser.CONSTRAINT - 78)) | (1 << (CypherParser.DO - 78)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (CypherParser.FOR - 110)) | (1 << (CypherParser.REQUIRE - 110)) | (1 << (CypherParser.UNIQUE - 110)) | (1 << (CypherParser.MANDATORY - 110)) | (1 << (CypherParser.SCALAR - 110)) | (1 << (CypherParser.OF - 110)) | (1 << (CypherParser.ADD - 110)) | (1 << (CypherParser.DROP - 110)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_SymbolicNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_SymbolicName;
    return this;
}

OC_SymbolicNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_SymbolicNameContext.prototype.constructor = OC_SymbolicNameContext;

OC_SymbolicNameContext.prototype.UnescapedSymbolicName = function() {
    return this.getToken(CypherParser.UnescapedSymbolicName, 0);
};

OC_SymbolicNameContext.prototype.EscapedSymbolicName = function() {
    return this.getToken(CypherParser.EscapedSymbolicName, 0);
};

OC_SymbolicNameContext.prototype.HexLetter = function() {
    return this.getToken(CypherParser.HexLetter, 0);
};

OC_SymbolicNameContext.prototype.COUNT = function() {
    return this.getToken(CypherParser.COUNT, 0);
};

OC_SymbolicNameContext.prototype.FILTER = function() {
    return this.getToken(CypherParser.FILTER, 0);
};

OC_SymbolicNameContext.prototype.EXTRACT = function() {
    return this.getToken(CypherParser.EXTRACT, 0);
};

OC_SymbolicNameContext.prototype.ANY = function() {
    return this.getToken(CypherParser.ANY, 0);
};

OC_SymbolicNameContext.prototype.NONE = function() {
    return this.getToken(CypherParser.NONE, 0);
};

OC_SymbolicNameContext.prototype.SINGLE = function() {
    return this.getToken(CypherParser.SINGLE, 0);
};

OC_SymbolicNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_SymbolicName(this);
	}
};

OC_SymbolicNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_SymbolicName(this);
	}
};




CypherParser.OC_SymbolicNameContext = OC_SymbolicNameContext;

CypherParser.prototype.oC_SymbolicName = function() {

    var localctx = new OC_SymbolicNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, CypherParser.RULE_oC_SymbolicName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1539;
        _la = this._input.LA(1);
        if(!(((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (CypherParser.COUNT - 83)) | (1 << (CypherParser.ANY - 83)) | (1 << (CypherParser.NONE - 83)) | (1 << (CypherParser.SINGLE - 83)) | (1 << (CypherParser.HexLetter - 83)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.FILTER - 118)) | (1 << (CypherParser.EXTRACT - 118)) | (1 << (CypherParser.UnescapedSymbolicName - 118)) | (1 << (CypherParser.EscapedSymbolicName - 118)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_LeftArrowHeadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_LeftArrowHead;
    return this;
}

OC_LeftArrowHeadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_LeftArrowHeadContext.prototype.constructor = OC_LeftArrowHeadContext;


OC_LeftArrowHeadContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_LeftArrowHead(this);
	}
};

OC_LeftArrowHeadContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_LeftArrowHead(this);
	}
};




CypherParser.OC_LeftArrowHeadContext = OC_LeftArrowHeadContext;

CypherParser.prototype.oC_LeftArrowHead = function() {

    var localctx = new OC_LeftArrowHeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, CypherParser.RULE_oC_LeftArrowHead);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1541;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__18) | (1 << CypherParser.T__26) | (1 << CypherParser.T__27) | (1 << CypherParser.T__28) | (1 << CypherParser.T__29))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_RightArrowHeadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_RightArrowHead;
    return this;
}

OC_RightArrowHeadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_RightArrowHeadContext.prototype.constructor = OC_RightArrowHeadContext;


OC_RightArrowHeadContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_RightArrowHead(this);
	}
};

OC_RightArrowHeadContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_RightArrowHead(this);
	}
};




CypherParser.OC_RightArrowHeadContext = OC_RightArrowHeadContext;

CypherParser.prototype.oC_RightArrowHead = function() {

    var localctx = new OC_RightArrowHeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, CypherParser.RULE_oC_RightArrowHead);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1543;
        _la = this._input.LA(1);
        if(!(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (CypherParser.T__19 - 20)) | (1 << (CypherParser.T__30 - 20)) | (1 << (CypherParser.T__31 - 20)) | (1 << (CypherParser.T__32 - 20)) | (1 << (CypherParser.T__33 - 20)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OC_DashContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Dash;
    return this;
}

OC_DashContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OC_DashContext.prototype.constructor = OC_DashContext;


OC_DashContext.prototype.enterRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.enterOC_Dash(this);
	}
};

OC_DashContext.prototype.exitRule = function(listener) {
    if(listener instanceof CypherListener ) {
        listener.exitOC_Dash(this);
	}
};




CypherParser.OC_DashContext = OC_DashContext;

CypherParser.prototype.oC_Dash = function() {

    var localctx = new OC_DashContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, CypherParser.RULE_oC_Dash);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1545;
        _la = this._input.LA(1);
        if(!(((((_la - 14)) & ~0x1f) == 0 && ((1 << (_la - 14)) & ((1 << (CypherParser.T__13 - 14)) | (1 << (CypherParser.T__34 - 14)) | (1 << (CypherParser.T__35 - 14)) | (1 << (CypherParser.T__36 - 14)) | (1 << (CypherParser.T__37 - 14)) | (1 << (CypherParser.T__38 - 14)) | (1 << (CypherParser.T__39 - 14)) | (1 << (CypherParser.T__40 - 14)) | (1 << (CypherParser.T__41 - 14)) | (1 << (CypherParser.T__42 - 14)) | (1 << (CypherParser.T__43 - 14)) | (1 << (CypherParser.T__44 - 14)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.CypherParser = CypherParser;
